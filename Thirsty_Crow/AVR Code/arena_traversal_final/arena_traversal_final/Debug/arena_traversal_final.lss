
arena_traversal_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000282  00800200  00003340  000033d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000135  00800482  00800482  00003656  2**0
                  ALLOC
  3 .stab         00001d1c  00000000  00000000  00003658  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000647  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000059c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7b  00000000  00000000  00005a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000359  00000000  00000000  000079bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c82  00000000  00000000  00007d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d8  00000000  00000000  00008998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008dc  00000000  00000000  00008f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002183  00000000  00000000  0000984c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000b9cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__ctors_end>
       4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
       8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
       c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      14:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_5>
      18:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_6>
      1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      54:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      58:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      5c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      60:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_25>
      68:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      6c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      70:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      74:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      78:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      7c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      80:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      84:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      88:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      8c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      90:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      94:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      98:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      9c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      a0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      a4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      a8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      ac:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      b0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      b4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      b8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      bc:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      c0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      c4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      c8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      cc:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      d0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      d4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      d8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      dc:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      e0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      e4:	cc 09       	sbc	r28, r12
      e6:	f9 07       	cpc	r31, r25
      e8:	fe 07       	cpc	r31, r30
      ea:	07 08       	sbc	r0, r7
      ec:	0c 08       	sbc	r0, r12
      ee:	11 08       	sbc	r1, r1
      f0:	18 08       	sbc	r1, r8
      f2:	21 08       	sbc	r2, r1
      f4:	28 08       	sbc	r2, r8
      f6:	2f 08       	sbc	r2, r15
      f8:	38 08       	sbc	r3, r8
      fa:	43 08       	sbc	r4, r3
      fc:	48 08       	sbc	r4, r8
      fe:	4f 08       	sbc	r4, r15
     100:	54 08       	sbc	r5, r4
     102:	5d 08       	sbc	r5, r13
     104:	66 08       	sbc	r6, r6
     106:	6b 08       	sbc	r6, r11
     108:	72 08       	sbc	r7, r2
     10a:	77 08       	sbc	r7, r7
     10c:	80 08       	sbc	r8, r0
     10e:	89 08       	sbc	r8, r9
     110:	94 08       	sbc	r9, r4
     112:	9c 08       	sbc	r9, r12
     114:	a4 08       	sbc	r10, r4
     116:	ae 08       	sbc	r10, r14
     118:	ba 08       	sbc	r11, r10
     11a:	c6 08       	sbc	r12, r6
     11c:	d1 08       	sbc	r13, r1
     11e:	d9 08       	sbc	r13, r9
     120:	e1 08       	sbc	r14, r1
     122:	eb 08       	sbc	r14, r11
     124:	f7 08       	sbc	r15, r7
     126:	03 09       	sbc	r16, r3
     128:	0b 09       	sbc	r16, r11
     12a:	15 09       	sbc	r17, r5
     12c:	1d 09       	sbc	r17, r13
     12e:	29 09       	sbc	r18, r9
     130:	35 09       	sbc	r19, r5
     132:	3c 09       	sbc	r19, r12
     134:	45 09       	sbc	r20, r5
     136:	4c 09       	sbc	r20, r12
     138:	57 09       	sbc	r21, r7
     13a:	62 09       	sbc	r22, r2
     13c:	6a 09       	sbc	r22, r10
     13e:	72 09       	sbc	r23, r2
     140:	7c 09       	sbc	r23, r12
     142:	88 09       	sbc	r24, r8
     144:	90 09       	sbc	r25, r0
     146:	98 09       	sbc	r25, r8
     148:	a2 09       	sbc	r26, r2
     14a:	ae 09       	sbc	r26, r14
     14c:	b8 09       	sbc	r27, r8
     14e:	c0 09       	sbc	r28, r0

00000150 <__ctors_end>:
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf ef       	ldi	r28, 0xFF	; 255
     156:	d1 e2       	ldi	r29, 0x21	; 33
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61
     15c:	00 e0       	ldi	r16, 0x00	; 0
     15e:	0c bf       	out	0x3c, r16	; 60

00000160 <__do_copy_data>:
     160:	14 e0       	ldi	r17, 0x04	; 4
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b2 e0       	ldi	r27, 0x02	; 2
     166:	e0 e4       	ldi	r30, 0x40	; 64
     168:	f3 e3       	ldi	r31, 0x33	; 51
     16a:	00 e0       	ldi	r16, 0x00	; 0
     16c:	0b bf       	out	0x3b, r16	; 59
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x14>
     170:	07 90       	elpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a2 38       	cpi	r26, 0x82	; 130
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0x10>

0000017a <__do_clear_bss>:
     17a:	15 e0       	ldi	r17, 0x05	; 5
     17c:	a2 e8       	ldi	r26, 0x82	; 130
     17e:	b4 e0       	ldi	r27, 0x04	; 4
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a7 3b       	cpi	r26, 0xB7	; 183
     186:	b1 07       	cpc	r27, r17
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
     18a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <main>
     18e:	0c 94 9e 19 	jmp	0x333c	; 0x333c <_exit>

00000192 <__bad_interrupt>:
     192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000196 <servo1_pin_config>:
}
 
//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     196:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     198:	2d 9a       	sbi	0x05, 5	; 5
}
     19a:	08 95       	ret

0000019c <timer1_init>:
// actual value: 52.25Hz 
//This TIMER is used in funtioning of servo motor as with the help of timer we can vary the speed of the motor 
//Here we have only used one servo 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     19c:	e1 e8       	ldi	r30, 0x81	; 129
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     1a2:	8c ef       	ldi	r24, 0xFC	; 252
     1a4:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01; //Counter low value to which OCR1xH value is to be compared with
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03; //Output compare Register high value for servo 1
     1ae:	93 e0       	ldi	r25, 0x03	; 3
     1b0:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Output Compare Register low Value For servo 1
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 88 00 	sts	0x0088, r24
 //OCR1BH = 0x03; //Output compare Register high value for servo 2
 //OCR1BL = 0xFF; //Output Compare Register low Value For servo 2
 //OCR1CH = 0x03; //Output compare Register high value for servo 3
 //OCR1CL = 0xFF; //Output Compare Register low Value For servo 3
 ICR1H  = 0x03; 
     1ba:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     1be:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     1c2:	8b ea       	ldi	r24, 0xAB	; 171
     1c4:	80 93 80 00 	sts	0x0080, r24
      For Overriding normal port functionality to OCRnA outputs.
      {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     1c8:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     1cc:	8c e0       	ldi	r24, 0x0C	; 12
     1ce:	80 83       	st	Z, r24
}
     1d0:	08 95       	ret

000001d2 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     1d2:	10 92 89 00 	sts	0x0089, r1
}
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     1d6:	68 2f       	mov	r22, r24
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__floatunsisf>
     1e2:	2b e7       	ldi	r18, 0x7B	; 123
     1e4:	34 e1       	ldi	r19, 0x14	; 20
     1e6:	4e ee       	ldi	r20, 0xEE	; 238
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__divsf3>
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	4c e0       	ldi	r20, 0x0C	; 12
     1f4:	52 e4       	ldi	r21, 0x42	; 66
     1f6:	0e 94 04 18 	call	0x3008	; 0x3008 <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
     1fa:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__fixunssfsi>
     1fe:	60 93 88 00 	sts	0x0088, r22
}
     202:	08 95       	ret

00000204 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.
void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	80 93 88 00 	sts	0x0088, r24
}
     210:	08 95       	ret

00000212 <uart_tx>:
 * Example Call:  uart_tx(data) 
*/ 
  
void uart_tx(char data)
{
 while(!(UCSR0A & TE));                        //waiting to transmit
     212:	e0 ec       	ldi	r30, 0xC0	; 192
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	90 81       	ld	r25, Z
     218:	95 ff       	sbrs	r25, 5
     21a:	fd cf       	rjmp	.-6      	; 0x216 <uart_tx+0x4>
 UDR0 = data;
     21c:	80 93 c6 00 	sts	0x00C6, r24
}
     220:	08 95       	ret

00000222 <__vector_25>:
 * Logic:         It is a USART0 receive complete interrupt.This Interrupt is executed whenever there is a value recieved and that value will be given to 
 *                the data variable.      
 * Example Call:  This function is called internally whenever there is an interrupt, ISR(USART0_RX_vect). 
*/
ISR(USART0_RX_vect)              // This function is called internally whenever there is an interrupt.
{
     222:	1f 92       	push	r1
     224:	0f 92       	push	r0
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	0f 92       	push	r0
     22a:	11 24       	eor	r1, r1
     22c:	8f 93       	push	r24
 data = UDR0;
     22e:	80 91 c6 00 	lds	r24, 0x00C6
     232:	80 93 96 05 	sts	0x0596, r24
}
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	0f 90       	pop	r0
     23e:	1f 90       	pop	r1
     240:	18 95       	reti

00000242 <uart_rx>:
 *                buffer is empty . Demo: UCSR0A (10000000) & RE (10000000) != 0 ie. 1 value so , while(!1) = while(0) , so loop ends and UDR0 is returned to 'main' function.      
 * Example Call:  uart_rx() 
*/ 
char uart_rx()
{
 while(!(UCSR0A & RE));                        //Waiting to receive , this loop will end when 5th bit of UCSR0A = 1 and then value stored in UDR0 is returned.
     242:	e0 ec       	ldi	r30, 0xC0	; 192
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	88 23       	and	r24, r24
     24a:	ec f7       	brge	.-6      	; 0x246 <uart_rx+0x4>
 return UDR0;
     24c:	80 91 c6 00 	lds	r24, 0x00C6
}
     250:	08 95       	ret

00000252 <uart0_init>:
 * Logic:         It initializes the registers for communication.
 * Example Call:  uart0_init()  
*/
void uart0_init()
{
 UCSR0B = 0x00;                            //disable while setting baud rate
     252:	e1 ec       	ldi	r30, 0xC1	; 193
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     258:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F;                             //9600BPS at 14745600Hz
     262:	8f e5       	ldi	r24, 0x5F	; 95
     264:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00;
     268:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
     26c:	88 e9       	ldi	r24, 0x98	; 152
     26e:	80 83       	st	Z, r24
 //UCSR0C = 3<<1;                            //setting 8-bit character and 1 stop bit
 //UCSR0B = RX | TX;
}
     270:	08 95       	ret

00000272 <buzzer_pin_config>:
 * Logic:         Initializes the direction of pins to be used as(input or output) and giving the initial value to the port pins.      
 * Example Call:  buzzer_pin_config () 
*/
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;  //Setting PORTC 3 as output
     272:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;  //Setting PORTC 3 logic low to turnoff buzzer
     274:	43 98       	cbi	0x08, 3	; 8
}
     276:	08 95       	ret

00000278 <buzzer_on>:
 * Example Call:  buzzer_on () 
*/
void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     278:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     27a:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     27c:	88 b9       	out	0x08, r24	; 8
}
     27e:	08 95       	ret

00000280 <buzzer_off>:
 * Example Call:  buzzer_off () 
*/
void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     280:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     282:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     284:	88 b9       	out	0x08, r24	; 8
}
     286:	08 95       	ret

00000288 <adc_pin_config>:
 * Logic:         Initializes the direction of pins to be used as(input or output) and giving the initial value to the port pins.      
 * Example Call:  adc_pin_config () 
*/
void adc_pin_config (void)
{
 DDRF = 0x00;
     288:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     28a:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     28c:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     290:	10 92 08 01 	sts	0x0108, r1
}
     294:	08 95       	ret

00000296 <adc_init>:
//initializes the ADC registers for its operation
void adc_init()
{
 ADCSRA = 0x00;
     296:	ea e7       	ldi	r30, 0x7A	; 122
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	10 82       	st	Z, r1
 ADCSRB = 0x00;  //MUX5 = 0
     29c:	10 92 7b 00 	sts	0x007B, r1
 ADMUX = 0x20;  //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     2a0:	80 e2       	ldi	r24, 0x20	; 32
     2a2:	80 93 7c 00 	sts	0x007C, r24
 ACSR = 0x80;
     2a6:	80 e8       	ldi	r24, 0x80	; 128
     2a8:	80 bf       	out	0x30, r24	; 48
 ADCSRA = 0x86;  //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     2aa:	86 e8       	ldi	r24, 0x86	; 134
     2ac:	80 83       	st	Z, r24
}
     2ae:	08 95       	ret

000002b0 <ADC_Conversion>:
//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 if(Ch>7)
     2b0:	88 30       	cpi	r24, 0x08	; 8
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <ADC_Conversion+0xa>
 {
  ADCSRB = 0x08;
     2b4:	98 e0       	ldi	r25, 0x08	; 8
     2b6:	90 93 7b 00 	sts	0x007B, r25
 }
 Ch = Ch & 0x07;
     2ba:	87 70       	andi	r24, 0x07	; 7
 ADMUX= 0x20| Ch;
     2bc:	80 62       	ori	r24, 0x20	; 32
     2be:	80 93 7c 00 	sts	0x007C, r24
 ADCSRA = ADCSRA | 0x40;  //Set start conversion bit
     2c2:	ea e7       	ldi	r30, 0x7A	; 122
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 64       	ori	r24, 0x40	; 64
     2ca:	80 83       	st	Z, r24
 while((ADCSRA&0x10)==0); //Wait for conversion to complete
     2cc:	80 81       	ld	r24, Z
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <ADC_Conversion+0x1c>
 a=ADCH;
     2d2:	80 91 79 00 	lds	r24, 0x0079
 ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     2d6:	ea e7       	ldi	r30, 0x7A	; 122
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	90 81       	ld	r25, Z
     2dc:	90 61       	ori	r25, 0x10	; 16
     2de:	90 83       	st	Z, r25
 ADCSRB = 0x00;
     2e0:	10 92 7b 00 	sts	0x007B, r1
 return a;
}
     2e4:	08 95       	ret

000002e6 <timer5_init>:
 *      the interrupt.       
 * Example Call:  timer5_init() 
*/
void timer5_init()
{
 TCCR5B = 0x00;     //Stop
     2e6:	e1 e2       	ldi	r30, 0x21	; 33
     2e8:	f1 e0       	ldi	r31, 0x01	; 1
     2ea:	10 82       	st	Z, r1
 TCNT5H = 0xFF;     //Counter higher 8-bit value to which OCR5xH value is compared with
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	80 93 25 01 	sts	0x0125, r24
 TCNT5L = 0x01;     //Counter lower 8-bit value to which OCR5xH value is compared with
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	90 93 24 01 	sts	0x0124, r25
 OCR5AH = 0x00;     //Output compare register high value for Left Motor
     2f8:	10 92 29 01 	sts	0x0129, r1
 OCR5AL = 0xFF;     //Output compare register low value for Left Motor
     2fc:	80 93 28 01 	sts	0x0128, r24
 OCR5BH = 0x00;     //Output compare register high value for Right Motor
     300:	10 92 2b 01 	sts	0x012B, r1
 OCR5BL = 0xFF;     //Output compare register low value for Right Motor
     304:	80 93 2a 01 	sts	0x012A, r24
 TCCR5A = 0xA9;     /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     308:	89 ea       	ldi	r24, 0xA9	; 169
     30a:	80 93 20 01 	sts	0x0120, r24
          For Overriding normal port functionality to OCRnA outputs.
           {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
 
 TCCR5B = 0x0B;     //WGM52=1; CS52=0, CS51=1, CS50=1 (Prescaler=64)
     30e:	8b e0       	ldi	r24, 0x0B	; 11
     310:	80 83       	st	Z, r24
}
     312:	08 95       	ret

00000314 <velocity>:
 *                value and hence gives less speed.
 * Example Call:  velocity (255, 255)
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR5AL = left_motor;
     314:	80 93 28 01 	sts	0x0128, r24
 OCR5BL = right_motor;
     318:	60 93 2a 01 	sts	0x012A, r22
}
     31c:	08 95       	ret

0000031e <magnet_pin_config>:
 * Logic:         Initializes the direction of pins to be used as(input or output) and giving the initial value to the port pins.      
 * Example Call:  magnet_pin_config() 
*/
void magnet_pin_config()
{
 DDRH = 0x01;    //Setting PH0 pin as output for magnet operation.
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 01 01 	sts	0x0101, r24
 PORTH = 0x00;    //Initially giving 0 to the pins so that magnet discharged initially.
     324:	10 92 02 01 	sts	0x0102, r1
}
     328:	08 95       	ret

0000032a <motor_pin_config>:
 * Logic:         Initializes the direction of pins to be used as(input or output) and giving the initial value to the port pins.      
 * Example Call:  motor_pin_config() 
*/
void motor_pin_config()
{
 DDRA = 0x0F;     //Setting PA0, PA1, PA2, PA3 pins as output for direction control of motor
     32a:	8f e0       	ldi	r24, 0x0F	; 15
     32c:	81 b9       	out	0x01, r24	; 1
 PORTA = 0x00;     //Initially all pins are given logic 0. Hence both motors are at rest.
     32e:	12 b8       	out	0x02, r1	; 2
 DDRL = 0x18;     //Setting PL3 and PL4 pins as output for PWM generation
     330:	88 e1       	ldi	r24, 0x18	; 24
     332:	80 93 0a 01 	sts	0x010A, r24
 PORTL = 0x18;        //PL3 and PL4 pins are for velocity control using PWM.
     336:	80 93 0b 01 	sts	0x010B, r24
}
     33a:	08 95       	ret

0000033c <magnet_on>:
 * Logic:         Magnet gets charged as current flows through it by giving HIGH logic to pin it is connected.      
 * Example Call:  magnet_on() 
*/
void magnet_on()
{
 PORTH = 0x01;    //Magnet charged as logic 1 is given to the pin where magnet is connected.
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 02 01 	sts	0x0102, r24
}
     342:	08 95       	ret

00000344 <magnet_off>:
 * Logic:         Magnet gets discharged as current does not flows through it by giving LOW logic to pin it is connected.      
 * Example Call:  magnet_off() 
*/
void magnet_off()
{
 PORTH = 0x00;    //Magnet discharged as logic 0 is given to the pin where magnet is connected.
     344:	10 92 02 01 	sts	0x0102, r1
}
     348:	08 95       	ret

0000034a <forward>:
 * Logic:         Logic HIGH is given to PA2 pin to move the left motor forward and logic HIGH is given to pin PA1 to move right motor forward.      
 * Example Call:  forward() 
*/
void forward()    //both wheels forward
{
 PORTA = 0x06;
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	82 b9       	out	0x02, r24	; 2
}
     34e:	08 95       	ret

00000350 <backward>:
 * Logic:         Logic HIGH is given to PA3 pin to move the left motor backward and logic HIGH is given to pin PA0 to move right motor backward.      
 * Example Call:  backward()
*/
void backward()   //both wheels backward
{
 PORTA = 0x09;
     350:	89 e0       	ldi	r24, 0x09	; 9
     352:	82 b9       	out	0x02, r24	; 2
}
     354:	08 95       	ret

00000356 <left>:
 * Logic:         Logic HIGH is given to PA3 pin to move the left motor backward and logic HIGH is given to pin PA1 to move right motor forward.      
 * Example Call:  left() 
*/
void left()       //Right wheel forward, Left wheel backward
{
 PORTA = 0x05;
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	82 b9       	out	0x02, r24	; 2
}
     35a:	08 95       	ret

0000035c <right>:
 * Logic:         Logic HIGH is given to PA2 pin to move the left motor forward and logic HIGH is given to pin PA0 to move right motor backward.      
 * Example Call:  right() 
*/
void right()          //Left wheel forward, Right wheel backward
{
 PORTA = 0x0A;
     35c:	8a e0       	ldi	r24, 0x0A	; 10
     35e:	82 b9       	out	0x02, r24	; 2
}
     360:	08 95       	ret

00000362 <stop>:
 * Logic:         The potential difference to the motor pins has been made 0 as all the pins of port A has been made 0.Hence the motor stops.       
 * Example Call:  stop() 
*/ 
void stop()           //stop
{
 PORTA = 0x00;    
     362:	12 b8       	out	0x02, r1	; 2
}
     364:	08 95       	ret

00000366 <left_encoder_pin_config>:
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     366:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     368:	74 9a       	sbi	0x0e, 4	; 14
}
     36a:	08 95       	ret

0000036c <right_encoder_pin_config>:
//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     36c:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     36e:	75 9a       	sbi	0x0e, 5	; 14
}
     370:	08 95       	ret

00000372 <left_position_encoder_interrupt_init>:
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     372:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     374:	ea e6       	ldi	r30, 0x6A	; 106
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	82 60       	ori	r24, 0x02	; 2
     37c:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     37e:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt
     380:	78 94       	sei
}
     382:	08 95       	ret

00000384 <right_position_encoder_interrupt_init>:
void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     384:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     386:	ea e6       	ldi	r30, 0x6A	; 106
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	88 60       	ori	r24, 0x08	; 8
     38e:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     390:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt
     392:	78 94       	sei
}
     394:	08 95       	ret

00000396 <__vector_6>:
//ISR for right position encoder
ISR(INT5_vect)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	af 93       	push	r26
     3a6:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     3a8:	80 91 dc 04 	lds	r24, 0x04DC
     3ac:	90 91 dd 04 	lds	r25, 0x04DD
     3b0:	a0 91 de 04 	lds	r26, 0x04DE
     3b4:	b0 91 df 04 	lds	r27, 0x04DF
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	a1 1d       	adc	r26, r1
     3bc:	b1 1d       	adc	r27, r1
     3be:	80 93 dc 04 	sts	0x04DC, r24
     3c2:	90 93 dd 04 	sts	0x04DD, r25
     3c6:	a0 93 de 04 	sts	0x04DE, r26
     3ca:	b0 93 df 04 	sts	0x04DF, r27
}
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_5>:
//ISR for left position encoder
ISR(INT4_vect)
{
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	8f 93       	push	r24
     3ec:	9f 93       	push	r25
     3ee:	af 93       	push	r26
     3f0:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     3f2:	80 91 e0 04 	lds	r24, 0x04E0
     3f6:	90 91 e1 04 	lds	r25, 0x04E1
     3fa:	a0 91 e2 04 	lds	r26, 0x04E2
     3fe:	b0 91 e3 04 	lds	r27, 0x04E3
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	a1 1d       	adc	r26, r1
     406:	b1 1d       	adc	r27, r1
     408:	80 93 e0 04 	sts	0x04E0, r24
     40c:	90 93 e1 04 	sts	0x04E1, r25
     410:	a0 93 e2 04 	sts	0x04E2, r26
     414:	b0 93 e3 04 	sts	0x04E3, r27
}
     418:	bf 91       	pop	r27
     41a:	af 91       	pop	r26
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <angle_rotate>:
*/
int angle_rotate(unsigned int Degrees)
{
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;
 ReqdShaftCount = (float) Degrees/ 0.3; // division by resolution to get shaft count
     42a:	bc 01       	movw	r22, r24
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__floatunsisf>
     434:	2a e9       	ldi	r18, 0x9A	; 154
     436:	39 e9       	ldi	r19, 0x99	; 153
     438:	49 e9       	ldi	r20, 0x99	; 153
     43a:	5e e3       	ldi	r21, 0x3E	; 62
     43c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__divsf3>
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     440:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__fixunssfsi>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b0 e0       	ldi	r27, 0x00	; 0
 ShaftCountRight = 0;
     44c:	10 92 dc 04 	sts	0x04DC, r1
     450:	10 92 dd 04 	sts	0x04DD, r1
     454:	10 92 de 04 	sts	0x04DE, r1
     458:	10 92 df 04 	sts	0x04DF, r1
 ShaftCountLeft = 0;
     45c:	10 92 e0 04 	sts	0x04E0, r1
     460:	10 92 e1 04 	sts	0x04E1, r1
     464:	10 92 e2 04 	sts	0x04E2, r1
     468:	10 92 e3 04 	sts	0x04E3, r1
 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))
     46c:	40 91 dc 04 	lds	r20, 0x04DC
     470:	50 91 dd 04 	lds	r21, 0x04DD
     474:	60 91 de 04 	lds	r22, 0x04DE
     478:	70 91 df 04 	lds	r23, 0x04DF
     47c:	48 17       	cp	r20, r24
     47e:	59 07       	cpc	r21, r25
     480:	6a 07       	cpc	r22, r26
     482:	7b 07       	cpc	r23, r27
     484:	68 f4       	brcc	.+26     	; 0x4a0 <angle_rotate+0x76>
     486:	40 91 e0 04 	lds	r20, 0x04E0
     48a:	50 91 e1 04 	lds	r21, 0x04E1
     48e:	60 91 e2 04 	lds	r22, 0x04E2
     492:	70 91 e3 04 	lds	r23, 0x04E3
     496:	48 17       	cp	r20, r24
     498:	59 07       	cpc	r21, r25
     49a:	6a 07       	cpc	r22, r26
     49c:	7b 07       	cpc	r23, r27
     49e:	30 f3       	brcs	.-52     	; 0x46c <angle_rotate+0x42>
  {
         break;
   }
 }
 stop(); //Stop robot
     4a0:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
 return 0;
}
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	08 95       	ret

000004aa <left_degrees>:
void left_degrees(unsigned int Degrees)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
 left(); //Turn left
     4b0:	0e 94 ab 01 	call	0x356	; 0x356 <left>
 angle_rotate(Degrees);
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 15 02 	call	0x42a	; 0x42a <angle_rotate>
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <right_degrees>:
int right_degrees(unsigned int Degrees)
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
 right(); //Turn right
     4c6:	0e 94 ae 01 	call	0x35c	; 0x35c <right>
 angle_rotate(Degrees);
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 15 02 	call	0x42a	; 0x42a <angle_rotate>
 return 0;
}
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <linear_distance_mm>:
*/
void linear_distance_mm(unsigned int DistanceInMM)
{
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;
 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     4da:	bc 01       	movw	r22, r24
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__floatunsisf>
     4e4:	25 ee       	ldi	r18, 0xE5	; 229
     4e6:	30 ed       	ldi	r19, 0xD0	; 208
     4e8:	4a ea       	ldi	r20, 0xAA	; 170
     4ea:	50 e4       	ldi	r21, 0x40	; 64
     4ec:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__divsf3>
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     4f0:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__fixunssfsi>
     4f4:	46 2f       	mov	r20, r22
     4f6:	57 2f       	mov	r21, r23
     4f8:	68 2f       	mov	r22, r24
     4fa:	79 2f       	mov	r23, r25
 ShaftCountRight = 0;
     4fc:	10 92 dc 04 	sts	0x04DC, r1
     500:	10 92 dd 04 	sts	0x04DD, r1
     504:	10 92 de 04 	sts	0x04DE, r1
     508:	10 92 df 04 	sts	0x04DF, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
     50c:	80 91 dc 04 	lds	r24, 0x04DC
     510:	90 91 dd 04 	lds	r25, 0x04DD
     514:	a0 91 de 04 	lds	r26, 0x04DE
     518:	b0 91 df 04 	lds	r27, 0x04DF
     51c:	48 17       	cp	r20, r24
     51e:	59 07       	cpc	r21, r25
     520:	6a 07       	cpc	r22, r26
     522:	7b 07       	cpc	r23, r27
     524:	98 f7       	brcc	.-26     	; 0x50c <linear_distance_mm+0x32>
  {
   break;
  }
 }
 stop();  
     526:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
}
     52a:	08 95       	ret

0000052c <forward_mm>:
Logic:  This function takes the distance in millimeters and then call the linear_distance_mm(DistanceInMM) and move the bot in forward direction with specified velocity
        Every time it calls the linear_distance_mm(DistanceInMM) to check the condition to stop.
Example call: forward_mm(80);
*/
void forward_mm(unsigned int DistanceInMM)
{
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
 velocity(150,153.7);
     532:	86 e9       	ldi	r24, 0x96	; 150
     534:	69 e9       	ldi	r22, 0x99	; 153
     536:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
 forward();
     53a:	0e 94 a5 01 	call	0x34a	; 0x34a <forward>
 linear_distance_mm(DistanceInMM);
     53e:	ce 01       	movw	r24, r28
     540:	0e 94 6d 02 	call	0x4da	; 0x4da <linear_distance_mm>
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <back_mm>:
Logic:  This function takes the distance in millimeters and then call the linear_distance_mm(DistanceInMM) and move the bot in backward direction with specified velocity
        Every time it calls the linear_distance_mm(DistanceInMM) to check the condition to stop.
Example call: back_mm(back_value);
*/
void back_mm(unsigned int DistanceInMM)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ec 01       	movw	r28, r24
 velocity(150,153.7);
     550:	86 e9       	ldi	r24, 0x96	; 150
     552:	69 e9       	ldi	r22, 0x99	; 153
     554:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
 backward();
     558:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
 linear_distance_mm(DistanceInMM);
     55c:	ce 01       	movw	r24, r28
     55e:	0e 94 6d 02 	call	0x4da	; 0x4da <linear_distance_mm>
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <follow>:
          it will move left to shift to the line.          
Example call: follow();
*/
void follow(void)
{ 
 if(Center_white_line>0x64 && Left_white_line<0x64 && Right_white_line<0x64)//WBW
     568:	80 91 e5 04 	lds	r24, 0x04E5
     56c:	85 36       	cpi	r24, 0x65	; 101
     56e:	70 f0       	brcs	.+28     	; 0x58c <follow+0x24>
     570:	80 91 e6 04 	lds	r24, 0x04E6
     574:	84 36       	cpi	r24, 0x64	; 100
     576:	50 f4       	brcc	.+20     	; 0x58c <follow+0x24>
     578:	80 91 e4 04 	lds	r24, 0x04E4
     57c:	84 36       	cpi	r24, 0x64	; 100
     57e:	30 f4       	brcc	.+12     	; 0x58c <follow+0x24>
 {
     velocity(130,117.53);               // 130,117.53
     580:	82 e8       	ldi	r24, 0x82	; 130
     582:	65 e7       	ldi	r22, 0x75	; 117
     584:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
     forward();
     588:	0e 94 a5 01 	call	0x34a	; 0x34a <forward>
 }
 
 if(Center_white_line<0x64 && Left_white_line<0x64 && Right_white_line>0x64)//WWB
     58c:	80 91 e5 04 	lds	r24, 0x04E5
     590:	84 36       	cpi	r24, 0x64	; 100
     592:	c0 f4       	brcc	.+48     	; 0x5c4 <follow+0x5c>
     594:	80 91 e6 04 	lds	r24, 0x04E6
     598:	84 36       	cpi	r24, 0x64	; 100
     59a:	50 f4       	brcc	.+20     	; 0x5b0 <follow+0x48>
     59c:	80 91 e4 04 	lds	r24, 0x04E4
     5a0:	85 36       	cpi	r24, 0x65	; 101
     5a2:	30 f0       	brcs	.+12     	; 0x5b0 <follow+0x48>
 {
     right();
     5a4:	0e 94 ae 01 	call	0x35c	; 0x35c <right>
 }
 
 if(Center_white_line<0x64 && Left_white_line>0x64 && Right_white_line<0x64)//BWW
     5a8:	80 91 e5 04 	lds	r24, 0x04E5
     5ac:	84 36       	cpi	r24, 0x64	; 100
     5ae:	50 f4       	brcc	.+20     	; 0x5c4 <follow+0x5c>
     5b0:	80 91 e6 04 	lds	r24, 0x04E6
     5b4:	85 36       	cpi	r24, 0x65	; 101
     5b6:	30 f0       	brcs	.+12     	; 0x5c4 <follow+0x5c>
     5b8:	80 91 e4 04 	lds	r24, 0x04E4
     5bc:	84 36       	cpi	r24, 0x64	; 100
     5be:	10 f4       	brcc	.+4      	; 0x5c4 <follow+0x5c>
 {
     left();
     5c0:	0e 94 ab 01 	call	0x356	; 0x356 <left>
     5c4:	08 95       	ret

000005c6 <init_devices>:
 }
}
void init_devices (void)          //function to initialize all devices
{
 cli();
     5c6:	f8 94       	cli
 magnet_pin_config();
     5c8:	0e 94 8f 01 	call	0x31e	; 0x31e <magnet_pin_config>
 servo1_pin_config();
     5cc:	0e 94 cb 00 	call	0x196	; 0x196 <servo1_pin_config>
 uart0_init();
     5d0:	0e 94 29 01 	call	0x252	; 0x252 <uart0_init>
 buzzer_pin_config ();
     5d4:	0e 94 39 01 	call	0x272	; 0x272 <buzzer_pin_config>
 adc_pin_config ();  
     5d8:	0e 94 44 01 	call	0x288	; 0x288 <adc_pin_config>
 timer1_init();                    //disable all interrupts
     5dc:	0e 94 ce 00 	call	0x19c	; 0x19c <timer1_init>
 timer5_init();
     5e0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <timer5_init>
 adc_init();
     5e4:	0e 94 4b 01 	call	0x296	; 0x296 <adc_init>
 left_encoder_pin_config();
     5e8:	0e 94 b3 01 	call	0x366	; 0x366 <left_encoder_pin_config>
 right_encoder_pin_config();
     5ec:	0e 94 b6 01 	call	0x36c	; 0x36c <right_encoder_pin_config>
 left_position_encoder_interrupt_init ();
     5f0:	0e 94 b9 01 	call	0x372	; 0x372 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init ();
     5f4:	0e 94 c2 01 	call	0x384	; 0x384 <right_position_encoder_interrupt_init>
 sei();                                  //re-enable interrupts
     5f8:	78 94       	sei
}
     5fa:	08 95       	ret

000005fc <decode_into_index>:
 * Logic:         This function searches and compares the concatenated string from every string in "decode_base_array[57][7]" and returns the index of the string found.
 *                In the 'update_destination' function this index is used to get vertex numbers of the two vertices pointed by the concatenated string.
 *                Eg. If concatenated string is "16-1-1" , it returns 18 (index of "16-1-1" is 18 in "decode_base_array[57][7]").      
 * Example Call: decode_into_index(pebble_cell) 
*/ 
int decode_into_index(char AR_cell[7]){
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	7c 01       	movw	r14, r24
for(int i = 0; i < 57; i++){
    if(strcmp(decode_base_array[i],AR_cell) == 0){
        return i;                                        // returning the index of the concatenated string 
    }
  }
  return 0;
     60a:	0c ee       	ldi	r16, 0xEC	; 236
     60c:	12 e0       	ldi	r17, 0x02	; 2
 *                In the 'update_destination' function this index is used to get vertex numbers of the two vertices pointed by the concatenated string.
 *                Eg. If concatenated string is "16-1-1" , it returns 18 (index of "16-1-1" is 18 in "decode_base_array[57][7]").      
 * Example Call: decode_into_index(pebble_cell) 
*/ 
int decode_into_index(char AR_cell[7]){
for(int i = 0; i < 57; i++){
     60e:	c0 e0       	ldi	r28, 0x00	; 0
     610:	d0 e0       	ldi	r29, 0x00	; 0
    if(strcmp(decode_base_array[i],AR_cell) == 0){
     612:	c8 01       	movw	r24, r16
     614:	b7 01       	movw	r22, r14
     616:	0e 94 95 19 	call	0x332a	; 0x332a <strcmp>
     61a:	28 2f       	mov	r18, r24
     61c:	39 2f       	mov	r19, r25
     61e:	21 15       	cp	r18, r1
     620:	31 05       	cpc	r19, r1
     622:	41 f0       	breq	.+16     	; 0x634 <decode_into_index+0x38>
 *                In the 'update_destination' function this index is used to get vertex numbers of the two vertices pointed by the concatenated string.
 *                Eg. If concatenated string is "16-1-1" , it returns 18 (index of "16-1-1" is 18 in "decode_base_array[57][7]").      
 * Example Call: decode_into_index(pebble_cell) 
*/ 
int decode_into_index(char AR_cell[7]){
for(int i = 0; i < 57; i++){
     624:	21 96       	adiw	r28, 0x01	; 1
     626:	09 5f       	subi	r16, 0xF9	; 249
     628:	1f 4f       	sbci	r17, 0xFF	; 255
     62a:	c9 33       	cpi	r28, 0x39	; 57
     62c:	d1 05       	cpc	r29, r1
     62e:	89 f7       	brne	.-30     	; 0x612 <decode_into_index+0x16>
    if(strcmp(decode_base_array[i],AR_cell) == 0){
        return i;                                        // returning the index of the concatenated string 
    }
  }
  return 0;
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	d0 e0       	ldi	r29, 0x00	; 0
}
     634:	8c 2f       	mov	r24, r28
     636:	9d 2f       	mov	r25, r29
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	08 95       	ret

00000646 <assign_two_vertices>:
 *           when, decode_index_identifier == 3 then pebble_3_vertex_1 and pebble_3_vertex_2
 * Example Call: assign_two_vertices(decode_index_of_pitcher,0);
*/ 
 
int assign_two_vertices(int decode_index,int decode_index_identifier){
    if(decode_index_identifier == 0){                         // pitcher case
     646:	61 15       	cp	r22, r1
     648:	71 05       	cpc	r23, r1
     64a:	a1 f4       	brne	.+40     	; 0x674 <assign_two_vertices+0x2e>
        pitcher_vertex_1 = vertices_array[decode_index][0];
     64c:	fc 01       	movw	r30, r24
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	e8 5f       	subi	r30, 0xF8	; 248
     658:	fd 4f       	sbci	r31, 0xFD	; 253
     65a:	80 81       	ld	r24, Z
     65c:	91 81       	ldd	r25, Z+1	; 0x01
     65e:	90 93 8f 05 	sts	0x058F, r25
     662:	80 93 8e 05 	sts	0x058E, r24
        pitcher_vertex_2 = vertices_array[decode_index][1];
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	93 81       	ldd	r25, Z+3	; 0x03
     66a:	90 93 a0 05 	sts	0x05A0, r25
     66e:	80 93 9f 05 	sts	0x059F, r24
     672:	44 c0       	rjmp	.+136    	; 0x6fc <assign_two_vertices+0xb6>
    } 
    else if(decode_index_identifier == 1){                  //pebble 1 case
     674:	61 30       	cpi	r22, 0x01	; 1
     676:	71 05       	cpc	r23, r1
     678:	a1 f4       	brne	.+40     	; 0x6a2 <assign_two_vertices+0x5c>
    pebble_1_vertex_1 = vertices_array[decode_index][0];
     67a:	fc 01       	movw	r30, r24
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e8 5f       	subi	r30, 0xF8	; 248
     686:	fd 4f       	sbci	r31, 0xFD	; 253
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	90 93 b4 05 	sts	0x05B4, r25
     690:	80 93 b3 05 	sts	0x05B3, r24
    pebble_1_vertex_2 = vertices_array[decode_index][1];
     694:	82 81       	ldd	r24, Z+2	; 0x02
     696:	93 81       	ldd	r25, Z+3	; 0x03
     698:	90 93 98 05 	sts	0x0598, r25
     69c:	80 93 97 05 	sts	0x0597, r24
     6a0:	2d c0       	rjmp	.+90     	; 0x6fc <assign_two_vertices+0xb6>
    } 
    else if(decode_index_identifier == 2){                 //pebble 2 case
     6a2:	62 30       	cpi	r22, 0x02	; 2
     6a4:	71 05       	cpc	r23, r1
     6a6:	a1 f4       	brne	.+40     	; 0x6d0 <assign_two_vertices+0x8a>
    pebble_2_vertex_1 = vertices_array[decode_index][0];
     6a8:	fc 01       	movw	r30, r24
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e8 5f       	subi	r30, 0xF8	; 248
     6b4:	fd 4f       	sbci	r31, 0xFD	; 253
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	90 93 9e 05 	sts	0x059E, r25
     6be:	80 93 9d 05 	sts	0x059D, r24
    pebble_2_vertex_2 = vertices_array[decode_index][1];
     6c2:	82 81       	ldd	r24, Z+2	; 0x02
     6c4:	93 81       	ldd	r25, Z+3	; 0x03
     6c6:	90 93 8d 05 	sts	0x058D, r25
     6ca:	80 93 8c 05 	sts	0x058C, r24
     6ce:	16 c0       	rjmp	.+44     	; 0x6fc <assign_two_vertices+0xb6>
    }
    else if(decode_index_identifier == 3){                 //pebble 3 case
     6d0:	63 30       	cpi	r22, 0x03	; 3
     6d2:	71 05       	cpc	r23, r1
     6d4:	99 f4       	brne	.+38     	; 0x6fc <assign_two_vertices+0xb6>
    pebble_3_vertex_1 = vertices_array[decode_index][0];
     6d6:	fc 01       	movw	r30, r24
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	e8 5f       	subi	r30, 0xF8	; 248
     6e2:	fd 4f       	sbci	r31, 0xFD	; 253
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	90 93 92 05 	sts	0x0592, r25
     6ec:	80 93 91 05 	sts	0x0591, r24
    pebble_3_vertex_2 = vertices_array[decode_index][1];
     6f0:	82 81       	ldd	r24, Z+2	; 0x02
     6f2:	93 81       	ldd	r25, Z+3	; 0x03
     6f4:	90 93 95 05 	sts	0x0595, r25
     6f8:	80 93 94 05 	sts	0x0594, r24
    }
    else{
    // Error : Error in ' decode_index_identifier 'value         
    }
        return 0;
}
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <initialize_start_locations>:
 *                to 'vertex number' :  1 or 52.           
 * Example Call: initialize_start_locations() 
*/
int initialize_start_locations()
{
 if(strcmp(robot_start , "START-1") == 0){
     702:	80 ed       	ldi	r24, 0xD0	; 208
     704:	94 e0       	ldi	r25, 0x04	; 4
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	72 e0       	ldi	r23, 0x02	; 2
     70a:	0e 94 95 19 	call	0x332a	; 0x332a <strcmp>
     70e:	28 2f       	mov	r18, r24
     710:	39 2f       	mov	r19, r25
     712:	21 15       	cp	r18, r1
     714:	31 05       	cpc	r19, r1
     716:	39 f4       	brne	.+14     	; 0x726 <initialize_start_locations+0x24>
      current_location = 1;                             // START-1 ('vertex number' = 1)
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	90 93 9c 05 	sts	0x059C, r25
     720:	80 93 9b 05 	sts	0x059B, r24
     724:	06 c0       	rjmp	.+12     	; 0x732 <initialize_start_locations+0x30>
   }
   else{
    current_location = 52;                            // START-2 ('vertex number' = 52)
     726:	84 e3       	ldi	r24, 0x34	; 52
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	90 93 9c 05 	sts	0x059C, r25
     72e:	80 93 9b 05 	sts	0x059B, r24
   }
 return 0;
}
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	08 95       	ret

00000738 <minDistance>:
 * Logic:         It first assigns min as a sentinel by assigning a maximum value INT_MAX . After that a loop is used to traverse all vertices and checks that distance of node is less than equal to min
 *                and sptSet[] for that index/vertex is 0 then min is assigned distance from the current location and min_index is assigned the index at that moment.
 * Example Call:  minDistance(dist, sptSet) 
*/
int minDistance(int dist[],int sptSet[]) 
{ 
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
 int min = INT_MAX, min_index; 
 for (int v = 0; v < V; v++) 
 if ((sptSet[v] == 0) && (dist[v] <= min)) 
 {min = dist[v], min_index = v;} 
     73c:	a6 2f       	mov	r26, r22
     73e:	b7 2f       	mov	r27, r23
     740:	e8 2f       	mov	r30, r24
     742:	f9 2f       	mov	r31, r25
 * Example Call:  minDistance(dist, sptSet) 
*/
int minDistance(int dist[],int sptSet[]) 
{ 
 int min = INT_MAX, min_index; 
 for (int v = 0; v < V; v++) 
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
 *                and sptSet[] for that index/vertex is 0 then min is assigned distance from the current location and min_index is assigned the index at that moment.
 * Example Call:  minDistance(dist, sptSet) 
*/
int minDistance(int dist[],int sptSet[]) 
{ 
 int min = INT_MAX, min_index; 
     748:	4f ef       	ldi	r20, 0xFF	; 255
     74a:	5f e7       	ldi	r21, 0x7F	; 127
 for (int v = 0; v < V; v++) 
 if ((sptSet[v] == 0) && (dist[v] <= min)) 
     74c:	8d 91       	ld	r24, X+
     74e:	9d 91       	ld	r25, X+
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	41 f4       	brne	.+16     	; 0x764 <minDistance+0x2c>
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	48 17       	cp	r20, r24
     75a:	59 07       	cpc	r21, r25
     75c:	1c f0       	brlt	.+6      	; 0x764 <minDistance+0x2c>
     75e:	c2 2f       	mov	r28, r18
     760:	d3 2f       	mov	r29, r19
 {min = dist[v], min_index = v;} 
     762:	ac 01       	movw	r20, r24
 * Example Call:  minDistance(dist, sptSet) 
*/
int minDistance(int dist[],int sptSet[]) 
{ 
 int min = INT_MAX, min_index; 
 for (int v = 0; v < V; v++) 
     764:	2f 5f       	subi	r18, 0xFF	; 255
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	32 96       	adiw	r30, 0x02	; 2
     76a:	26 33       	cpi	r18, 0x36	; 54
     76c:	31 05       	cpc	r19, r1
     76e:	71 f7       	brne	.-36     	; 0x74c <minDistance+0x14>
 if ((sptSet[v] == 0) && (dist[v] <= min)) 
 {min = dist[v], min_index = v;} 
 
 return min_index; 
}
     770:	8c 2f       	mov	r24, r28
     772:	9d 2f       	mov	r25, r29
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <printPath>:
 *                After that vertex_path_array[] is filled with the values of j that is extracted using parent array.  
 * Example Call:  printPath(parent, i, case_flag) 
*/ 
  
void printPath(int parent[], int j, int case_flag) 
{ 
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	8b 01       	movw	r16, r22
     784:	ea 01       	movw	r28, r20
  if(parent[j] == - 1)
     786:	fb 01       	movw	r30, r22
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e8 0f       	add	r30, r24
     78e:	f9 1f       	adc	r31, r25
     790:	60 81       	ld	r22, Z
     792:	71 81       	ldd	r23, Z+1	; 0x01
     794:	2f ef       	ldi	r18, 0xFF	; 255
     796:	6f 3f       	cpi	r22, 0xFF	; 255
     798:	72 07       	cpc	r23, r18
     79a:	b1 f1       	breq	.+108    	; 0x808 <printPath+0x8e>
 return; 
 
 printPath(parent, parent[j], case_flag);
     79c:	0e 94 bd 03 	call	0x77a	; 0x77a <printPath>
 
    if(case_flag == 2)
     7a0:	c2 30       	cpi	r28, 0x02	; 2
     7a2:	d1 05       	cpc	r29, r1
     7a4:	89 f5       	brne	.+98     	; 0x808 <printPath+0x8e>
    {
    if(first_time_src_var == 1){                       // adding the source node to the path
     7a6:	80 91 7d 04 	lds	r24, 0x047D
     7aa:	90 91 7e 04 	lds	r25, 0x047E
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	91 05       	cpc	r25, r1
     7b2:	d1 f4       	brne	.+52     	; 0x7e8 <printPath+0x6e>
            vertex_path_array_counter++;
     7b4:	80 91 b1 05 	lds	r24, 0x05B1
     7b8:	90 91 b2 05 	lds	r25, 0x05B2
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	90 93 b2 05 	sts	0x05B2, r25
     7c2:	80 93 b1 05 	sts	0x05B1, r24
            vertex_path_array[vertex_path_array_counter] = current_location;
     7c6:	fc 01       	movw	r30, r24
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	e9 51       	subi	r30, 0x19	; 25
     7ce:	fb 4f       	sbci	r31, 0xFB	; 251
     7d0:	80 91 9b 05 	lds	r24, 0x059B
     7d4:	90 91 9c 05 	lds	r25, 0x059C
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	80 83       	st	Z, r24
            first_time_src_var++;                     // increasing the value of 'first_time_src_var' so that next time this 'if' statement does not take place
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 7e 04 	sts	0x047E, r25
     7e4:	80 93 7d 04 	sts	0x047D, r24
    }
     vertex_path_array_counter++;
     7e8:	80 91 b1 05 	lds	r24, 0x05B1
     7ec:	90 91 b2 05 	lds	r25, 0x05B2
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	90 93 b2 05 	sts	0x05B2, r25
     7f6:	80 93 b1 05 	sts	0x05B1, r24
     vertex_path_array[vertex_path_array_counter] = j;
     7fa:	fc 01       	movw	r30, r24
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	e9 51       	subi	r30, 0x19	; 25
     802:	fb 4f       	sbci	r31, 0xFB	; 251
     804:	11 83       	std	Z+1, r17	; 0x01
     806:	00 83       	st	Z, r16
    }
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <printSolution>:
 *                finalNode.                                                   
 * Example Call:  printSolution(dist, V, parent,finalNode,case_flag) 
*/ 
    
int printSolution(int dist[], int n,int parent[],int finalNode, int case_flag) 
{ 
     812:	af 92       	push	r10
     814:	bf 92       	push	r11
     816:	cf 92       	push	r12
     818:	df 92       	push	r13
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	5c 01       	movw	r10, r24
     828:	6a 01       	movw	r12, r20
     82a:	79 01       	movw	r14, r18
   for (int i = 0; i < V; i++) 
     82c:	c0 e0       	ldi	r28, 0x00	; 0
     82e:	d0 e0       	ldi	r29, 0x00	; 0
 {   
     if(i == finalNode)                
     830:	ce 15       	cp	r28, r14
     832:	df 05       	cpc	r29, r15
     834:	81 f4       	brne	.+32     	; 0x856 <printSolution+0x44>
     {
      if(case_flag == 1){
     836:	01 30       	cpi	r16, 0x01	; 1
     838:	11 05       	cpc	r17, r1
     83a:	41 f4       	brne	.+16     	; 0x84c <printSolution+0x3a>
         return dist[i];
     83c:	ee 0c       	add	r14, r14
     83e:	ff 1c       	adc	r15, r15
     840:	ae 0c       	add	r10, r14
     842:	bf 1c       	adc	r11, r15
     844:	f5 01       	movw	r30, r10
     846:	80 81       	ld	r24, Z
     848:	91 81       	ldd	r25, Z+1	; 0x01
     84a:	0b c0       	rjmp	.+22     	; 0x862 <printSolution+0x50>
      } 
        printPath(parent, i, case_flag);
     84c:	c6 01       	movw	r24, r12
     84e:	b7 01       	movw	r22, r14
     850:	a8 01       	movw	r20, r16
     852:	0e 94 bd 03 	call	0x77a	; 0x77a <printPath>
 * Example Call:  printSolution(dist, V, parent,finalNode,case_flag) 
*/ 
    
int printSolution(int dist[], int n,int parent[],int finalNode, int case_flag) 
{ 
   for (int i = 0; i < V; i++) 
     856:	21 96       	adiw	r28, 0x01	; 1
     858:	c6 33       	cpi	r28, 0x36	; 54
     85a:	d1 05       	cpc	r29, r1
     85c:	49 f7       	brne	.-46     	; 0x830 <printSolution+0x1e>
         return dist[i];
      } 
        printPath(parent, i, case_flag);
     }
 } 
    return 0;
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	bf 90       	pop	r11
     874:	af 90       	pop	r10
     876:	08 95       	ret

00000878 <dijkstra>:
 *                create vertex_path_array[].           
 * Example Call:  dijkstra(graph,current_location,v1,1) (The last argument(case_flag) can be 1 or 2 based on we want distance from 'dijkstra' function or we want to generate LR_path) 
*/ 
  
int dijkstra(int graph[V][V], int src, int finalNode, int case_flag) 
{   
     878:	2f 92       	push	r2
     87a:	3f 92       	push	r3
     87c:	4f 92       	push	r4
     87e:	5f 92       	push	r5
     880:	6f 92       	push	r6
     882:	7f 92       	push	r7
     884:	8f 92       	push	r8
     886:	9f 92       	push	r9
     888:	af 92       	push	r10
     88a:	bf 92       	push	r11
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	cc 54       	subi	r28, 0x4C	; 76
     8a2:	d1 40       	sbci	r29, 0x01	; 1
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	4c 01       	movw	r8, r24
     8b0:	8b 01       	movw	r16, r22
     8b2:	c7 5b       	subi	r28, 0xB7	; 183
     8b4:	de 4f       	sbci	r29, 0xFE	; 254
     8b6:	59 83       	std	Y+1, r21	; 0x01
     8b8:	48 83       	st	Y, r20
     8ba:	c9 54       	subi	r28, 0x49	; 73
     8bc:	d1 40       	sbci	r29, 0x01	; 1
     8be:	c5 5b       	subi	r28, 0xB5	; 181
     8c0:	de 4f       	sbci	r29, 0xFE	; 254
     8c2:	39 83       	std	Y+1, r19	; 0x01
     8c4:	28 83       	st	Y, r18
     8c6:	cb 54       	subi	r28, 0x4B	; 75
     8c8:	d1 40       	sbci	r29, 0x01	; 1
    vertex_path_array_counter = -1; 
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	9f ef       	ldi	r25, 0xFF	; 255
     8ce:	90 93 b2 05 	sts	0x05B2, r25
     8d2:	80 93 b1 05 	sts	0x05B1, r24
    first_time_src_var = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 7e 04 	sts	0x047E, r25
     8de:	80 93 7d 04 	sts	0x047D, r24
     8e2:	be 01       	movw	r22, r28
     8e4:	6f 5f       	subi	r22, 0xFF	; 255
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	ae 01       	movw	r20, r28
     8ea:	43 59       	subi	r20, 0x93	; 147
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
 *                dist[v] is made equal to addition of dist[u] and graph[u][v] . After that 'printSolution' function is called further calls different functions to calculate distance or
 *                create vertex_path_array[].           
 * Example Call:  dijkstra(graph,current_location,v1,1) (The last argument(case_flag) can be 1 or 2 based on we want distance from 'dijkstra' function or we want to generate LR_path) 
*/ 
  
int dijkstra(int graph[V][V], int src, int finalNode, int case_flag) 
     8ee:	ca 01       	movw	r24, r20
     8f0:	da 01       	movw	r26, r20
     8f2:	fb 01       	movw	r30, r22
 int parent[V]; 
 
 for (int i = 0; i < V; i++) 
 { 
 parent[src] = -1; 
 dist[i] = INT_MAX; 
     8f4:	2f ef       	ldi	r18, 0xFF	; 255
     8f6:	3f e7       	ldi	r19, 0x7F	; 127
     8f8:	21 93       	st	Z+, r18
     8fa:	31 93       	st	Z+, r19
 sptSet[i] = 0; 
     8fc:	1d 92       	st	X+, r1
     8fe:	1d 92       	st	X+, r1
 int distance_from_current_to_final;
 int dist[V]; 
 int sptSet[V]; 
 int parent[V]; 
 
 for (int i = 0; i < V; i++) 
     900:	e8 17       	cp	r30, r24
     902:	f9 07       	cpc	r31, r25
     904:	c9 f7       	brne	.-14     	; 0x8f8 <dijkstra+0x80>
     906:	c8 01       	movw	r24, r16
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	e9 ed       	ldi	r30, 0xD9	; 217
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ec 0f       	add	r30, r28
     912:	fd 1f       	adc	r31, r29
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	2f ef       	ldi	r18, 0xFF	; 255
     91a:	3f ef       	ldi	r19, 0xFF	; 255
     91c:	31 83       	std	Z+1, r19	; 0x01
     91e:	20 83       	st	Z, r18
 { 
 parent[src] = -1; 
 dist[i] = INT_MAX; 
 sptSet[i] = 0; 
 } 
  dist[src] = 0; 
     920:	fe 01       	movw	r30, r28
     922:	e8 0f       	add	r30, r24
     924:	f9 1f       	adc	r31, r25
     926:	12 82       	std	Z+2, r1	; 0x02
     928:	11 82       	std	Z+1, r1	; 0x01
     92a:	0f 2e       	mov	r0, r31
     92c:	f5 e3       	ldi	r31, 0x35	; 53
     92e:	af 2e       	mov	r10, r31
     930:	bb 24       	eor	r11, r11
     932:	f0 2d       	mov	r31, r0
  
  for (int count = 0; count < V - 1; count++) 
 { 
   int u = minDistance(dist, sptSet); 
      sptSet[u] = 1; 
     934:	66 24       	eor	r6, r6
     936:	77 24       	eor	r7, r7
     938:	63 94       	inc	r6
  
  for (int v = 0; v < V; v++) 
 { if (!sptSet[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v]) 
     93a:	0f 2e       	mov	r0, r31
     93c:	fc e6       	ldi	r31, 0x6C	; 108
     93e:	4f 2e       	mov	r4, r31
     940:	55 24       	eor	r5, r5
     942:	f0 2d       	mov	r31, r0
     944:	cb 5b       	subi	r28, 0xBB	; 187
     946:	de 4f       	sbci	r29, 0xFE	; 254
     948:	68 83       	st	Y, r22
     94a:	c5 54       	subi	r28, 0x45	; 69
     94c:	d1 40       	sbci	r29, 0x01	; 1
     94e:	ca 5b       	subi	r28, 0xBA	; 186
     950:	de 4f       	sbci	r29, 0xFE	; 254
     952:	78 83       	st	Y, r23
     954:	c6 54       	subi	r28, 0x46	; 70
     956:	d1 40       	sbci	r29, 0x01	; 1
     958:	c9 5b       	subi	r28, 0xB9	; 185
     95a:	de 4f       	sbci	r29, 0xFE	; 254
     95c:	48 83       	st	Y, r20
     95e:	c7 54       	subi	r28, 0x47	; 71
     960:	d1 40       	sbci	r29, 0x01	; 1
     962:	c8 5b       	subi	r28, 0xB8	; 184
     964:	de 4f       	sbci	r29, 0xFE	; 254
     966:	58 83       	st	Y, r21
     968:	c8 54       	subi	r28, 0x48	; 72
     96a:	d1 40       	sbci	r29, 0x01	; 1
     96c:	22 24       	eor	r2, r2
     96e:	33 24       	eor	r3, r3
 } 
  dist[src] = 0; 
  
  for (int count = 0; count < V - 1; count++) 
 { 
   int u = minDistance(dist, sptSet); 
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	be 01       	movw	r22, r28
     976:	63 59       	subi	r22, 0x93	; 147
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	0e 94 9c 03 	call	0x738	; 0x738 <minDistance>
     97e:	6c 01       	movw	r12, r24
      sptSet[u] = 1; 
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	2d e6       	ldi	r18, 0x6D	; 109
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	2c 0f       	add	r18, r28
     98a:	3d 1f       	adc	r19, r29
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	fc 01       	movw	r30, r24
     992:	71 82       	std	Z+1, r7	; 0x01
     994:	60 82       	st	Z, r6
  
  for (int v = 0; v < V; v++) 
 { if (!sptSet[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v]) 
     996:	c4 9c       	mul	r12, r4
     998:	c0 01       	movw	r24, r0
     99a:	c5 9c       	mul	r12, r5
     99c:	90 0d       	add	r25, r0
     99e:	d4 9c       	mul	r13, r4
     9a0:	90 0d       	add	r25, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	84 01       	movw	r16, r8
     9a6:	08 0f       	add	r16, r24
     9a8:	19 1f       	adc	r17, r25
     9aa:	cb 5b       	subi	r28, 0xBB	; 187
     9ac:	de 4f       	sbci	r29, 0xFE	; 254
     9ae:	a8 81       	ld	r26, Y
     9b0:	c5 54       	subi	r28, 0x45	; 69
     9b2:	d1 40       	sbci	r29, 0x01	; 1
     9b4:	ca 5b       	subi	r28, 0xBA	; 186
     9b6:	de 4f       	sbci	r29, 0xFE	; 254
     9b8:	b8 81       	ld	r27, Y
     9ba:	c6 54       	subi	r28, 0x46	; 70
     9bc:	d1 40       	sbci	r29, 0x01	; 1
     9be:	c9 5b       	subi	r28, 0xB9	; 185
     9c0:	de 4f       	sbci	r29, 0xFE	; 254
     9c2:	68 81       	ld	r22, Y
     9c4:	c7 54       	subi	r28, 0x47	; 71
     9c6:	d1 40       	sbci	r29, 0x01	; 1
     9c8:	c8 5b       	subi	r28, 0xB8	; 184
     9ca:	de 4f       	sbci	r29, 0xFE	; 254
     9cc:	78 81       	ld	r23, Y
     9ce:	c8 54       	subi	r28, 0x48	; 72
     9d0:	d1 40       	sbci	r29, 0x01	; 1
     9d2:	a1 01       	movw	r20, r2
     9d4:	c6 01       	movw	r24, r12
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	ee 24       	eor	r14, r14
     9dc:	ff 24       	eor	r15, r15
     9de:	e3 94       	inc	r14
     9e0:	ec 0e       	add	r14, r28
     9e2:	fd 1e       	adc	r15, r29
     9e4:	e8 0e       	add	r14, r24
     9e6:	f9 1e       	adc	r15, r25
     9e8:	fb 01       	movw	r30, r22
     9ea:	81 91       	ld	r24, Z+
     9ec:	91 91       	ld	r25, Z+
     9ee:	bf 01       	movw	r22, r30
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	e9 f4       	brne	.+58     	; 0xa2e <dijkstra+0x1b6>
 *                dist[v] is made equal to addition of dist[u] and graph[u][v] . After that 'printSolution' function is called further calls different functions to calculate distance or
 *                create vertex_path_array[].           
 * Example Call:  dijkstra(graph,current_location,v1,1) (The last argument(case_flag) can be 1 or 2 based on we want distance from 'dijkstra' function or we want to generate LR_path) 
*/ 
  
int dijkstra(int graph[V][V], int src, int finalNode, int case_flag) 
     9f4:	f8 01       	movw	r30, r16
     9f6:	e4 0f       	add	r30, r20
     9f8:	f5 1f       	adc	r31, r21
 { 
   int u = minDistance(dist, sptSet); 
      sptSet[u] = 1; 
  
  for (int v = 0; v < V; v++) 
 { if (!sptSet[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v]) 
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	b1 f0       	breq	.+44     	; 0xa2e <dijkstra+0x1b6>
     a02:	f7 01       	movw	r30, r14
     a04:	20 81       	ld	r18, Z
     a06:	31 81       	ldd	r19, Z+1	; 0x01
     a08:	28 0f       	add	r18, r24
     a0a:	39 1f       	adc	r19, r25
     a0c:	8d 91       	ld	r24, X+
     a0e:	9c 91       	ld	r25, X
     a10:	11 97       	sbiw	r26, 0x01	; 1
     a12:	28 17       	cp	r18, r24
     a14:	39 07       	cpc	r19, r25
     a16:	5c f4       	brge	.+22     	; 0xa2e <dijkstra+0x1b6>
 *                dist[v] is made equal to addition of dist[u] and graph[u][v] . After that 'printSolution' function is called further calls different functions to calculate distance or
 *                create vertex_path_array[].           
 * Example Call:  dijkstra(graph,current_location,v1,1) (The last argument(case_flag) can be 1 or 2 based on we want distance from 'dijkstra' function or we want to generate LR_path) 
*/ 
  
int dijkstra(int graph[V][V], int src, int finalNode, int case_flag) 
     a18:	e9 ed       	ldi	r30, 0xD9	; 217
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ec 0f       	add	r30, r28
     a1e:	fd 1f       	adc	r31, r29
     a20:	e4 0f       	add	r30, r20
     a22:	f5 1f       	adc	r31, r21
      sptSet[u] = 1; 
  
  for (int v = 0; v < V; v++) 
 { if (!sptSet[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v]) 
 { 
 parent[v] = u; 
     a24:	d1 82       	std	Z+1, r13	; 0x01
     a26:	c0 82       	st	Z, r12
 dist[v] = dist[u] + graph[u][v]; 
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	3c 93       	st	X, r19
     a2c:	2e 93       	st	-X, r18
     a2e:	4e 5f       	subi	r20, 0xFE	; 254
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	12 96       	adiw	r26, 0x02	; 2
  for (int count = 0; count < V - 1; count++) 
 { 
   int u = minDistance(dist, sptSet); 
      sptSet[u] = 1; 
  
  for (int v = 0; v < V; v++) 
     a34:	4c 36       	cpi	r20, 0x6C	; 108
     a36:	51 05       	cpc	r21, r1
     a38:	b9 f6       	brne	.-82     	; 0x9e8 <dijkstra+0x170>
     a3a:	08 94       	sec
     a3c:	a1 08       	sbc	r10, r1
     a3e:	b1 08       	sbc	r11, r1
 dist[i] = INT_MAX; 
 sptSet[i] = 0; 
 } 
  dist[src] = 0; 
  
  for (int count = 0; count < V - 1; count++) 
     a40:	a1 14       	cp	r10, r1
     a42:	b1 04       	cpc	r11, r1
     a44:	09 f0       	breq	.+2      	; 0xa48 <dijkstra+0x1d0>
     a46:	94 cf       	rjmp	.-216    	; 0x970 <dijkstra+0xf8>
 dist[v] = dist[u] + graph[u][v]; 
 } 
 }
 
 } 
 distance_from_current_to_final = printSolution(dist, V, parent,finalNode,case_flag); 
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	66 e3       	ldi	r22, 0x36	; 54
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	ae 01       	movw	r20, r28
     a52:	47 52       	subi	r20, 0x27	; 39
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	c7 5b       	subi	r28, 0xB7	; 183
     a58:	de 4f       	sbci	r29, 0xFE	; 254
     a5a:	28 81       	ld	r18, Y
     a5c:	39 81       	ldd	r19, Y+1	; 0x01
     a5e:	c9 54       	subi	r28, 0x49	; 73
     a60:	d1 40       	sbci	r29, 0x01	; 1
     a62:	c5 5b       	subi	r28, 0xB5	; 181
     a64:	de 4f       	sbci	r29, 0xFE	; 254
     a66:	08 81       	ld	r16, Y
     a68:	19 81       	ldd	r17, Y+1	; 0x01
     a6a:	cb 54       	subi	r28, 0x4B	; 75
     a6c:	d1 40       	sbci	r29, 0x01	; 1
     a6e:	0e 94 09 04 	call	0x812	; 0x812 <printSolution>
    return distance_from_current_to_final;
}
     a72:	c4 5b       	subi	r28, 0xB4	; 180
     a74:	de 4f       	sbci	r29, 0xFE	; 254
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	9f 90       	pop	r9
     a96:	8f 90       	pop	r8
     a98:	7f 90       	pop	r7
     a9a:	6f 90       	pop	r6
     a9c:	5f 90       	pop	r5
     a9e:	4f 90       	pop	r4
     aa0:	3f 90       	pop	r3
     aa2:	2f 90       	pop	r2
     aa4:	08 95       	ret

00000aa6 <move_after_LR_path_formed>:
 *                the value present at index i = 0 from the LR_array[] , then checks whether 'L' or 'R' and moves left or right according to that. Further the value of i is incremented 
 *                so as to traverse in the LR_array[] . If '\0' is received that means that the whole 'LR_path[]' is traversed and now function can exit.                                                           
 * Example Call:  move_after_LR_path_formed() 
*/ 
int move_after_LR_path_formed()
{
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
 *      2                 3                   3                   left
 *                3                 1                   1                   left
 *                3                 2                  2                   right 
 *
 */
  if(LR_path[i] == '\0'){
     aae:	80 91 53 05 	lds	r24, 0x0553
     ab2:	88 23       	and	r24, r24
     ab4:	09 f0       	breq	.+2      	; 0xab8 <move_after_LR_path_formed+0x12>
     ab6:	62 c0       	rjmp	.+196    	; 0xb7c <move_after_LR_path_formed+0xd6>
   if((front_axis == 1) && (destination_axis == 3)){
     ab8:	80 91 7f 04 	lds	r24, 0x047F
     abc:	90 91 80 04 	lds	r25, 0x0480
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	91 05       	cpc	r25, r1
     ac4:	69 f5       	brne	.+90     	; 0xb20 <move_after_LR_path_formed+0x7a>
     ac6:	80 91 99 05 	lds	r24, 0x0599
     aca:	90 91 9a 05 	lds	r25, 0x059A
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	91 05       	cpc	r25, r1
     ad2:	89 f4       	brne	.+34     	; 0xaf6 <move_after_LR_path_formed+0x50>
     right_degrees(160);
     ad4:	80 ea       	ldi	r24, 0xA0	; 160
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
     front_axis = 3;
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	90 93 80 04 	sts	0x0480, r25
     ae4:	80 93 7f 04 	sts	0x047F, r24
     stop();                            // The bot stops for stablization 
     ae8:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     back_mm(back_value);               // The bot moves back to detect the BBB condition or the node so as to generate the new LR path
     aec:	84 ef       	ldi	r24, 0xF4	; 244
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
     af4:	43 c0       	rjmp	.+134    	; 0xb7c <move_after_LR_path_formed+0xd6>
   }
   else if((front_axis == 1) && (destination_axis == 2)){
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	91 05       	cpc	r25, r1
     afa:	09 f0       	breq	.+2      	; 0xafe <move_after_LR_path_formed+0x58>
     afc:	3f c0       	rjmp	.+126    	; 0xb7c <move_after_LR_path_formed+0xd6>
     
     left_degrees(160);
     afe:	80 ea       	ldi	r24, 0xA0	; 160
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    front_axis = 2;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 80 04 	sts	0x0480, r25
     b0e:	80 93 7f 04 	sts	0x047F, r24
      stop();
     b12:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     back_mm(back_value);
     b16:	84 ef       	ldi	r24, 0xF4	; 244
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
     b1e:	2e c0       	rjmp	.+92     	; 0xb7c <move_after_LR_path_formed+0xd6>
    
   }
   else if((front_axis == 2) && (destination_axis == 1)){
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	91 05       	cpc	r25, r1
     b24:	81 f5       	brne	.+96     	; 0xb86 <move_after_LR_path_formed+0xe0>
     b26:	80 91 99 05 	lds	r24, 0x0599
     b2a:	90 91 9a 05 	lds	r25, 0x059A
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	91 05       	cpc	r25, r1
     b32:	89 f4       	brne	.+34     	; 0xb56 <move_after_LR_path_formed+0xb0>
      right_degrees(160); 
     b34:	80 ea       	ldi	r24, 0xA0	; 160
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
     front_axis = 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	90 93 80 04 	sts	0x0480, r25
     b44:	80 93 7f 04 	sts	0x047F, r24
     stop();
     b48:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     back_mm(back_value);
     b4c:	84 ef       	ldi	r24, 0xF4	; 244
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
     b54:	13 c0       	rjmp	.+38     	; 0xb7c <move_after_LR_path_formed+0xd6>
   }
   else if((front_axis == 2) && (destination_axis == 3)){
     b56:	83 30       	cpi	r24, 0x03	; 3
     b58:	91 05       	cpc	r25, r1
     b5a:	81 f4       	brne	.+32     	; 0xb7c <move_after_LR_path_formed+0xd6>
 
    left_degrees(160); 
     b5c:	80 ea       	ldi	r24, 0xA0	; 160
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    front_axis = 3;
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 80 04 	sts	0x0480, r25
     b6c:	80 93 7f 04 	sts	0x047F, r24
     stop();
     b70:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
    back_mm(back_value);
     b74:	84 ef       	ldi	r24, 0xF4	; 244
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
 *                the value present at index i = 0 from the LR_array[] , then checks whether 'L' or 'R' and moves left or right according to that. Further the value of i is incremented 
 *                so as to traverse in the LR_array[] . If '\0' is received that means that the whole 'LR_path[]' is traversed and now function can exit.                                                           
 * Example Call:  move_after_LR_path_formed() 
*/ 
int move_after_LR_path_formed()
{
     b7c:	c0 e0       	ldi	r28, 0x00	; 0
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
   forward_mm(80);
   break;
 }
     }
 
     if(LR_path[i] == 'L'){
     b80:	03 e5       	ldi	r16, 0x53	; 83
     b82:	15 e0       	ldi	r17, 0x05	; 5
     b84:	2f c0       	rjmp	.+94     	; 0xbe4 <move_after_LR_path_formed+0x13e>
    left_degrees(160); 
    front_axis = 3;
     stop();
    back_mm(back_value);
   }
   else if((front_axis == 3) && (destination_axis == 1)){ 
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	91 05       	cpc	r25, r1
     b8a:	c1 f7       	brne	.-16     	; 0xb7c <move_after_LR_path_formed+0xd6>
     b8c:	80 91 99 05 	lds	r24, 0x0599
     b90:	90 91 9a 05 	lds	r25, 0x059A
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	91 05       	cpc	r25, r1
     b98:	89 f4       	brne	.+34     	; 0xbbc <move_after_LR_path_formed+0x116>
    left_degrees(160);
     b9a:	80 ea       	ldi	r24, 0xA0	; 160
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
     front_axis = 1;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	90 93 80 04 	sts	0x0480, r25
     baa:	80 93 7f 04 	sts	0x047F, r24
     stop();
     bae:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     back_mm(back_value);
     bb2:	84 ef       	ldi	r24, 0xF4	; 244
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
     bba:	e0 cf       	rjmp	.-64     	; 0xb7c <move_after_LR_path_formed+0xd6>
   }
   else if((front_axis == 3) && (destination_axis == 2)){
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	91 05       	cpc	r25, r1
     bc0:	e9 f6       	brne	.-70     	; 0xb7c <move_after_LR_path_formed+0xd6>
     right_degrees(160);
     bc2:	80 ea       	ldi	r24, 0xA0	; 160
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
     front_axis = 2;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 80 04 	sts	0x0480, r25
     bd2:	80 93 7f 04 	sts	0x047F, r24
     stop();
     bd6:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     back_mm(back_value);
     bda:	84 ef       	ldi	r24, 0xF4	; 244
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
     be2:	cc cf       	rjmp	.-104    	; 0xb7c <move_after_LR_path_formed+0xd6>
    // It is already in the same destination_axis
   }
  }
 while (1)
 {
 Left_white_line = ADC_Conversion(3);   // Getting data of Left White Line Sensor
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
     bea:	80 93 e6 04 	sts	0x04E6, r24
 Center_white_line = ADC_Conversion(2); // Getting data of Center White Line Sensor
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
     bf4:	80 93 e5 04 	sts	0x04E5, r24
 Right_white_line = ADC_Conversion(1);  // Getting data of Right White Line Sensor
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
     bfe:	80 93 e4 04 	sts	0x04E4, r24
 while(1){
 Left_white_line = ADC_Conversion(3);  
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
     c08:	80 93 e6 04 	sts	0x04E6, r24
 Center_white_line = ADC_Conversion(2); 
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
     c12:	80 93 e5 04 	sts	0x04E5, r24
 Right_white_line = ADC_Conversion(1);  
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
     c1c:	80 93 e4 04 	sts	0x04E4, r24
 follow();
     c20:	0e 94 b4 02 	call	0x568	; 0x568 <follow>
 if(Right_white_line>0x20 && Center_white_line>0x20 && Left_white_line>0x20) //BBB
     c24:	80 91 e4 04 	lds	r24, 0x04E4
     c28:	81 32       	cpi	r24, 0x21	; 33
     c2a:	58 f3       	brcs	.-42     	; 0xc02 <move_after_LR_path_formed+0x15c>
     c2c:	80 91 e5 04 	lds	r24, 0x04E5
     c30:	81 32       	cpi	r24, 0x21	; 33
     c32:	38 f3       	brcs	.-50     	; 0xc02 <move_after_LR_path_formed+0x15c>
     c34:	80 91 e6 04 	lds	r24, 0x04E6
     c38:	81 32       	cpi	r24, 0x21	; 33
     c3a:	18 f3       	brcs	.-58     	; 0xc02 <move_after_LR_path_formed+0x15c>
 { 
 stop ();
     c3c:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	9f ef       	ldi	r25, 0xFF	; 255
     c44:	a8 e0       	ldi	r26, 0x08	; 8
     c46:	81 50       	subi	r24, 0x01	; 1
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	a0 40       	sbci	r26, 0x00	; 0
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <move_after_LR_path_formed+0x1a0>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <move_after_LR_path_formed+0x1aa>
     c50:	00 00       	nop
   _delay_ms(200);
   forward_mm(80);
     c52:	80 e5       	ldi	r24, 0x50	; 80
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
   break;
 }
     }
 
     if(LR_path[i] == 'L'){
     c5a:	f8 01       	movw	r30, r16
     c5c:	ec 0f       	add	r30, r28
     c5e:	fd 1f       	adc	r31, r29
     c60:	80 81       	ld	r24, Z
     c62:	8c 34       	cpi	r24, 0x4C	; 76
     c64:	51 f4       	brne	.+20     	; 0xc7a <move_after_LR_path_formed+0x1d4>
 left_degrees(80);
     c66:	80 e5       	ldi	r24, 0x50	; 80
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
 forward_mm(200);
     c6e:	88 ec       	ldi	r24, 0xC8	; 200
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 i++;
     c76:	21 96       	adiw	r28, 0x01	; 1
     c78:	b5 cf       	rjmp	.-150    	; 0xbe4 <move_after_LR_path_formed+0x13e>
 }
    else if(LR_path[i]=='R'){
     c7a:	82 35       	cpi	r24, 0x52	; 82
     c7c:	51 f4       	brne	.+20     	; 0xc92 <move_after_LR_path_formed+0x1ec>
 right_degrees(80);
     c7e:	80 e5       	ldi	r24, 0x50	; 80
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 forward_mm(200);
     c86:	88 ec       	ldi	r24, 0xC8	; 200
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 i++;
     c8e:	21 96       	adiw	r28, 0x01	; 1
     c90:	a9 cf       	rjmp	.-174    	; 0xbe4 <move_after_LR_path_formed+0x13e>
       }
  
    else if(LR_path[i] == '\0'){
     c92:	88 23       	and	r24, r24
     c94:	49 f4       	brne	.+18     	; 0xca8 <move_after_LR_path_formed+0x202>
 stop();
     c96:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
          stop();
 } 
 }
 
 return 0;
}
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret
    else if(LR_path[i] == '\0'){
 stop();
 break;
 }
    else{
          stop();
     ca8:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     cac:	9b cf       	rjmp	.-202    	; 0xbe4 <move_after_LR_path_formed+0x13e>

00000cae <check_edge_case>:
 *               negative   positive                2                   1
 *                                                         
 * Example Call:  check_edge_case(x_coordinate_difference , y_coordinate_difference) 
*/
int check_edge_case(int x_diff , int y_diff)
{
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	8c 01       	movw	r16, r24
     cb8:	eb 01       	movw	r28, r22
      if((x_diff > 0 && y_diff > 0) && (front_axis == 3))       // x positive, y positive
     cba:	18 16       	cp	r1, r24
     cbc:	19 06       	cpc	r1, r25
     cbe:	0c f0       	brlt	.+2      	; 0xcc2 <check_edge_case+0x14>
     cc0:	74 c0       	rjmp	.+232    	; 0xdaa <check_edge_case+0xfc>
     cc2:	1c 16       	cp	r1, r28
     cc4:	1d 06       	cpc	r1, r29
     cc6:	0c f0       	brlt	.+2      	; 0xcca <check_edge_case+0x1c>
     cc8:	ed c0       	rjmp	.+474    	; 0xea4 <check_edge_case+0x1f6>
     cca:	80 91 7f 04 	lds	r24, 0x047F
     cce:	90 91 80 04 	lds	r25, 0x0480
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f0       	breq	.+2      	; 0xcda <check_edge_case+0x2c>
     cd8:	e5 c0       	rjmp	.+458    	; 0xea4 <check_edge_case+0x1f6>
      {
   forward_mm(300);
     cda:	8c e2       	ldi	r24, 0x2C	; 44
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
   right_degrees(160);                                // Rotate by 120 degrees right
     ce2:	80 ea       	ldi	r24, 0xA0	; 160
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
      stop(); 
     cea:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	9f e7       	ldi	r25, 0x7F	; 127
     cf2:	a6 e1       	ldi	r26, 0x16	; 22
     cf4:	81 50       	subi	r24, 0x01	; 1
     cf6:	90 40       	sbci	r25, 0x00	; 0
     cf8:	a0 40       	sbci	r26, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <check_edge_case+0x46>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <check_edge_case+0x50>
     cfe:	00 00       	nop
   _delay_ms(500);                                                // Stop the robot
      back_mm(800);                                     // Move backwards by 'back_value'( = 800 ) for obtaining BBB condition on white line sensors and continue path traversal
     d00:	80 e2       	ldi	r24, 0x20	; 32
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
      front_axis = 2;                                          // Update the value of front axis according to rotation
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	90 93 80 04 	sts	0x0480, r25
     d10:	80 93 7f 04 	sts	0x047F, r24
     d14:	c7 c0       	rjmp	.+398    	; 0xea4 <check_edge_case+0x1f6>
      }
      
      if((x_diff > 0 && y_diff == 0) && (front_axis == 1))       // x positive, y constant
     d16:	80 91 7f 04 	lds	r24, 0x047F
     d1a:	90 91 80 04 	lds	r25, 0x0480
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f0       	breq	.+2      	; 0xd26 <check_edge_case+0x78>
     d24:	c2 c0       	rjmp	.+388    	; 0xeaa <check_edge_case+0x1fc>
      {
   forward_mm(300);
     d26:	8c e2       	ldi	r24, 0x2C	; 44
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
      right_degrees(160);                                 // rotate by 120 degrees right
     d2e:	80 ea       	ldi	r24, 0xA0	; 160
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
      stop();
     d36:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	9f e7       	ldi	r25, 0x7F	; 127
     d3e:	a6 e1       	ldi	r26, 0x16	; 22
     d40:	81 50       	subi	r24, 0x01	; 1
     d42:	90 40       	sbci	r25, 0x00	; 0
     d44:	a0 40       	sbci	r26, 0x00	; 0
     d46:	e1 f7       	brne	.-8      	; 0xd40 <check_edge_case+0x92>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <check_edge_case+0x9c>
     d4a:	00 00       	nop
   _delay_ms(500);
      back_mm(800);
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
      front_axis = 3;
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 80 04 	sts	0x0480, r25
     d5c:	80 93 7f 04 	sts	0x047F, r24
     d60:	24 c0       	rjmp	.+72     	; 0xdaa <check_edge_case+0xfc>
      }
      
      if((x_diff > 0 && y_diff < 0) && (front_axis == 2)){      // x positive, y negative
     d62:	80 91 7f 04 	lds	r24, 0x047F
     d66:	90 91 80 04 	lds	r25, 0x0480
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	91 05       	cpc	r25, r1
     d6e:	e9 f4       	brne	.+58     	; 0xdaa <check_edge_case+0xfc>
      //rotate 120 R
   forward_mm(300);
     d70:	8c e2       	ldi	r24, 0x2C	; 44
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
   right_degrees(160);                              // rotate by 120 degrees right
     d78:	80 ea       	ldi	r24, 0xA0	; 160
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
      stop();
     d80:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	9f e7       	ldi	r25, 0x7F	; 127
     d88:	a6 e1       	ldi	r26, 0x16	; 22
     d8a:	81 50       	subi	r24, 0x01	; 1
     d8c:	90 40       	sbci	r25, 0x00	; 0
     d8e:	a0 40       	sbci	r26, 0x00	; 0
     d90:	e1 f7       	brne	.-8      	; 0xd8a <check_edge_case+0xdc>
     d92:	00 c0       	rjmp	.+0      	; 0xd94 <check_edge_case+0xe6>
     d94:	00 00       	nop
   _delay_ms(500);
      back_mm(800);
     d96:	80 e2       	ldi	r24, 0x20	; 32
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
      front_axis = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	90 93 80 04 	sts	0x0480, r25
     da6:	80 93 7f 04 	sts	0x047F, r24
     }
     // x - ,y -
     if((x_diff < 0 && y_diff < 0) && (front_axis == 3)){
     daa:	11 23       	and	r17, r17
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <check_edge_case+0x102>
     dae:	73 c0       	rjmp	.+230    	; 0xe96 <check_edge_case+0x1e8>
     db0:	dd 23       	and	r29, r29
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <check_edge_case+0x108>
     db4:	7e c0       	rjmp	.+252    	; 0xeb2 <check_edge_case+0x204>
     db6:	80 91 7f 04 	lds	r24, 0x047F
     dba:	90 91 80 04 	lds	r25, 0x0480
     dbe:	83 30       	cpi	r24, 0x03	; 3
     dc0:	91 05       	cpc	r25, r1
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <check_edge_case+0x118>
     dc4:	76 c0       	rjmp	.+236    	; 0xeb2 <check_edge_case+0x204>
      // rotate by 120 R
   forward_mm(300);
     dc6:	8c e2       	ldi	r24, 0x2C	; 44
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
      right_degrees(160);                                     // rotate by 120 degrees right
     dce:	80 ea       	ldi	r24, 0xA0	; 160
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
      stop();
     dd6:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	9f e7       	ldi	r25, 0x7F	; 127
     dde:	a6 e1       	ldi	r26, 0x16	; 22
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	90 40       	sbci	r25, 0x00	; 0
     de4:	a0 40       	sbci	r26, 0x00	; 0
     de6:	e1 f7       	brne	.-8      	; 0xde0 <check_edge_case+0x132>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <check_edge_case+0x13c>
     dea:	00 00       	nop
   _delay_ms(500);
      back_mm(800);
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
      front_axis = 2;
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 80 04 	sts	0x0480, r25
     dfc:	80 93 7f 04 	sts	0x047F, r24
     e00:	58 c0       	rjmp	.+176    	; 0xeb2 <check_edge_case+0x204>
     }
     // x- , y = k
     if((x_diff < 0 && y_diff == 0) && (front_axis == 1)){
     e02:	80 91 7f 04 	lds	r24, 0x047F
     e06:	90 91 80 04 	lds	r25, 0x0480
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <check_edge_case+0x164>
     e10:	53 c0       	rjmp	.+166    	; 0xeb8 <check_edge_case+0x20a>
      // rotate by 120 R
   forward_mm(300); 
     e12:	8c e2       	ldi	r24, 0x2C	; 44
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
   right_degrees(160);                                // rotate by 120 degrees right
     e1a:	80 ea       	ldi	r24, 0xA0	; 160
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
      stop();
     e22:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	9f e7       	ldi	r25, 0x7F	; 127
     e2a:	a6 e1       	ldi	r26, 0x16	; 22
     e2c:	81 50       	subi	r24, 0x01	; 1
     e2e:	90 40       	sbci	r25, 0x00	; 0
     e30:	a0 40       	sbci	r26, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <check_edge_case+0x17e>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <check_edge_case+0x188>
     e36:	00 00       	nop
   _delay_ms(500);
      back_mm(800);
     e38:	80 e2       	ldi	r24, 0x20	; 32
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
      front_axis = 3;
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	90 93 80 04 	sts	0x0480, r25
     e48:	80 93 7f 04 	sts	0x047F, r24
     e4c:	24 c0       	rjmp	.+72     	; 0xe96 <check_edge_case+0x1e8>
     }
     
     //x - ,y +
     if((x_diff < 0 && y_diff > 0) && (front_axis == 2)){
     e4e:	80 91 7f 04 	lds	r24, 0x047F
     e52:	90 91 80 04 	lds	r25, 0x0480
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	91 05       	cpc	r25, r1
     e5a:	e9 f4       	brne	.+58     	; 0xe96 <check_edge_case+0x1e8>
      forward_mm(300);
     e5c:	8c e2       	ldi	r24, 0x2C	; 44
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
    
   right_degrees(160);                                    // rotate by 120 degrees right
     e64:	80 ea       	ldi	r24, 0xA0	; 160
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
      stop();
     e6c:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f e7       	ldi	r25, 0x7F	; 127
     e74:	a6 e1       	ldi	r26, 0x16	; 22
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	90 40       	sbci	r25, 0x00	; 0
     e7a:	a0 40       	sbci	r26, 0x00	; 0
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <check_edge_case+0x1c8>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <check_edge_case+0x1d2>
     e80:	00 00       	nop
      _delay_ms(500);
   back_mm(800);
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	93 e0       	ldi	r25, 0x03	; 3
     e86:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
      front_axis = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	90 93 80 04 	sts	0x0480, r25
     e92:	80 93 7f 04 	sts	0x047F, r24
  }     
 return 0;
} 
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret
   _delay_ms(500);                                                // Stop the robot
      back_mm(800);                                     // Move backwards by 'back_value'( = 800 ) for obtaining BBB condition on white line sensors and continue path traversal
      front_axis = 2;                                          // Update the value of front axis according to rotation
      }
      
      if((x_diff > 0 && y_diff == 0) && (front_axis == 1))       // x positive, y constant
     ea4:	20 97       	sbiw	r28, 0x00	; 0
     ea6:	09 f4       	brne	.+2      	; 0xeaa <check_edge_case+0x1fc>
     ea8:	36 cf       	rjmp	.-404    	; 0xd16 <check_edge_case+0x68>
   _delay_ms(500);
      back_mm(800);
      front_axis = 3;
      }
      
      if((x_diff > 0 && y_diff < 0) && (front_axis == 2)){      // x positive, y negative
     eaa:	dd 23       	and	r29, r29
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <check_edge_case+0x202>
     eae:	7d cf       	rjmp	.-262    	; 0xdaa <check_edge_case+0xfc>
     eb0:	58 cf       	rjmp	.-336    	; 0xd62 <check_edge_case+0xb4>
   _delay_ms(500);
      back_mm(800);
      front_axis = 2;
     }
     // x- , y = k
     if((x_diff < 0 && y_diff == 0) && (front_axis == 1)){
     eb2:	20 97       	sbiw	r28, 0x00	; 0
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <check_edge_case+0x20a>
     eb6:	a5 cf       	rjmp	.-182    	; 0xe02 <check_edge_case+0x154>
      back_mm(800);
      front_axis = 3;
     }
     
     //x - ,y +
     if((x_diff < 0 && y_diff > 0) && (front_axis == 2)){
     eb8:	1c 16       	cp	r1, r28
     eba:	1d 06       	cpc	r1, r29
     ebc:	44 f2       	brlt	.-112    	; 0xe4e <check_edge_case+0x1a0>
     ebe:	eb cf       	rjmp	.-42     	; 0xe96 <check_edge_case+0x1e8>

00000ec0 <update_axis>:
 * Example Call: update_axis(LR_path_counter) 
*/  
int update_axis(int LR_path_counter)
{
 
 if(front_axis == 2 && LR_path[LR_path_counter] == 'L'){
     ec0:	20 91 7f 04 	lds	r18, 0x047F
     ec4:	30 91 80 04 	lds	r19, 0x0480
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	b1 f4       	brne	.+44     	; 0xefa <update_axis+0x3a>
     ece:	8d 5a       	subi	r24, 0xAD	; 173
     ed0:	9a 4f       	sbci	r25, 0xFA	; 250
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	8c 34       	cpi	r24, 0x4C	; 76
     ed8:	39 f4       	brne	.+14     	; 0xee8 <update_axis+0x28>
 front_axis = 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	90 93 80 04 	sts	0x0480, r25
     ee2:	80 93 7f 04 	sts	0x047F, r24
     ee6:	3a c0       	rjmp	.+116    	; 0xf5c <update_axis+0x9c>
 }
 else if(front_axis == 2 && LR_path[LR_path_counter] == 'R'){
     ee8:	82 35       	cpi	r24, 0x52	; 82
     eea:	c1 f5       	brne	.+112    	; 0xf5c <update_axis+0x9c>
 front_axis = 3;
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	90 93 80 04 	sts	0x0480, r25
     ef4:	80 93 7f 04 	sts	0x047F, r24
     ef8:	31 c0       	rjmp	.+98     	; 0xf5c <update_axis+0x9c>
 }
 else if(front_axis == 1 && LR_path[LR_path_counter] == 'L'){
     efa:	21 30       	cpi	r18, 0x01	; 1
     efc:	31 05       	cpc	r19, r1
     efe:	b1 f4       	brne	.+44     	; 0xf2c <update_axis+0x6c>
     f00:	8d 5a       	subi	r24, 0xAD	; 173
     f02:	9a 4f       	sbci	r25, 0xFA	; 250
     f04:	fc 01       	movw	r30, r24
     f06:	80 81       	ld	r24, Z
     f08:	8c 34       	cpi	r24, 0x4C	; 76
     f0a:	39 f4       	brne	.+14     	; 0xf1a <update_axis+0x5a>
 front_axis = 3;
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	90 93 80 04 	sts	0x0480, r25
     f14:	80 93 7f 04 	sts	0x047F, r24
     f18:	21 c0       	rjmp	.+66     	; 0xf5c <update_axis+0x9c>
 }
 else if(front_axis == 1 && LR_path[LR_path_counter] == 'R'){
     f1a:	82 35       	cpi	r24, 0x52	; 82
     f1c:	f9 f4       	brne	.+62     	; 0xf5c <update_axis+0x9c>
 front_axis = 2;
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 80 04 	sts	0x0480, r25
     f26:	80 93 7f 04 	sts	0x047F, r24
     f2a:	18 c0       	rjmp	.+48     	; 0xf5c <update_axis+0x9c>
 }
 else if(front_axis == 3 && LR_path[LR_path_counter] == 'L'){
     f2c:	23 30       	cpi	r18, 0x03	; 3
     f2e:	31 05       	cpc	r19, r1
     f30:	a9 f4       	brne	.+42     	; 0xf5c <update_axis+0x9c>
     f32:	8d 5a       	subi	r24, 0xAD	; 173
     f34:	9a 4f       	sbci	r25, 0xFA	; 250
     f36:	fc 01       	movw	r30, r24
     f38:	80 81       	ld	r24, Z
     f3a:	8c 34       	cpi	r24, 0x4C	; 76
     f3c:	39 f4       	brne	.+14     	; 0xf4c <update_axis+0x8c>
 front_axis = 2;
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 80 04 	sts	0x0480, r25
     f46:	80 93 7f 04 	sts	0x047F, r24
     f4a:	08 c0       	rjmp	.+16     	; 0xf5c <update_axis+0x9c>
 }
 else if(front_axis == 3 && LR_path[LR_path_counter] == 'R'){
     f4c:	82 35       	cpi	r24, 0x52	; 82
     f4e:	31 f4       	brne	.+12     	; 0xf5c <update_axis+0x9c>
 front_axis = 1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	90 93 80 04 	sts	0x0480, r25
     f58:	80 93 7f 04 	sts	0x047F, r24
 }
 else{
 //  Error: Cannot update axis 
 }
 return 0;
}
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	08 95       	ret

00000f62 <create_LR_path>:
 * After that 'move_after_LR_formed()' is called that traverses through the 'L' 'R' sequence and moves the robot according to that.    
 * Example Call:  create_LR_path(graph,current_location,final_vertex) 
*/
 
 
int create_LR_path(int graph[V][V],int initial_vertex,int final_vertex){
     f62:	2f 92       	push	r2
     f64:	3f 92       	push	r3
     f66:	4f 92       	push	r4
     f68:	5f 92       	push	r5
     f6a:	6f 92       	push	r6
     f6c:	7f 92       	push	r7
     f6e:	8f 92       	push	r8
     f70:	9f 92       	push	r9
     f72:	af 92       	push	r10
     f74:	bf 92       	push	r11
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	2a 97       	sbiw	r28, 0x0a	; 10
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
    int x1, x2, y1, y2, x, y, k, j,LR_path_counter = -1;
 int x_coordinate_difference;
 int y_coordinate_difference;
 
    dijkstra(graph,initial_vertex,final_vertex,2);
     f96:	22 e0       	ldi	r18, 0x02	; 2
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
     for(int i = 0; i < vertex_path_array_counter; i++){
     f9e:	80 91 b1 05 	lds	r24, 0x05B1
     fa2:	90 91 b2 05 	lds	r25, 0x05B2
     fa6:	18 16       	cp	r1, r24
     fa8:	19 06       	cpc	r1, r25
     faa:	0c f4       	brge	.+2      	; 0xfae <create_LR_path+0x4c>
     fac:	1d c3       	rjmp	.+1594   	; 0x15e8 <create_LR_path+0x686>
 * Example Call:  create_LR_path(graph,current_location,final_vertex) 
*/
 
 
int create_LR_path(int graph[V][V],int initial_vertex,int final_vertex){
    int x1, x2, y1, y2, x, y, k, j,LR_path_counter = -1;
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	34 c3       	rjmp	.+1640   	; 0x1620 <create_LR_path+0x6be>
 
    dijkstra(graph,initial_vertex,final_vertex,2);
     for(int i = 0; i < vertex_path_array_counter; i++){
         j = 1;
         while(j<=2)
         {  if(j == 1){
     fb8:	41 30       	cpi	r20, 0x01	; 1
     fba:	51 05       	cpc	r21, r1
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <create_LR_path+0x62>
              k = i;                
            }
            else{
              k = i+1;  
     fbe:	29 85       	ldd	r18, Y+9	; 0x09
     fc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <create_LR_path+0x66>
 
    dijkstra(graph,initial_vertex,final_vertex,2);
     for(int i = 0; i < vertex_path_array_counter; i++){
         j = 1;
         while(j<=2)
         {  if(j == 1){
     fc4:	26 2d       	mov	r18, r6
     fc6:	34 2d       	mov	r19, r4
              k = i;                
            }
            else{
              k = i+1;  
            }
            switch(vertex_path_array[k])
     fc8:	c9 01       	movw	r24, r18
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	89 51       	subi	r24, 0x19	; 25
     fd0:	9b 4f       	sbci	r25, 0xFB	; 251
     fd2:	fc 01       	movw	r30, r24
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	86 33       	cpi	r24, 0x36	; 54
     fda:	91 05       	cpc	r25, r1
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <create_LR_path+0x7e>
     fde:	e2 c1       	rjmp	.+964    	; 0x13a4 <create_LR_path+0x442>
     fe0:	8e 58       	subi	r24, 0x8E	; 142
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	fc 01       	movw	r30, r24
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	05 90       	lpm	r0, Z+
     fec:	f4 91       	lpm	r31, Z
     fee:	e0 2d       	mov	r30, r0
     ff0:	19 94       	eijmp
                x = 0; 
                y = 2;
                break;
        case 1 : 
                 x = 0;
                 y = 0;
     ff2:	cc 24       	eor	r12, r12
     ff4:	dd 24       	eor	r13, r13
        case 0 : 
                x = 0; 
                y = 2;
                break;
        case 1 : 
                 x = 0;
     ff6:	aa 24       	eor	r10, r10
     ff8:	bb 24       	eor	r11, r11
                 y = 0;
                 break;
     ffa:	d4 c1       	rjmp	.+936    	; 0x13a4 <create_LR_path+0x442>
        case 2 : 
                        x = 0;
                 y = -2;
     ffc:	0f 2e       	mov	r0, r31
     ffe:	fe ef       	ldi	r31, 0xFE	; 254
    1000:	cf 2e       	mov	r12, r31
    1002:	f0 2d       	mov	r31, r0
    1004:	dd 24       	eor	r13, r13
    1006:	da 94       	dec	r13
        case 1 : 
                 x = 0;
                 y = 0;
                 break;
        case 2 : 
                        x = 0;
    1008:	aa 24       	eor	r10, r10
    100a:	bb 24       	eor	r11, r11
                 y = -2;
                break;
    100c:	cb c1       	rjmp	.+918    	; 0x13a4 <create_LR_path+0x442>
        case 3 :
                 x = 1;
                 y = 3;
    100e:	c0 2e       	mov	r12, r16
    1010:	d1 2e       	mov	r13, r17
        case 2 : 
                        x = 0;
                 y = -2;
                break;
        case 3 :
                 x = 1;
    1012:	a8 2c       	mov	r10, r8
    1014:	b9 2c       	mov	r11, r9
                 y = 3;
                break;
    1016:	c6 c1       	rjmp	.+908    	; 0x13a4 <create_LR_path+0x442>
        case 4 : 
                 x = 1;
                 y = 1;
    1018:	c8 2c       	mov	r12, r8
    101a:	d9 2c       	mov	r13, r9
        case 3 :
                 x = 1;
                 y = 3;
                break;
        case 4 : 
                 x = 1;
    101c:	a8 2c       	mov	r10, r8
    101e:	b9 2c       	mov	r11, r9
                 y = 1;
                 break;
    1020:	c1 c1       	rjmp	.+898    	; 0x13a4 <create_LR_path+0x442>
        case 5 : 
                 x = 1;
                 y = -1;
    1022:	cc 24       	eor	r12, r12
    1024:	ca 94       	dec	r12
    1026:	dd 24       	eor	r13, r13
    1028:	da 94       	dec	r13
        case 4 : 
                 x = 1;
                 y = 1;
                 break;
        case 5 : 
                 x = 1;
    102a:	a8 2c       	mov	r10, r8
    102c:	b9 2c       	mov	r11, r9
                 y = -1;
                break;
    102e:	ba c1       	rjmp	.+884    	; 0x13a4 <create_LR_path+0x442>
        case 6 : 
                 x = 1;
                 y = -3;
    1030:	0f 2e       	mov	r0, r31
    1032:	fd ef       	ldi	r31, 0xFD	; 253
    1034:	cf 2e       	mov	r12, r31
    1036:	f0 2d       	mov	r31, r0
    1038:	dd 24       	eor	r13, r13
    103a:	da 94       	dec	r13
        case 5 : 
                 x = 1;
                 y = -1;
                break;
        case 6 : 
                 x = 1;
    103c:	a8 2c       	mov	r10, r8
    103e:	b9 2c       	mov	r11, r9
                 y = -3;
                break;
    1040:	b1 c1       	rjmp	.+866    	; 0x13a4 <create_LR_path+0x442>
        case 7 : 
                 x = 2;
                 y = 3;
    1042:	c0 2e       	mov	r12, r16
    1044:	d1 2e       	mov	r13, r17
        case 6 : 
                 x = 1;
                 y = -3;
                break;
        case 7 : 
                 x = 2;
    1046:	aa 24       	eor	r10, r10
    1048:	68 94       	set
    104a:	a1 f8       	bld	r10, 1
    104c:	bb 24       	eor	r11, r11
                 y = 3;
                break;
    104e:	aa c1       	rjmp	.+852    	; 0x13a4 <create_LR_path+0x442>
        case 8 : 
                 x = 2;
                 y = 1;
    1050:	c8 2c       	mov	r12, r8
    1052:	d9 2c       	mov	r13, r9
        case 7 : 
                 x = 2;
                 y = 3;
                break;
        case 8 : 
                 x = 2;
    1054:	aa 24       	eor	r10, r10
    1056:	68 94       	set
    1058:	a1 f8       	bld	r10, 1
    105a:	bb 24       	eor	r11, r11
                 y = 1;
                break;
    105c:	a3 c1       	rjmp	.+838    	; 0x13a4 <create_LR_path+0x442>
        case 9 : 
                 x = 2;
                 y = -1;
    105e:	cc 24       	eor	r12, r12
    1060:	ca 94       	dec	r12
    1062:	dd 24       	eor	r13, r13
    1064:	da 94       	dec	r13
        case 8 : 
                 x = 2;
                 y = 1;
                break;
        case 9 : 
                 x = 2;
    1066:	aa 24       	eor	r10, r10
    1068:	68 94       	set
    106a:	a1 f8       	bld	r10, 1
    106c:	bb 24       	eor	r11, r11
                 y = -1;
                break;
    106e:	9a c1       	rjmp	.+820    	; 0x13a4 <create_LR_path+0x442>
        case 10 : 
                 x = 2;
                 y = -3;
    1070:	0f 2e       	mov	r0, r31
    1072:	fd ef       	ldi	r31, 0xFD	; 253
    1074:	cf 2e       	mov	r12, r31
    1076:	f0 2d       	mov	r31, r0
    1078:	dd 24       	eor	r13, r13
    107a:	da 94       	dec	r13
        case 9 : 
                 x = 2;
                 y = -1;
                break;
        case 10 : 
                 x = 2;
    107c:	aa 24       	eor	r10, r10
    107e:	68 94       	set
    1080:	a1 f8       	bld	r10, 1
    1082:	bb 24       	eor	r11, r11
                 y = -3;
                break;
    1084:	8f c1       	rjmp	.+798    	; 0x13a4 <create_LR_path+0x442>
        case 11 : 
                 x = 3;
                 y = 4;
    1086:	c2 2c       	mov	r12, r2
    1088:	d3 2c       	mov	r13, r3
        case 10 : 
                 x = 2;
                 y = -3;
                break;
        case 11 : 
                 x = 3;
    108a:	a0 2e       	mov	r10, r16
    108c:	b1 2e       	mov	r11, r17
                 y = 4;
                break;
    108e:	8a c1       	rjmp	.+788    	; 0x13a4 <create_LR_path+0x442>
        case 12 : 
                 x = 3;
                 y = 2;
    1090:	cc 24       	eor	r12, r12
    1092:	68 94       	set
    1094:	c1 f8       	bld	r12, 1
    1096:	dd 24       	eor	r13, r13
        case 11 : 
                 x = 3;
                 y = 4;
                break;
        case 12 : 
                 x = 3;
    1098:	a0 2e       	mov	r10, r16
    109a:	b1 2e       	mov	r11, r17
                 y = 2;
                break;
    109c:	83 c1       	rjmp	.+774    	; 0x13a4 <create_LR_path+0x442>
        case 13 : 
                 x = 3;
                 y = 0;
    109e:	cc 24       	eor	r12, r12
    10a0:	dd 24       	eor	r13, r13
        case 12 : 
                 x = 3;
                 y = 2;
                break;
        case 13 : 
                 x = 3;
    10a2:	a0 2e       	mov	r10, r16
    10a4:	b1 2e       	mov	r11, r17
                 y = 0;
                 break;
    10a6:	7e c1       	rjmp	.+764    	; 0x13a4 <create_LR_path+0x442>
        case 14 : 
                 x = 3;
                 y = -2;
    10a8:	0f 2e       	mov	r0, r31
    10aa:	fe ef       	ldi	r31, 0xFE	; 254
    10ac:	cf 2e       	mov	r12, r31
    10ae:	f0 2d       	mov	r31, r0
    10b0:	dd 24       	eor	r13, r13
    10b2:	da 94       	dec	r13
        case 13 : 
                 x = 3;
                 y = 0;
                 break;
        case 14 : 
                 x = 3;
    10b4:	a0 2e       	mov	r10, r16
    10b6:	b1 2e       	mov	r11, r17
                 y = -2;
                break;
    10b8:	75 c1       	rjmp	.+746    	; 0x13a4 <create_LR_path+0x442>
        case 15 : 
                 x = 3;
                 y = -4;
    10ba:	0f 2e       	mov	r0, r31
    10bc:	fc ef       	ldi	r31, 0xFC	; 252
    10be:	cf 2e       	mov	r12, r31
    10c0:	f0 2d       	mov	r31, r0
    10c2:	dd 24       	eor	r13, r13
    10c4:	da 94       	dec	r13
        case 14 : 
                 x = 3;
                 y = -2;
                break;
        case 15 : 
                 x = 3;
    10c6:	a0 2e       	mov	r10, r16
    10c8:	b1 2e       	mov	r11, r17
                 y = -4;
                 break;
    10ca:	6c c1       	rjmp	.+728    	; 0x13a4 <create_LR_path+0x442>
        case 16 : 
                 x = 4;
                 y = 4;
    10cc:	c2 2c       	mov	r12, r2
    10ce:	d3 2c       	mov	r13, r3
        case 15 : 
                 x = 3;
                 y = -4;
                 break;
        case 16 : 
                 x = 4;
    10d0:	a2 2c       	mov	r10, r2
    10d2:	b3 2c       	mov	r11, r3
                 y = 4;
                 break;
    10d4:	67 c1       	rjmp	.+718    	; 0x13a4 <create_LR_path+0x442>
        case 17 : 
                 x = 4;
                 y = 2;
    10d6:	cc 24       	eor	r12, r12
    10d8:	68 94       	set
    10da:	c1 f8       	bld	r12, 1
    10dc:	dd 24       	eor	r13, r13
        case 16 : 
                 x = 4;
                 y = 4;
                 break;
        case 17 : 
                 x = 4;
    10de:	a2 2c       	mov	r10, r2
    10e0:	b3 2c       	mov	r11, r3
                 y = 2;
                break;
    10e2:	60 c1       	rjmp	.+704    	; 0x13a4 <create_LR_path+0x442>
        case 18 : 
                 x = 4;
                 y = 0;
    10e4:	cc 24       	eor	r12, r12
    10e6:	dd 24       	eor	r13, r13
        case 17 : 
                 x = 4;
                 y = 2;
                break;
        case 18 : 
                 x = 4;
    10e8:	a2 2c       	mov	r10, r2
    10ea:	b3 2c       	mov	r11, r3
                 y = 0;
                break;
    10ec:	5b c1       	rjmp	.+694    	; 0x13a4 <create_LR_path+0x442>
        case 19 : 
                 x = 4;
                 y = -2;
    10ee:	0f 2e       	mov	r0, r31
    10f0:	fe ef       	ldi	r31, 0xFE	; 254
    10f2:	cf 2e       	mov	r12, r31
    10f4:	f0 2d       	mov	r31, r0
    10f6:	dd 24       	eor	r13, r13
    10f8:	da 94       	dec	r13
        case 18 : 
                 x = 4;
                 y = 0;
                break;
        case 19 : 
                 x = 4;
    10fa:	a2 2c       	mov	r10, r2
    10fc:	b3 2c       	mov	r11, r3
                 y = -2;
                break;
    10fe:	52 c1       	rjmp	.+676    	; 0x13a4 <create_LR_path+0x442>
        case 20 : 
                 x = 4;
                 y = -4;
    1100:	0f 2e       	mov	r0, r31
    1102:	fc ef       	ldi	r31, 0xFC	; 252
    1104:	cf 2e       	mov	r12, r31
    1106:	f0 2d       	mov	r31, r0
    1108:	dd 24       	eor	r13, r13
    110a:	da 94       	dec	r13
        case 19 : 
                 x = 4;
                 y = -2;
                break;
        case 20 : 
                 x = 4;
    110c:	a2 2c       	mov	r10, r2
    110e:	b3 2c       	mov	r11, r3
                 y = -4;
                 break;
    1110:	49 c1       	rjmp	.+658    	; 0x13a4 <create_LR_path+0x442>
        case 21 : 
                 x = 5;
                 y = 5;
    1112:	0f 2e       	mov	r0, r31
    1114:	f5 e0       	ldi	r31, 0x05	; 5
    1116:	cf 2e       	mov	r12, r31
    1118:	f0 2d       	mov	r31, r0
    111a:	dd 24       	eor	r13, r13
        case 20 : 
                 x = 4;
                 y = -4;
                 break;
        case 21 : 
                 x = 5;
    111c:	0f 2e       	mov	r0, r31
    111e:	f5 e0       	ldi	r31, 0x05	; 5
    1120:	af 2e       	mov	r10, r31
    1122:	f0 2d       	mov	r31, r0
    1124:	bb 24       	eor	r11, r11
                 y = 5;
                break;
    1126:	3e c1       	rjmp	.+636    	; 0x13a4 <create_LR_path+0x442>
        case 22 : 
                 x = 5;
                 y = 3;
    1128:	c0 2e       	mov	r12, r16
    112a:	d1 2e       	mov	r13, r17
        case 21 : 
                 x = 5;
                 y = 5;
                break;
        case 22 : 
                 x = 5;
    112c:	0f 2e       	mov	r0, r31
    112e:	f5 e0       	ldi	r31, 0x05	; 5
    1130:	af 2e       	mov	r10, r31
    1132:	f0 2d       	mov	r31, r0
    1134:	bb 24       	eor	r11, r11
                 y = 3;
                break;
    1136:	36 c1       	rjmp	.+620    	; 0x13a4 <create_LR_path+0x442>
        case 23 : 
                 x = 5;
                 y = 1;
    1138:	c8 2c       	mov	r12, r8
    113a:	d9 2c       	mov	r13, r9
        case 22 : 
                 x = 5;
                 y = 3;
                break;
        case 23 : 
                 x = 5;
    113c:	0f 2e       	mov	r0, r31
    113e:	f5 e0       	ldi	r31, 0x05	; 5
    1140:	af 2e       	mov	r10, r31
    1142:	f0 2d       	mov	r31, r0
    1144:	bb 24       	eor	r11, r11
                 y = 1;
                break;
    1146:	2e c1       	rjmp	.+604    	; 0x13a4 <create_LR_path+0x442>
        case 24 : 
                 x = 5;
                 y = -1;
    1148:	cc 24       	eor	r12, r12
    114a:	ca 94       	dec	r12
    114c:	dd 24       	eor	r13, r13
    114e:	da 94       	dec	r13
        case 23 : 
                 x = 5;
                 y = 1;
                break;
        case 24 : 
                 x = 5;
    1150:	0f 2e       	mov	r0, r31
    1152:	f5 e0       	ldi	r31, 0x05	; 5
    1154:	af 2e       	mov	r10, r31
    1156:	f0 2d       	mov	r31, r0
    1158:	bb 24       	eor	r11, r11
                 y = -1;
                break;
    115a:	24 c1       	rjmp	.+584    	; 0x13a4 <create_LR_path+0x442>
        case 25 : 
                 x = 5;
                 y = -3;
    115c:	0f 2e       	mov	r0, r31
    115e:	fd ef       	ldi	r31, 0xFD	; 253
    1160:	cf 2e       	mov	r12, r31
    1162:	f0 2d       	mov	r31, r0
    1164:	dd 24       	eor	r13, r13
    1166:	da 94       	dec	r13
        case 24 : 
                 x = 5;
                 y = -1;
                break;
        case 25 : 
                 x = 5;
    1168:	0f 2e       	mov	r0, r31
    116a:	f5 e0       	ldi	r31, 0x05	; 5
    116c:	af 2e       	mov	r10, r31
    116e:	f0 2d       	mov	r31, r0
    1170:	bb 24       	eor	r11, r11
                 y = -3;
                break;
    1172:	18 c1       	rjmp	.+560    	; 0x13a4 <create_LR_path+0x442>
        case 26 : 
                 x = 5;
                 y = -5;
    1174:	0f 2e       	mov	r0, r31
    1176:	fb ef       	ldi	r31, 0xFB	; 251
    1178:	cf 2e       	mov	r12, r31
    117a:	f0 2d       	mov	r31, r0
    117c:	dd 24       	eor	r13, r13
    117e:	da 94       	dec	r13
        case 25 : 
                 x = 5;
                 y = -3;
                break;
        case 26 : 
                 x = 5;
    1180:	0f 2e       	mov	r0, r31
    1182:	f5 e0       	ldi	r31, 0x05	; 5
    1184:	af 2e       	mov	r10, r31
    1186:	f0 2d       	mov	r31, r0
    1188:	bb 24       	eor	r11, r11
                 y = -5;
                break;
    118a:	0c c1       	rjmp	.+536    	; 0x13a4 <create_LR_path+0x442>
        case 27 : 
                 x = 6;
                 y = 5;
    118c:	0f 2e       	mov	r0, r31
    118e:	f5 e0       	ldi	r31, 0x05	; 5
    1190:	cf 2e       	mov	r12, r31
    1192:	f0 2d       	mov	r31, r0
    1194:	dd 24       	eor	r13, r13
        case 26 : 
                 x = 5;
                 y = -5;
                break;
        case 27 : 
                 x = 6;
    1196:	0f 2e       	mov	r0, r31
    1198:	f6 e0       	ldi	r31, 0x06	; 6
    119a:	af 2e       	mov	r10, r31
    119c:	f0 2d       	mov	r31, r0
    119e:	bb 24       	eor	r11, r11
                 y = 5;
                break;
    11a0:	01 c1       	rjmp	.+514    	; 0x13a4 <create_LR_path+0x442>
        case 28 : 
                 x = 6;
                 y = 3;
    11a2:	c0 2e       	mov	r12, r16
    11a4:	d1 2e       	mov	r13, r17
        case 27 : 
                 x = 6;
                 y = 5;
                break;
        case 28 : 
                 x = 6;
    11a6:	0f 2e       	mov	r0, r31
    11a8:	f6 e0       	ldi	r31, 0x06	; 6
    11aa:	af 2e       	mov	r10, r31
    11ac:	f0 2d       	mov	r31, r0
    11ae:	bb 24       	eor	r11, r11
                 y = 3;
                break;
    11b0:	f9 c0       	rjmp	.+498    	; 0x13a4 <create_LR_path+0x442>
        case 29 : 
                 x = 6;
                 y = 1;
    11b2:	c8 2c       	mov	r12, r8
    11b4:	d9 2c       	mov	r13, r9
        case 28 : 
                 x = 6;
                 y = 3;
                break;
        case 29 : 
                 x = 6;
    11b6:	0f 2e       	mov	r0, r31
    11b8:	f6 e0       	ldi	r31, 0x06	; 6
    11ba:	af 2e       	mov	r10, r31
    11bc:	f0 2d       	mov	r31, r0
    11be:	bb 24       	eor	r11, r11
                 y = 1;
                break;
    11c0:	f1 c0       	rjmp	.+482    	; 0x13a4 <create_LR_path+0x442>
        case 30 : 
                 x = 6;
                 y = -1;
    11c2:	cc 24       	eor	r12, r12
    11c4:	ca 94       	dec	r12
    11c6:	dd 24       	eor	r13, r13
    11c8:	da 94       	dec	r13
        case 29 : 
                 x = 6;
                 y = 1;
                break;
        case 30 : 
                 x = 6;
    11ca:	0f 2e       	mov	r0, r31
    11cc:	f6 e0       	ldi	r31, 0x06	; 6
    11ce:	af 2e       	mov	r10, r31
    11d0:	f0 2d       	mov	r31, r0
    11d2:	bb 24       	eor	r11, r11
                 y = -1;
                break;
    11d4:	e7 c0       	rjmp	.+462    	; 0x13a4 <create_LR_path+0x442>
        case 31 : 
                 x = 6;
                 y = -3;
    11d6:	0f 2e       	mov	r0, r31
    11d8:	fd ef       	ldi	r31, 0xFD	; 253
    11da:	cf 2e       	mov	r12, r31
    11dc:	f0 2d       	mov	r31, r0
    11de:	dd 24       	eor	r13, r13
    11e0:	da 94       	dec	r13
        case 30 : 
                 x = 6;
                 y = -1;
                break;
        case 31 : 
                 x = 6;
    11e2:	0f 2e       	mov	r0, r31
    11e4:	f6 e0       	ldi	r31, 0x06	; 6
    11e6:	af 2e       	mov	r10, r31
    11e8:	f0 2d       	mov	r31, r0
    11ea:	bb 24       	eor	r11, r11
                 y = -3;
                break;
    11ec:	db c0       	rjmp	.+438    	; 0x13a4 <create_LR_path+0x442>
        case 32 : 
                 x = 6;
                 y = -5;
    11ee:	0f 2e       	mov	r0, r31
    11f0:	fb ef       	ldi	r31, 0xFB	; 251
    11f2:	cf 2e       	mov	r12, r31
    11f4:	f0 2d       	mov	r31, r0
    11f6:	dd 24       	eor	r13, r13
    11f8:	da 94       	dec	r13
        case 31 : 
                 x = 6;
                 y = -3;
                break;
        case 32 : 
                 x = 6;
    11fa:	0f 2e       	mov	r0, r31
    11fc:	f6 e0       	ldi	r31, 0x06	; 6
    11fe:	af 2e       	mov	r10, r31
    1200:	f0 2d       	mov	r31, r0
    1202:	bb 24       	eor	r11, r11
                 y = -5;
                break;
    1204:	cf c0       	rjmp	.+414    	; 0x13a4 <create_LR_path+0x442>
        case 33 : 
                 x = 7;
                 y = 4;
    1206:	c2 2c       	mov	r12, r2
    1208:	d3 2c       	mov	r13, r3
        case 32 : 
                 x = 6;
                 y = -5;
                break;
        case 33 : 
                 x = 7;
    120a:	0f 2e       	mov	r0, r31
    120c:	f7 e0       	ldi	r31, 0x07	; 7
    120e:	af 2e       	mov	r10, r31
    1210:	f0 2d       	mov	r31, r0
    1212:	bb 24       	eor	r11, r11
                 y = 4;
                break;
    1214:	c7 c0       	rjmp	.+398    	; 0x13a4 <create_LR_path+0x442>
        case 34 : 
                 x = 7;
                 y = 2;
    1216:	cc 24       	eor	r12, r12
    1218:	68 94       	set
    121a:	c1 f8       	bld	r12, 1
    121c:	dd 24       	eor	r13, r13
        case 33 : 
                 x = 7;
                 y = 4;
                break;
        case 34 : 
                 x = 7;
    121e:	0f 2e       	mov	r0, r31
    1220:	f7 e0       	ldi	r31, 0x07	; 7
    1222:	af 2e       	mov	r10, r31
    1224:	f0 2d       	mov	r31, r0
    1226:	bb 24       	eor	r11, r11
                 y = 2;
                break;
    1228:	bd c0       	rjmp	.+378    	; 0x13a4 <create_LR_path+0x442>
        case 35 : 
                 x = 7;
                 y = 0;
    122a:	cc 24       	eor	r12, r12
    122c:	dd 24       	eor	r13, r13
        case 34 : 
                 x = 7;
                 y = 2;
                break;
        case 35 : 
                 x = 7;
    122e:	0f 2e       	mov	r0, r31
    1230:	f7 e0       	ldi	r31, 0x07	; 7
    1232:	af 2e       	mov	r10, r31
    1234:	f0 2d       	mov	r31, r0
    1236:	bb 24       	eor	r11, r11
                 y = 0;
                break;
    1238:	b5 c0       	rjmp	.+362    	; 0x13a4 <create_LR_path+0x442>
        case 36 : 
                 x = 7;
                 y = -2;
    123a:	0f 2e       	mov	r0, r31
    123c:	fe ef       	ldi	r31, 0xFE	; 254
    123e:	cf 2e       	mov	r12, r31
    1240:	f0 2d       	mov	r31, r0
    1242:	dd 24       	eor	r13, r13
    1244:	da 94       	dec	r13
        case 35 : 
                 x = 7;
                 y = 0;
                break;
        case 36 : 
                 x = 7;
    1246:	0f 2e       	mov	r0, r31
    1248:	f7 e0       	ldi	r31, 0x07	; 7
    124a:	af 2e       	mov	r10, r31
    124c:	f0 2d       	mov	r31, r0
    124e:	bb 24       	eor	r11, r11
                 y = -2;
                break;
    1250:	a9 c0       	rjmp	.+338    	; 0x13a4 <create_LR_path+0x442>
        case 37 : 
                 x = 7;
                 y = -4;
    1252:	0f 2e       	mov	r0, r31
    1254:	fc ef       	ldi	r31, 0xFC	; 252
    1256:	cf 2e       	mov	r12, r31
    1258:	f0 2d       	mov	r31, r0
    125a:	dd 24       	eor	r13, r13
    125c:	da 94       	dec	r13
        case 36 : 
                 x = 7;
                 y = -2;
                break;
        case 37 : 
                 x = 7;
    125e:	0f 2e       	mov	r0, r31
    1260:	f7 e0       	ldi	r31, 0x07	; 7
    1262:	af 2e       	mov	r10, r31
    1264:	f0 2d       	mov	r31, r0
    1266:	bb 24       	eor	r11, r11
                 y = -4;
                break;
    1268:	9d c0       	rjmp	.+314    	; 0x13a4 <create_LR_path+0x442>
        case 38 : 
                 x = 8;
                 y = 4;
    126a:	c2 2c       	mov	r12, r2
    126c:	d3 2c       	mov	r13, r3
        case 37 : 
                 x = 7;
                 y = -4;
                break;
        case 38 : 
                 x = 8;
    126e:	aa 24       	eor	r10, r10
    1270:	68 94       	set
    1272:	a3 f8       	bld	r10, 3
    1274:	bb 24       	eor	r11, r11
                 y = 4;
                break;
    1276:	96 c0       	rjmp	.+300    	; 0x13a4 <create_LR_path+0x442>
        case 39 : 
                 x = 8;
                 y = 2;
    1278:	cc 24       	eor	r12, r12
    127a:	68 94       	set
    127c:	c1 f8       	bld	r12, 1
    127e:	dd 24       	eor	r13, r13
        case 38 : 
                 x = 8;
                 y = 4;
                break;
        case 39 : 
                 x = 8;
    1280:	aa 24       	eor	r10, r10
    1282:	68 94       	set
    1284:	a3 f8       	bld	r10, 3
    1286:	bb 24       	eor	r11, r11
                 y = 2;
                break;
    1288:	8d c0       	rjmp	.+282    	; 0x13a4 <create_LR_path+0x442>
        case 40 : 
                 x = 8;
                 y = 0;
    128a:	cc 24       	eor	r12, r12
    128c:	dd 24       	eor	r13, r13
        case 39 : 
                 x = 8;
                 y = 2;
                break;
        case 40 : 
                 x = 8;
    128e:	aa 24       	eor	r10, r10
    1290:	68 94       	set
    1292:	a3 f8       	bld	r10, 3
    1294:	bb 24       	eor	r11, r11
                 y = 0;
                break;
    1296:	86 c0       	rjmp	.+268    	; 0x13a4 <create_LR_path+0x442>
        case 41 : 
                 x = 8;
                 y = -2;
    1298:	0f 2e       	mov	r0, r31
    129a:	fe ef       	ldi	r31, 0xFE	; 254
    129c:	cf 2e       	mov	r12, r31
    129e:	f0 2d       	mov	r31, r0
    12a0:	dd 24       	eor	r13, r13
    12a2:	da 94       	dec	r13
        case 40 : 
                 x = 8;
                 y = 0;
                break;
        case 41 : 
                 x = 8;
    12a4:	aa 24       	eor	r10, r10
    12a6:	68 94       	set
    12a8:	a3 f8       	bld	r10, 3
    12aa:	bb 24       	eor	r11, r11
                 y = -2;
                break;
    12ac:	7b c0       	rjmp	.+246    	; 0x13a4 <create_LR_path+0x442>
        case 42 : 
                 x = 8;
                 y = -4;
    12ae:	0f 2e       	mov	r0, r31
    12b0:	fc ef       	ldi	r31, 0xFC	; 252
    12b2:	cf 2e       	mov	r12, r31
    12b4:	f0 2d       	mov	r31, r0
    12b6:	dd 24       	eor	r13, r13
    12b8:	da 94       	dec	r13
        case 41 : 
                 x = 8;
                 y = -2;
                break;
        case 42 : 
                 x = 8;
    12ba:	aa 24       	eor	r10, r10
    12bc:	68 94       	set
    12be:	a3 f8       	bld	r10, 3
    12c0:	bb 24       	eor	r11, r11
                 y = -4;
                break;
    12c2:	70 c0       	rjmp	.+224    	; 0x13a4 <create_LR_path+0x442>
        case 43 : 
                 x = 9;
                 y = 3;
    12c4:	c0 2e       	mov	r12, r16
    12c6:	d1 2e       	mov	r13, r17
        case 42 : 
                 x = 8;
                 y = -4;
                break;
        case 43 : 
                 x = 9;
    12c8:	0f 2e       	mov	r0, r31
    12ca:	f9 e0       	ldi	r31, 0x09	; 9
    12cc:	af 2e       	mov	r10, r31
    12ce:	f0 2d       	mov	r31, r0
    12d0:	bb 24       	eor	r11, r11
                 y = 3;
                break;
    12d2:	68 c0       	rjmp	.+208    	; 0x13a4 <create_LR_path+0x442>
        case 44 : 
                 x = 9;
                 y = 1;
    12d4:	c8 2c       	mov	r12, r8
    12d6:	d9 2c       	mov	r13, r9
        case 43 : 
                 x = 9;
                 y = 3;
                break;
        case 44 : 
                 x = 9;
    12d8:	0f 2e       	mov	r0, r31
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	af 2e       	mov	r10, r31
    12de:	f0 2d       	mov	r31, r0
    12e0:	bb 24       	eor	r11, r11
                 y = 1;
                break;
    12e2:	60 c0       	rjmp	.+192    	; 0x13a4 <create_LR_path+0x442>
        case 45 : 
                 x = 9;
                 y = -1;
    12e4:	cc 24       	eor	r12, r12
    12e6:	ca 94       	dec	r12
    12e8:	dd 24       	eor	r13, r13
    12ea:	da 94       	dec	r13
        case 44 : 
                 x = 9;
                 y = 1;
                break;
        case 45 : 
                 x = 9;
    12ec:	0f 2e       	mov	r0, r31
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	af 2e       	mov	r10, r31
    12f2:	f0 2d       	mov	r31, r0
    12f4:	bb 24       	eor	r11, r11
                 y = -1;
                break;
    12f6:	56 c0       	rjmp	.+172    	; 0x13a4 <create_LR_path+0x442>
        case 46 : 
                 x = 9;
                 y = -3;
    12f8:	0f 2e       	mov	r0, r31
    12fa:	fd ef       	ldi	r31, 0xFD	; 253
    12fc:	cf 2e       	mov	r12, r31
    12fe:	f0 2d       	mov	r31, r0
    1300:	dd 24       	eor	r13, r13
    1302:	da 94       	dec	r13
        case 45 : 
                 x = 9;
                 y = -1;
                break;
        case 46 : 
                 x = 9;
    1304:	0f 2e       	mov	r0, r31
    1306:	f9 e0       	ldi	r31, 0x09	; 9
    1308:	af 2e       	mov	r10, r31
    130a:	f0 2d       	mov	r31, r0
    130c:	bb 24       	eor	r11, r11
                 y = -3;
                break;
    130e:	4a c0       	rjmp	.+148    	; 0x13a4 <create_LR_path+0x442>
        case 47 : 
                 x = 10;
                 y = 3;
    1310:	c0 2e       	mov	r12, r16
    1312:	d1 2e       	mov	r13, r17
        case 46 : 
                 x = 9;
                 y = -3;
                break;
        case 47 : 
                 x = 10;
    1314:	0f 2e       	mov	r0, r31
    1316:	fa e0       	ldi	r31, 0x0A	; 10
    1318:	af 2e       	mov	r10, r31
    131a:	f0 2d       	mov	r31, r0
    131c:	bb 24       	eor	r11, r11
                 y = 3;
                break;
    131e:	42 c0       	rjmp	.+132    	; 0x13a4 <create_LR_path+0x442>
        case 48 : 
                 x = 10;
                 y = 1;
    1320:	c8 2c       	mov	r12, r8
    1322:	d9 2c       	mov	r13, r9
        case 47 : 
                 x = 10;
                 y = 3;
                break;
        case 48 : 
                 x = 10;
    1324:	0f 2e       	mov	r0, r31
    1326:	fa e0       	ldi	r31, 0x0A	; 10
    1328:	af 2e       	mov	r10, r31
    132a:	f0 2d       	mov	r31, r0
    132c:	bb 24       	eor	r11, r11
                 y = 1;
                break;
    132e:	3a c0       	rjmp	.+116    	; 0x13a4 <create_LR_path+0x442>
        case 49 : 
                 x = 10;
                 y = -1;
    1330:	cc 24       	eor	r12, r12
    1332:	ca 94       	dec	r12
    1334:	dd 24       	eor	r13, r13
    1336:	da 94       	dec	r13
        case 48 : 
                 x = 10;
                 y = 1;
                break;
        case 49 : 
                 x = 10;
    1338:	0f 2e       	mov	r0, r31
    133a:	fa e0       	ldi	r31, 0x0A	; 10
    133c:	af 2e       	mov	r10, r31
    133e:	f0 2d       	mov	r31, r0
    1340:	bb 24       	eor	r11, r11
                 y = -1;
                 break;
    1342:	30 c0       	rjmp	.+96     	; 0x13a4 <create_LR_path+0x442>
        case 50 : 
                 x = 10;
                 y = -3;
    1344:	0f 2e       	mov	r0, r31
    1346:	fd ef       	ldi	r31, 0xFD	; 253
    1348:	cf 2e       	mov	r12, r31
    134a:	f0 2d       	mov	r31, r0
    134c:	dd 24       	eor	r13, r13
    134e:	da 94       	dec	r13
        case 49 : 
                 x = 10;
                 y = -1;
                 break;
        case 50 : 
                 x = 10;
    1350:	0f 2e       	mov	r0, r31
    1352:	fa e0       	ldi	r31, 0x0A	; 10
    1354:	af 2e       	mov	r10, r31
    1356:	f0 2d       	mov	r31, r0
    1358:	bb 24       	eor	r11, r11
                 y = -3;
                break;
    135a:	24 c0       	rjmp	.+72     	; 0x13a4 <create_LR_path+0x442>
        case 51 : 
                 x = 11;
                 y = 2;
    135c:	cc 24       	eor	r12, r12
    135e:	68 94       	set
    1360:	c1 f8       	bld	r12, 1
    1362:	dd 24       	eor	r13, r13
        case 50 : 
                 x = 10;
                 y = -3;
                break;
        case 51 : 
                 x = 11;
    1364:	0f 2e       	mov	r0, r31
    1366:	fb e0       	ldi	r31, 0x0B	; 11
    1368:	af 2e       	mov	r10, r31
    136a:	f0 2d       	mov	r31, r0
    136c:	bb 24       	eor	r11, r11
                 y = 2;
                break;
    136e:	1a c0       	rjmp	.+52     	; 0x13a4 <create_LR_path+0x442>
        case 52 : 
                 x = 11;
                 y = 0;
    1370:	cc 24       	eor	r12, r12
    1372:	dd 24       	eor	r13, r13
        case 51 : 
                 x = 11;
                 y = 2;
                break;
        case 52 : 
                 x = 11;
    1374:	0f 2e       	mov	r0, r31
    1376:	fb e0       	ldi	r31, 0x0B	; 11
    1378:	af 2e       	mov	r10, r31
    137a:	f0 2d       	mov	r31, r0
    137c:	bb 24       	eor	r11, r11
                 y = 0;
                 break;
    137e:	12 c0       	rjmp	.+36     	; 0x13a4 <create_LR_path+0x442>
        case 53 : 
                 x = 11;
                 y = -2;
    1380:	0f 2e       	mov	r0, r31
    1382:	fe ef       	ldi	r31, 0xFE	; 254
    1384:	cf 2e       	mov	r12, r31
    1386:	f0 2d       	mov	r31, r0
    1388:	dd 24       	eor	r13, r13
    138a:	da 94       	dec	r13
        case 52 : 
                 x = 11;
                 y = 0;
                 break;
        case 53 : 
                 x = 11;
    138c:	0f 2e       	mov	r0, r31
    138e:	fb e0       	ldi	r31, 0x0B	; 11
    1390:	af 2e       	mov	r10, r31
    1392:	f0 2d       	mov	r31, r0
    1394:	bb 24       	eor	r11, r11
                 y = -2;
                break;
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <create_LR_path+0x442>
            }
            switch(vertex_path_array[k])
    {
        case 0 : 
                x = 0; 
                y = 2;
    1398:	cc 24       	eor	r12, r12
    139a:	68 94       	set
    139c:	c1 f8       	bld	r12, 1
    139e:	dd 24       	eor	r13, r13
              k = i+1;  
            }
            switch(vertex_path_array[k])
    {
        case 0 : 
                x = 0; 
    13a0:	aa 24       	eor	r10, r10
    13a2:	bb 24       	eor	r11, r11
                 y = -2;
                break;
       default : // Error: Not generating coordinates 
                 break;
    }
    if(k == i ){
    13a4:	2a 17       	cp	r18, r26
    13a6:	3b 07       	cpc	r19, r27
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <create_LR_path+0x450>
    13aa:	cf 82       	std	Y+7, r12	; 0x07
    13ac:	d8 86       	std	Y+8, r13	; 0x08
    13ae:	ab 82       	std	Y+3, r10	; 0x03
    13b0:	bc 82       	std	Y+4, r11	; 0x04
              x1 = x;
              y1 = y;
    }
    if(k == (i+1)){
    13b2:	86 2f       	mov	r24, r22
    13b4:	97 2f       	mov	r25, r23
    13b6:	e2 16       	cp	r14, r18
    13b8:	f3 06       	cpc	r15, r19
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <create_LR_path+0x462>
    13bc:	5c 2c       	mov	r5, r12
    13be:	7d 2c       	mov	r7, r13
    13c0:	ad 82       	std	Y+5, r10	; 0x05
    13c2:	be 82       	std	Y+6, r11	; 0x06
              x2 = x;
              y2 = y;
    }
    j++;
    13c4:	4f 5f       	subi	r20, 0xFF	; 255
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
 int y_coordinate_difference;
 
    dijkstra(graph,initial_vertex,final_vertex,2);
     for(int i = 0; i < vertex_path_array_counter; i++){
         j = 1;
         while(j<=2)
    13c8:	43 30       	cpi	r20, 0x03	; 3
    13ca:	51 05       	cpc	r21, r1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <create_LR_path+0x46e>
    13ce:	f4 cd       	rjmp	.-1048   	; 0xfb8 <create_LR_path+0x56>
    13d0:	4c 01       	movw	r8, r24
    13d2:	45 2d       	mov	r20, r5
    13d4:	57 2d       	mov	r21, r7
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	2b 81       	ldd	r18, Y+3	; 0x03
    13e0:	3c 81       	ldd	r19, Y+4	; 0x04
              y2 = y;
    }
    j++;
        }
        
        x_coordinate_difference = x2 - x1;
    13e2:	8c 01       	movw	r16, r24
    13e4:	02 1b       	sub	r16, r18
    13e6:	13 0b       	sbc	r17, r19
        y_coordinate_difference = y2 - y1;                             
    13e8:	1a 01       	movw	r2, r20
    13ea:	26 1a       	sub	r2, r22
    13ec:	37 0a       	sbc	r3, r23
      
        check_edge_case(x_coordinate_difference, y_coordinate_difference);
    13ee:	c8 01       	movw	r24, r16
    13f0:	b1 01       	movw	r22, r2
    13f2:	0e 94 57 06 	call	0xcae	; 0xcae <check_edge_case>
 
 // x+ , y+
        if((x_coordinate_difference > 0 && y_coordinate_difference > 0) && (front_axis == 1)){
    13f6:	10 16       	cp	r1, r16
    13f8:	11 06       	cpc	r1, r17
    13fa:	0c f0       	brlt	.+2      	; 0x13fe <create_LR_path+0x49c>
    13fc:	72 c0       	rjmp	.+228    	; 0x14e2 <create_LR_path+0x580>
    13fe:	12 14       	cp	r1, r2
    1400:	13 04       	cpc	r1, r3
    1402:	24 f5       	brge	.+72     	; 0x144c <create_LR_path+0x4ea>
    1404:	80 91 7f 04 	lds	r24, 0x047F
    1408:	90 91 80 04 	lds	r25, 0x0480
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	59 f4       	brne	.+22     	; 0x1428 <create_LR_path+0x4c6>
            LR_path_counter++;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
            LR_path[LR_path_counter] = 'L';
    141c:	fc 01       	movw	r30, r24
    141e:	ed 5a       	subi	r30, 0xAD	; 173
    1420:	fa 4f       	sbci	r31, 0xFA	; 250
    1422:	8c e4       	ldi	r24, 0x4C	; 76
    1424:	80 83       	st	Z, r24
    1426:	d1 c0       	rjmp	.+418    	; 0x15ca <create_LR_path+0x668>
        }
        else if((x_coordinate_difference > 0 && y_coordinate_difference > 0) && (front_axis == 2)){
    1428:	80 91 7f 04 	lds	r24, 0x047F
    142c:	90 91 80 04 	lds	r25, 0x0480
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	91 05       	cpc	r25, r1
    1434:	59 f4       	brne	.+22     	; 0x144c <create_LR_path+0x4ea>
            LR_path_counter++;
    1436:	a9 81       	ldd	r26, Y+1	; 0x01
    1438:	ba 81       	ldd	r27, Y+2	; 0x02
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	ba 83       	std	Y+2, r27	; 0x02
    143e:	a9 83       	std	Y+1, r26	; 0x01
            LR_path[LR_path_counter] = 'R';
    1440:	fd 01       	movw	r30, r26
    1442:	ed 5a       	subi	r30, 0xAD	; 173
    1444:	fa 4f       	sbci	r31, 0xFA	; 250
    1446:	82 e5       	ldi	r24, 0x52	; 82
    1448:	80 83       	st	Z, r24
    144a:	bf c0       	rjmp	.+382    	; 0x15ca <create_LR_path+0x668>
        }
        //x+ , y = k
        else if((x_coordinate_difference > 0 && y_coordinate_difference == 0) && (front_axis == 3)){
    144c:	21 14       	cp	r2, r1
    144e:	31 04       	cpc	r3, r1
    1450:	19 f5       	brne	.+70     	; 0x1498 <create_LR_path+0x536>
    1452:	80 91 7f 04 	lds	r24, 0x047F
    1456:	90 91 80 04 	lds	r25, 0x0480
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	91 05       	cpc	r25, r1
    145e:	51 f4       	brne	.+20     	; 0x1474 <create_LR_path+0x512>
            LR_path_counter++;
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	31 96       	adiw	r30, 0x01	; 1
    1466:	fa 83       	std	Y+2, r31	; 0x02
    1468:	e9 83       	std	Y+1, r30	; 0x01
            LR_path[LR_path_counter] = 'R';
    146a:	ed 5a       	subi	r30, 0xAD	; 173
    146c:	fa 4f       	sbci	r31, 0xFA	; 250
    146e:	82 e5       	ldi	r24, 0x52	; 82
    1470:	80 83       	st	Z, r24
    1472:	ab c0       	rjmp	.+342    	; 0x15ca <create_LR_path+0x668>
        }
        else if((x_coordinate_difference > 0 && y_coordinate_difference == 0) && (front_axis == 2)){
    1474:	80 91 7f 04 	lds	r24, 0x047F
    1478:	90 91 80 04 	lds	r25, 0x0480
    147c:	82 30       	cpi	r24, 0x02	; 2
    147e:	91 05       	cpc	r25, r1
    1480:	59 f4       	brne	.+22     	; 0x1498 <create_LR_path+0x536>
            LR_path_counter++;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
            LR_path[LR_path_counter] = 'L';
    148c:	fc 01       	movw	r30, r24
    148e:	ed 5a       	subi	r30, 0xAD	; 173
    1490:	fa 4f       	sbci	r31, 0xFA	; 250
    1492:	8c e4       	ldi	r24, 0x4C	; 76
    1494:	80 83       	st	Z, r24
    1496:	99 c0       	rjmp	.+306    	; 0x15ca <create_LR_path+0x668>
        }
        //x+ , y -
        else if((x_coordinate_difference > 0 && y_coordinate_difference < 0) && (front_axis == 3)){
    1498:	33 20       	and	r3, r3
    149a:	1c f5       	brge	.+70     	; 0x14e2 <create_LR_path+0x580>
    149c:	80 91 7f 04 	lds	r24, 0x047F
    14a0:	90 91 80 04 	lds	r25, 0x0480
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	59 f4       	brne	.+22     	; 0x14c0 <create_LR_path+0x55e>
            LR_path_counter++;
    14aa:	a9 81       	ldd	r26, Y+1	; 0x01
    14ac:	ba 81       	ldd	r27, Y+2	; 0x02
    14ae:	11 96       	adiw	r26, 0x01	; 1
    14b0:	ba 83       	std	Y+2, r27	; 0x02
    14b2:	a9 83       	std	Y+1, r26	; 0x01
            LR_path[LR_path_counter] = 'L';
    14b4:	fd 01       	movw	r30, r26
    14b6:	ed 5a       	subi	r30, 0xAD	; 173
    14b8:	fa 4f       	sbci	r31, 0xFA	; 250
    14ba:	8c e4       	ldi	r24, 0x4C	; 76
    14bc:	80 83       	st	Z, r24
    14be:	85 c0       	rjmp	.+266    	; 0x15ca <create_LR_path+0x668>
         }
        else if((x_coordinate_difference > 0 && y_coordinate_difference < 0) && (front_axis == 1)){
    14c0:	80 91 7f 04 	lds	r24, 0x047F
    14c4:	90 91 80 04 	lds	r25, 0x0480
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	51 f4       	brne	.+20     	; 0x14e2 <create_LR_path+0x580>
            LR_path_counter++;
    14ce:	e9 81       	ldd	r30, Y+1	; 0x01
    14d0:	fa 81       	ldd	r31, Y+2	; 0x02
    14d2:	31 96       	adiw	r30, 0x01	; 1
    14d4:	fa 83       	std	Y+2, r31	; 0x02
    14d6:	e9 83       	std	Y+1, r30	; 0x01
            LR_path[LR_path_counter] = 'R';
    14d8:	ed 5a       	subi	r30, 0xAD	; 173
    14da:	fa 4f       	sbci	r31, 0xFA	; 250
    14dc:	82 e5       	ldi	r24, 0x52	; 82
    14de:	80 83       	st	Z, r24
    14e0:	74 c0       	rjmp	.+232    	; 0x15ca <create_LR_path+0x668>
        }
        
        // x - ,y - 
        else if((x_coordinate_difference < 0 && y_coordinate_difference < 0) && (front_axis == 2)){
    14e2:	11 23       	and	r17, r17
    14e4:	0c f0       	brlt	.+2      	; 0x14e8 <create_LR_path+0x586>
    14e6:	71 c0       	rjmp	.+226    	; 0x15ca <create_LR_path+0x668>
    14e8:	33 20       	and	r3, r3
    14ea:	24 f5       	brge	.+72     	; 0x1534 <create_LR_path+0x5d2>
    14ec:	80 91 7f 04 	lds	r24, 0x047F
    14f0:	90 91 80 04 	lds	r25, 0x0480
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	91 05       	cpc	r25, r1
    14f8:	59 f4       	brne	.+22     	; 0x1510 <create_LR_path+0x5ae>
            LR_path_counter++;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
            LR_path[LR_path_counter] = 'R';
    1504:	fc 01       	movw	r30, r24
    1506:	ed 5a       	subi	r30, 0xAD	; 173
    1508:	fa 4f       	sbci	r31, 0xFA	; 250
    150a:	82 e5       	ldi	r24, 0x52	; 82
    150c:	80 83       	st	Z, r24
    150e:	5d c0       	rjmp	.+186    	; 0x15ca <create_LR_path+0x668>
        }
        else if((x_coordinate_difference < 0 && y_coordinate_difference < 0) && (front_axis == 1)){
    1510:	80 91 7f 04 	lds	r24, 0x047F
    1514:	90 91 80 04 	lds	r25, 0x0480
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	59 f4       	brne	.+22     	; 0x1534 <create_LR_path+0x5d2>
            LR_path_counter++;
    151e:	a9 81       	ldd	r26, Y+1	; 0x01
    1520:	ba 81       	ldd	r27, Y+2	; 0x02
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	ba 83       	std	Y+2, r27	; 0x02
    1526:	a9 83       	std	Y+1, r26	; 0x01
            LR_path[LR_path_counter] = 'L';
    1528:	fd 01       	movw	r30, r26
    152a:	ed 5a       	subi	r30, 0xAD	; 173
    152c:	fa 4f       	sbci	r31, 0xFA	; 250
    152e:	8c e4       	ldi	r24, 0x4C	; 76
    1530:	80 83       	st	Z, r24
    1532:	4b c0       	rjmp	.+150    	; 0x15ca <create_LR_path+0x668>
        }
        // x- , y = k 
        else if((x_coordinate_difference < 0 && y_coordinate_difference == 0) && (front_axis == 2)){
    1534:	21 14       	cp	r2, r1
    1536:	31 04       	cpc	r3, r1
    1538:	19 f5       	brne	.+70     	; 0x1580 <create_LR_path+0x61e>
    153a:	80 91 7f 04 	lds	r24, 0x047F
    153e:	90 91 80 04 	lds	r25, 0x0480
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	51 f4       	brne	.+20     	; 0x155c <create_LR_path+0x5fa>
            LR_path_counter++;
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	31 96       	adiw	r30, 0x01	; 1
    154e:	fa 83       	std	Y+2, r31	; 0x02
    1550:	e9 83       	std	Y+1, r30	; 0x01
            LR_path[LR_path_counter] = 'L';
    1552:	ed 5a       	subi	r30, 0xAD	; 173
    1554:	fa 4f       	sbci	r31, 0xFA	; 250
    1556:	8c e4       	ldi	r24, 0x4C	; 76
    1558:	80 83       	st	Z, r24
    155a:	37 c0       	rjmp	.+110    	; 0x15ca <create_LR_path+0x668>
        }
        else if((x_coordinate_difference < 0 && y_coordinate_difference == 0) && (front_axis == 3)){
    155c:	80 91 7f 04 	lds	r24, 0x047F
    1560:	90 91 80 04 	lds	r25, 0x0480
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	59 f4       	brne	.+22     	; 0x1580 <create_LR_path+0x61e>
            LR_path_counter++;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
            LR_path[LR_path_counter] = 'R';
    1574:	fc 01       	movw	r30, r24
    1576:	ed 5a       	subi	r30, 0xAD	; 173
    1578:	fa 4f       	sbci	r31, 0xFA	; 250
    157a:	82 e5       	ldi	r24, 0x52	; 82
    157c:	80 83       	st	Z, r24
    157e:	25 c0       	rjmp	.+74     	; 0x15ca <create_LR_path+0x668>
        }
        //x - ,y +
        else if((x_coordinate_difference < 0 && y_coordinate_difference > 0) && (front_axis == 3)){
    1580:	12 14       	cp	r1, r2
    1582:	13 04       	cpc	r1, r3
    1584:	14 f5       	brge	.+68     	; 0x15ca <create_LR_path+0x668>
    1586:	80 91 7f 04 	lds	r24, 0x047F
    158a:	90 91 80 04 	lds	r25, 0x0480
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	91 05       	cpc	r25, r1
    1592:	59 f4       	brne	.+22     	; 0x15aa <create_LR_path+0x648>
            LR_path_counter++;
    1594:	a9 81       	ldd	r26, Y+1	; 0x01
    1596:	ba 81       	ldd	r27, Y+2	; 0x02
    1598:	11 96       	adiw	r26, 0x01	; 1
    159a:	ba 83       	std	Y+2, r27	; 0x02
    159c:	a9 83       	std	Y+1, r26	; 0x01
            LR_path[LR_path_counter] = 'L';
    159e:	fd 01       	movw	r30, r26
    15a0:	ed 5a       	subi	r30, 0xAD	; 173
    15a2:	fa 4f       	sbci	r31, 0xFA	; 250
    15a4:	8c e4       	ldi	r24, 0x4C	; 76
    15a6:	80 83       	st	Z, r24
    15a8:	10 c0       	rjmp	.+32     	; 0x15ca <create_LR_path+0x668>
        }
        else if((x_coordinate_difference < 0 && y_coordinate_difference > 0) && (front_axis == 1)){
    15aa:	80 91 7f 04 	lds	r24, 0x047F
    15ae:	90 91 80 04 	lds	r25, 0x0480
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	49 f4       	brne	.+18     	; 0x15ca <create_LR_path+0x668>
            LR_path_counter++;
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	31 96       	adiw	r30, 0x01	; 1
    15be:	fa 83       	std	Y+2, r31	; 0x02
    15c0:	e9 83       	std	Y+1, r30	; 0x01
            LR_path[LR_path_counter] = 'R';
    15c2:	ed 5a       	subi	r30, 0xAD	; 173
    15c4:	fa 4f       	sbci	r31, 0xFA	; 250
    15c6:	82 e5       	ldi	r24, 0x52	; 82
    15c8:	80 83       	st	Z, r24
        }
        else{
             // Error: Difference calculate , axis and assigning LR 
        }
        
       update_axis(LR_path_counter);
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	0e 94 60 07 	call	0xec0	; 0xec0 <update_axis>
    15d2:	08 94       	sec
    15d4:	e1 1c       	adc	r14, r1
    15d6:	f1 1c       	adc	r15, r1
    int x1, x2, y1, y2, x, y, k, j,LR_path_counter = -1;
 int x_coordinate_difference;
 int y_coordinate_difference;
 
    dijkstra(graph,initial_vertex,final_vertex,2);
     for(int i = 0; i < vertex_path_array_counter; i++){
    15d8:	80 91 b1 05 	lds	r24, 0x05B1
    15dc:	90 91 b2 05 	lds	r25, 0x05B2
    15e0:	88 16       	cp	r8, r24
    15e2:	99 06       	cpc	r9, r25
    15e4:	44 f0       	brlt	.+16     	; 0x15f6 <create_LR_path+0x694>
    15e6:	1c c0       	rjmp	.+56     	; 0x1620 <create_LR_path+0x6be>
    15e8:	ee 24       	eor	r14, r14
    15ea:	ff 24       	eor	r15, r15
    15ec:	e3 94       	inc	r14
 * Example Call:  create_LR_path(graph,current_location,final_vertex) 
*/
 
 
int create_LR_path(int graph[V][V],int initial_vertex,int final_vertex){
    int x1, x2, y1, y2, x, y, k, j,LR_path_counter = -1;
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01
 * After that 'move_after_LR_formed()' is called that traverses through the 'L' 'R' sequence and moves the robot according to that.    
 * Example Call:  create_LR_path(graph,current_location,final_vertex) 
*/
 
 
int create_LR_path(int graph[V][V],int initial_vertex,int final_vertex){
    15f6:	d7 01       	movw	r26, r14
    15f8:	11 97       	sbiw	r26, 0x01	; 1
    15fa:	9d 01       	movw	r18, r26
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	50 e0       	ldi	r21, 0x00	; 0
                 x = 10;
                 y = 3;
                break;
        case 48 : 
                 x = 10;
                 y = 1;
    1600:	88 24       	eor	r8, r8
    1602:	99 24       	eor	r9, r9
    1604:	83 94       	inc	r8
                 x = 9;
                 y = -3;
                break;
        case 47 : 
                 x = 10;
                 y = 3;
    1606:	03 e0       	ldi	r16, 0x03	; 3
    1608:	10 e0       	ldi	r17, 0x00	; 0
                 x = 7;
                 y = -4;
                break;
        case 38 : 
                 x = 8;
                 y = 4;
    160a:	22 24       	eor	r2, r2
    160c:	33 24       	eor	r3, r3
    160e:	68 94       	set
    1610:	22 f8       	bld	r2, 2
    }
    if(k == i ){
              x1 = x;
              y1 = y;
    }
    if(k == (i+1)){
    1612:	6e 2d       	mov	r22, r14
    1614:	7f 2d       	mov	r23, r15
 
    dijkstra(graph,initial_vertex,final_vertex,2);
     for(int i = 0; i < vertex_path_array_counter; i++){
         j = 1;
         while(j<=2)
         {  if(j == 1){
    1616:	6a 2e       	mov	r6, r26
    1618:	4b 2e       	mov	r4, r27
    161a:	e9 86       	std	Y+9, r14	; 0x09
    161c:	fa 86       	std	Y+10, r15	; 0x0a
    161e:	d4 cc       	rjmp	.-1624   	; 0xfc8 <create_LR_path+0x66>
        
       update_axis(LR_path_counter);
        
    }
 
    LR_path[LR_path_counter + 1] = '\0';
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	ed 5a       	subi	r30, 0xAD	; 173
    1626:	fa 4f       	sbci	r31, 0xFA	; 250
    1628:	11 82       	std	Z+1, r1	; 0x01
 move_after_LR_path_formed();
    162a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <move_after_LR_path_formed>
 return 0;
}
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	2a 96       	adiw	r28, 0x0a	; 10
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	af 90       	pop	r10
    1652:	9f 90       	pop	r9
    1654:	8f 90       	pop	r8
    1656:	7f 90       	pop	r7
    1658:	6f 90       	pop	r6
    165a:	5f 90       	pop	r5
    165c:	4f 90       	pop	r4
    165e:	3f 90       	pop	r3
    1660:	2f 90       	pop	r2
    1662:	08 95       	ret

00001664 <decode_and_assign_vertices>:
 *                it one by one concatenates pebble cell and pebble axis (1/2/3) and pitcher cell and pitcher axis and calls 'decode_into_index(pebble_cell1)' to calculate the index of 
 *                the concatenated string eg . "16-1-1" ie. 18 , after that it calls 'assign_two_vertices(decode_index_of_pebble,1)' to assign two vertices ('vertex number') to the respective 
 *                pebbles and the pitcher.                                   
 * Example Call:  decode_and_assign_vertices() 
*/
int decode_and_assign_vertices(){
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
 int decode_index_of_pebble_2;
 int decode_index_of_pebble_3;
 int decode_index_of_pitcher;
 
 for(int i = 0;i < 8; i++){
  distances[i] = -1;
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	9f ef       	ldi	r25, 0xFF	; 255
    1670:	90 93 a2 05 	sts	0x05A2, r25
    1674:	80 93 a1 05 	sts	0x05A1, r24
    1678:	90 93 a4 05 	sts	0x05A4, r25
    167c:	80 93 a3 05 	sts	0x05A3, r24
    1680:	90 93 a6 05 	sts	0x05A6, r25
    1684:	80 93 a5 05 	sts	0x05A5, r24
    1688:	90 93 a8 05 	sts	0x05A8, r25
    168c:	80 93 a7 05 	sts	0x05A7, r24
    1690:	90 93 aa 05 	sts	0x05AA, r25
    1694:	80 93 a9 05 	sts	0x05A9, r24
    1698:	90 93 ac 05 	sts	0x05AC, r25
    169c:	80 93 ab 05 	sts	0x05AB, r24
    16a0:	90 93 ae 05 	sts	0x05AE, r25
    16a4:	80 93 ad 05 	sts	0x05AD, r24
    16a8:	90 93 b0 05 	sts	0x05B0, r25
    16ac:	80 93 af 05 	sts	0x05AF, r24
 }
 
 strcat(pebble_cell1,"-");
    16b0:	c9 ec       	ldi	r28, 0xC9	; 201
    16b2:	d4 e0       	ldi	r29, 0x04	; 4
    16b4:	fe 01       	movw	r30, r28
    16b6:	01 90       	ld	r0, Z+
    16b8:	00 20       	and	r0, r0
    16ba:	e9 f7       	brne	.-6      	; 0x16b6 <decode_and_assign_vertices+0x52>
    16bc:	31 97       	sbiw	r30, 0x01	; 1
    16be:	0d e2       	ldi	r16, 0x2D	; 45
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	11 83       	std	Z+1, r17	; 0x01
    16c4:	00 83       	st	Z, r16
 strcat(pebble_cell1,pebble_axis1);
    16c6:	ce 01       	movw	r24, r28
    16c8:	65 ec       	ldi	r22, 0xC5	; 197
    16ca:	74 e0       	ldi	r23, 0x04	; 4
    16cc:	0e 94 8a 19 	call	0x3314	; 0x3314 <strcat>
 decode_index_of_pebble_1 = decode_into_index(pebble_cell1);
    16d0:	ce 01       	movw	r24, r28
    16d2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <decode_into_index>
 assign_two_vertices(decode_index_of_pebble_1,1);
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	0e 94 23 03 	call	0x646	; 0x646 <assign_two_vertices>
 
 strcat(pebble_cell2,"-");
    16de:	ce eb       	ldi	r28, 0xBE	; 190
    16e0:	d4 e0       	ldi	r29, 0x04	; 4
    16e2:	fe 01       	movw	r30, r28
    16e4:	01 90       	ld	r0, Z+
    16e6:	00 20       	and	r0, r0
    16e8:	e9 f7       	brne	.-6      	; 0x16e4 <decode_and_assign_vertices+0x80>
    16ea:	31 97       	sbiw	r30, 0x01	; 1
    16ec:	11 83       	std	Z+1, r17	; 0x01
    16ee:	00 83       	st	Z, r16
 strcat(pebble_cell2,pebble_axis2);
    16f0:	ce 01       	movw	r24, r28
    16f2:	6a eb       	ldi	r22, 0xBA	; 186
    16f4:	74 e0       	ldi	r23, 0x04	; 4
    16f6:	0e 94 8a 19 	call	0x3314	; 0x3314 <strcat>
 decode_index_of_pebble_2 = decode_into_index(pebble_cell2);
    16fa:	ce 01       	movw	r24, r28
    16fc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <decode_into_index>
 assign_two_vertices(decode_index_of_pebble_2,2);
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	0e 94 23 03 	call	0x646	; 0x646 <assign_two_vertices>
 
 strcat(pebble_cell3,"-");
    1708:	c3 eb       	ldi	r28, 0xB3	; 179
    170a:	d4 e0       	ldi	r29, 0x04	; 4
    170c:	fe 01       	movw	r30, r28
    170e:	01 90       	ld	r0, Z+
    1710:	00 20       	and	r0, r0
    1712:	e9 f7       	brne	.-6      	; 0x170e <decode_and_assign_vertices+0xaa>
    1714:	31 97       	sbiw	r30, 0x01	; 1
    1716:	11 83       	std	Z+1, r17	; 0x01
    1718:	00 83       	st	Z, r16
 strcat(pebble_cell3,pebble_axis3);
    171a:	ce 01       	movw	r24, r28
    171c:	6f ea       	ldi	r22, 0xAF	; 175
    171e:	74 e0       	ldi	r23, 0x04	; 4
    1720:	0e 94 8a 19 	call	0x3314	; 0x3314 <strcat>
 decode_index_of_pebble_3 = decode_into_index(pebble_cell3);
    1724:	ce 01       	movw	r24, r28
    1726:	0e 94 fe 02 	call	0x5fc	; 0x5fc <decode_into_index>
 assign_two_vertices(decode_index_of_pebble_3,3);
    172a:	63 e0       	ldi	r22, 0x03	; 3
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	0e 94 23 03 	call	0x646	; 0x646 <assign_two_vertices>
 strcat(pitcher_cell,"-");
    1732:	c8 ea       	ldi	r28, 0xA8	; 168
    1734:	d4 e0       	ldi	r29, 0x04	; 4
    1736:	fe 01       	movw	r30, r28
    1738:	01 90       	ld	r0, Z+
    173a:	00 20       	and	r0, r0
    173c:	e9 f7       	brne	.-6      	; 0x1738 <decode_and_assign_vertices+0xd4>
    173e:	31 97       	sbiw	r30, 0x01	; 1
    1740:	11 83       	std	Z+1, r17	; 0x01
    1742:	00 83       	st	Z, r16
 strcat(pitcher_cell,pitcher_axis);
    1744:	ce 01       	movw	r24, r28
    1746:	64 ea       	ldi	r22, 0xA4	; 164
    1748:	74 e0       	ldi	r23, 0x04	; 4
    174a:	0e 94 8a 19 	call	0x3314	; 0x3314 <strcat>
 decode_index_of_pitcher = decode_into_index(pitcher_cell);
    174e:	ce 01       	movw	r24, r28
    1750:	0e 94 fe 02 	call	0x5fc	; 0x5fc <decode_into_index>
 assign_two_vertices(decode_index_of_pitcher,0);
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	0e 94 23 03 	call	0x646	; 0x646 <assign_two_vertices>
 
 return 0;
}
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	08 95       	ret

0000176a <update_destination>:
*                when update_animation == 'b' for changing pebble_2_vertex_1/pebble_2_vertex_2
*                when update_animation == 'c' for changing pebble_3_vertex_1/pebble_3_vertex_2
*                when update_animation == 'd' for changing pitcher_vertex_1/pitcher_vertex_2
* Example Call:  update_destination(graph,update_destination_counter) 
*/
int update_destination(int graph[V][V] , int odd_even_value){
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	ec 01       	movw	r28, r24
 int shortest;
 int shortest_index;
    
 if((odd_even_value % 2) == 0)
    1770:	60 fd       	sbrc	r22, 0
    1772:	6e c1       	rjmp	.+732    	; 0x1a50 <update_destination+0x2e6>
 {
  if(distances[2] != V)
    1774:	80 91 a5 05 	lds	r24, 0x05A5
    1778:	90 91 a6 05 	lds	r25, 0x05A6
    177c:	86 33       	cpi	r24, 0x36	; 54
    177e:	91 05       	cpc	r25, r1
    1780:	89 f0       	breq	.+34     	; 0x17a4 <update_destination+0x3a>
  {distances[2] = dijkstra(graph,current_location,pebble_1_vertex_1,1);}
    1782:	60 91 9b 05 	lds	r22, 0x059B
    1786:	70 91 9c 05 	lds	r23, 0x059C
    178a:	40 91 b3 05 	lds	r20, 0x05B3
    178e:	50 91 b4 05 	lds	r21, 0x05B4
    1792:	ce 01       	movw	r24, r28
    1794:	21 e0       	ldi	r18, 0x01	; 1
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    179c:	90 93 a6 05 	sts	0x05A6, r25
    17a0:	80 93 a5 05 	sts	0x05A5, r24
  if(distances[3] != V)
    17a4:	80 91 a7 05 	lds	r24, 0x05A7
    17a8:	90 91 a8 05 	lds	r25, 0x05A8
    17ac:	86 33       	cpi	r24, 0x36	; 54
    17ae:	91 05       	cpc	r25, r1
    17b0:	89 f0       	breq	.+34     	; 0x17d4 <update_destination+0x6a>
  {distances[3] = dijkstra(graph,current_location,pebble_1_vertex_2,1);}
    17b2:	60 91 9b 05 	lds	r22, 0x059B
    17b6:	70 91 9c 05 	lds	r23, 0x059C
    17ba:	40 91 97 05 	lds	r20, 0x0597
    17be:	50 91 98 05 	lds	r21, 0x0598
    17c2:	ce 01       	movw	r24, r28
    17c4:	21 e0       	ldi	r18, 0x01	; 1
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    17cc:	90 93 a8 05 	sts	0x05A8, r25
    17d0:	80 93 a7 05 	sts	0x05A7, r24
  if(distances[4] != V)
    17d4:	80 91 a9 05 	lds	r24, 0x05A9
    17d8:	90 91 aa 05 	lds	r25, 0x05AA
    17dc:	86 33       	cpi	r24, 0x36	; 54
    17de:	91 05       	cpc	r25, r1
    17e0:	89 f0       	breq	.+34     	; 0x1804 <update_destination+0x9a>
  {distances[4] = dijkstra(graph,current_location,pebble_2_vertex_1,1);}
    17e2:	60 91 9b 05 	lds	r22, 0x059B
    17e6:	70 91 9c 05 	lds	r23, 0x059C
    17ea:	40 91 9d 05 	lds	r20, 0x059D
    17ee:	50 91 9e 05 	lds	r21, 0x059E
    17f2:	ce 01       	movw	r24, r28
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    17fc:	90 93 aa 05 	sts	0x05AA, r25
    1800:	80 93 a9 05 	sts	0x05A9, r24
  if(distances[5] != V)
    1804:	80 91 ab 05 	lds	r24, 0x05AB
    1808:	90 91 ac 05 	lds	r25, 0x05AC
    180c:	86 33       	cpi	r24, 0x36	; 54
    180e:	91 05       	cpc	r25, r1
    1810:	89 f0       	breq	.+34     	; 0x1834 <update_destination+0xca>
  {distances[5] = dijkstra(graph,current_location,pebble_2_vertex_2,1);}
    1812:	60 91 9b 05 	lds	r22, 0x059B
    1816:	70 91 9c 05 	lds	r23, 0x059C
    181a:	40 91 8c 05 	lds	r20, 0x058C
    181e:	50 91 8d 05 	lds	r21, 0x058D
    1822:	ce 01       	movw	r24, r28
    1824:	21 e0       	ldi	r18, 0x01	; 1
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    182c:	90 93 ac 05 	sts	0x05AC, r25
    1830:	80 93 ab 05 	sts	0x05AB, r24
  if(distances[6] != V)
    1834:	80 91 ad 05 	lds	r24, 0x05AD
    1838:	90 91 ae 05 	lds	r25, 0x05AE
    183c:	86 33       	cpi	r24, 0x36	; 54
    183e:	91 05       	cpc	r25, r1
    1840:	89 f0       	breq	.+34     	; 0x1864 <update_destination+0xfa>
  {distances[6] = dijkstra(graph,current_location,pebble_3_vertex_1,1);}
    1842:	60 91 9b 05 	lds	r22, 0x059B
    1846:	70 91 9c 05 	lds	r23, 0x059C
    184a:	40 91 91 05 	lds	r20, 0x0591
    184e:	50 91 92 05 	lds	r21, 0x0592
    1852:	ce 01       	movw	r24, r28
    1854:	21 e0       	ldi	r18, 0x01	; 1
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    185c:	90 93 ae 05 	sts	0x05AE, r25
    1860:	80 93 ad 05 	sts	0x05AD, r24
  if(distances[7] != V)
    1864:	80 91 af 05 	lds	r24, 0x05AF
    1868:	90 91 b0 05 	lds	r25, 0x05B0
    186c:	86 33       	cpi	r24, 0x36	; 54
    186e:	91 05       	cpc	r25, r1
    1870:	89 f0       	breq	.+34     	; 0x1894 <update_destination+0x12a>
  {distances[7] = dijkstra(graph,current_location,pebble_3_vertex_2,1);}
    1872:	60 91 9b 05 	lds	r22, 0x059B
    1876:	70 91 9c 05 	lds	r23, 0x059C
    187a:	40 91 94 05 	lds	r20, 0x0594
    187e:	50 91 95 05 	lds	r21, 0x0595
    1882:	ce 01       	movw	r24, r28
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    188c:	90 93 b0 05 	sts	0x05B0, r25
    1890:	80 93 af 05 	sts	0x05AF, r24
 
 shortest = distances[2];
    1894:	40 91 a5 05 	lds	r20, 0x05A5
    1898:	50 91 a6 05 	lds	r21, 0x05A6
    189c:	e5 ea       	ldi	r30, 0xA5	; 165
    189e:	f5 e0       	ldi	r31, 0x05	; 5
 shortest_index = 2;
      for (int i = 2; i <= 7; i++) 
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	90 e0       	ldi	r25, 0x00	; 0
  {distances[6] = dijkstra(graph,current_location,pebble_3_vertex_1,1);}
  if(distances[7] != V)
  {distances[7] = dijkstra(graph,current_location,pebble_3_vertex_2,1);}
 
 shortest = distances[2];
 shortest_index = 2;
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	70 e0       	ldi	r23, 0x00	; 0
      for (int i = 2; i <= 7; i++) 
   {
       if (distances[i] <= shortest) 
    18a8:	21 91       	ld	r18, Z+
    18aa:	31 91       	ld	r19, Z+
    18ac:	42 17       	cp	r20, r18
    18ae:	53 07       	cpc	r21, r19
    18b0:	14 f0       	brlt	.+4      	; 0x18b6 <update_destination+0x14c>
    18b2:	bc 01       	movw	r22, r24
    {
         shortest = distances[i];
    18b4:	a9 01       	movw	r20, r18
  if(distances[7] != V)
  {distances[7] = dijkstra(graph,current_location,pebble_3_vertex_2,1);}
 
 shortest = distances[2];
 shortest_index = 2;
      for (int i = 2; i <= 7; i++) 
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	88 30       	cpi	r24, 0x08	; 8
    18ba:	91 05       	cpc	r25, r1
    18bc:	a9 f7       	brne	.-22     	; 0x18a8 <update_destination+0x13e>
         shortest = distances[i];
         shortest_index = i;
    }
      }
  
 if(shortest_index == 2)
    18be:	62 30       	cpi	r22, 0x02	; 2
    18c0:	71 05       	cpc	r23, r1
    18c2:	f1 f4       	brne	.+60     	; 0x1900 <update_destination+0x196>
 { 
   final_vertex = pebble_1_vertex_1;
    18c4:	80 91 b3 05 	lds	r24, 0x05B3
    18c8:	90 91 b4 05 	lds	r25, 0x05B4
    18cc:	90 93 b6 05 	sts	0x05B6, r25
    18d0:	80 93 b5 05 	sts	0x05B5, r24
   destination_axis = pebble_axis1[0] - '0';
    18d4:	80 91 c5 04 	lds	r24, 0x04C5
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	c0 97       	sbiw	r24, 0x30	; 48
    18dc:	90 93 9a 05 	sts	0x059A, r25
    18e0:	80 93 99 05 	sts	0x0599, r24
   distances[2] = V;
    18e4:	86 e3       	ldi	r24, 0x36	; 54
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	90 93 a6 05 	sts	0x05A6, r25
    18ec:	80 93 a5 05 	sts	0x05A5, r24
   distances[3] = V;
    18f0:	90 93 a8 05 	sts	0x05A8, r25
    18f4:	80 93 a7 05 	sts	0x05A7, r24
   update_animation = 'a';
    18f8:	81 e6       	ldi	r24, 0x61	; 97
    18fa:	80 93 8b 05 	sts	0x058B, r24
    18fe:	42 c0       	rjmp	.+132    	; 0x1984 <update_destination+0x21a>
 }
 if(shortest_index == 3)
    1900:	63 30       	cpi	r22, 0x03	; 3
    1902:	71 05       	cpc	r23, r1
    1904:	f1 f4       	brne	.+60     	; 0x1942 <update_destination+0x1d8>
 {
   final_vertex = pebble_1_vertex_2;
    1906:	80 91 97 05 	lds	r24, 0x0597
    190a:	90 91 98 05 	lds	r25, 0x0598
    190e:	90 93 b6 05 	sts	0x05B6, r25
    1912:	80 93 b5 05 	sts	0x05B5, r24
   destination_axis = pebble_axis1[0] - '0';
    1916:	80 91 c5 04 	lds	r24, 0x04C5
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	c0 97       	sbiw	r24, 0x30	; 48
    191e:	90 93 9a 05 	sts	0x059A, r25
    1922:	80 93 99 05 	sts	0x0599, r24
   distances[3] = V;
    1926:	86 e3       	ldi	r24, 0x36	; 54
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	90 93 a8 05 	sts	0x05A8, r25
    192e:	80 93 a7 05 	sts	0x05A7, r24
   distances[2] = V;
    1932:	90 93 a6 05 	sts	0x05A6, r25
    1936:	80 93 a5 05 	sts	0x05A5, r24
   update_animation = 'a'; 
    193a:	81 e6       	ldi	r24, 0x61	; 97
    193c:	80 93 8b 05 	sts	0x058B, r24
    1940:	42 c0       	rjmp	.+132    	; 0x19c6 <update_destination+0x25c>
 }
 if(shortest_index == 4)
    1942:	64 30       	cpi	r22, 0x04	; 4
    1944:	71 05       	cpc	r23, r1
    1946:	f1 f4       	brne	.+60     	; 0x1984 <update_destination+0x21a>
 {
   final_vertex = pebble_2_vertex_1;
    1948:	80 91 9d 05 	lds	r24, 0x059D
    194c:	90 91 9e 05 	lds	r25, 0x059E
    1950:	90 93 b6 05 	sts	0x05B6, r25
    1954:	80 93 b5 05 	sts	0x05B5, r24
   destination_axis = pebble_axis2[0] - '0';
    1958:	80 91 ba 04 	lds	r24, 0x04BA
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	c0 97       	sbiw	r24, 0x30	; 48
    1960:	90 93 9a 05 	sts	0x059A, r25
    1964:	80 93 99 05 	sts	0x0599, r24
   distances[4] =  V;
    1968:	86 e3       	ldi	r24, 0x36	; 54
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	90 93 aa 05 	sts	0x05AA, r25
    1970:	80 93 a9 05 	sts	0x05A9, r24
   distances[5] = V;
    1974:	90 93 ac 05 	sts	0x05AC, r25
    1978:	80 93 ab 05 	sts	0x05AB, r24
 update_animation = 'b'; 
    197c:	82 e6       	ldi	r24, 0x62	; 98
    197e:	80 93 8b 05 	sts	0x058B, r24
    1982:	42 c0       	rjmp	.+132    	; 0x1a08 <update_destination+0x29e>
 }
 if(shortest_index == 5)
    1984:	65 30       	cpi	r22, 0x05	; 5
    1986:	71 05       	cpc	r23, r1
    1988:	f1 f4       	brne	.+60     	; 0x19c6 <update_destination+0x25c>
 {
   destination_axis = pebble_axis2[0] - '0';
    198a:	80 91 ba 04 	lds	r24, 0x04BA
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	c0 97       	sbiw	r24, 0x30	; 48
    1992:	90 93 9a 05 	sts	0x059A, r25
    1996:	80 93 99 05 	sts	0x0599, r24
   final_vertex = pebble_2_vertex_2;
    199a:	80 91 8c 05 	lds	r24, 0x058C
    199e:	90 91 8d 05 	lds	r25, 0x058D
    19a2:	90 93 b6 05 	sts	0x05B6, r25
    19a6:	80 93 b5 05 	sts	0x05B5, r24
   distances[5] = V;
    19aa:	86 e3       	ldi	r24, 0x36	; 54
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	90 93 ac 05 	sts	0x05AC, r25
    19b2:	80 93 ab 05 	sts	0x05AB, r24
   distances[4] = V;
    19b6:	90 93 aa 05 	sts	0x05AA, r25
    19ba:	80 93 a9 05 	sts	0x05A9, r24
  update_animation = 'b';  
    19be:	82 e6       	ldi	r24, 0x62	; 98
    19c0:	80 93 8b 05 	sts	0x058B, r24
    19c4:	41 c0       	rjmp	.+130    	; 0x1a48 <update_destination+0x2de>
 } 
 if(shortest_index == 6)
    19c6:	66 30       	cpi	r22, 0x06	; 6
    19c8:	71 05       	cpc	r23, r1
    19ca:	f1 f4       	brne	.+60     	; 0x1a08 <update_destination+0x29e>
 {
   final_vertex = pebble_3_vertex_1;
    19cc:	80 91 91 05 	lds	r24, 0x0591
    19d0:	90 91 92 05 	lds	r25, 0x0592
    19d4:	90 93 b6 05 	sts	0x05B6, r25
    19d8:	80 93 b5 05 	sts	0x05B5, r24
   destination_axis = pebble_axis3[0] - '0';
    19dc:	80 91 af 04 	lds	r24, 0x04AF
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	c0 97       	sbiw	r24, 0x30	; 48
    19e4:	90 93 9a 05 	sts	0x059A, r25
    19e8:	80 93 99 05 	sts	0x0599, r24
   distances[6] = V;
    19ec:	86 e3       	ldi	r24, 0x36	; 54
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	90 93 ae 05 	sts	0x05AE, r25
    19f4:	80 93 ad 05 	sts	0x05AD, r24
   distances[7] = V;
    19f8:	90 93 b0 05 	sts	0x05B0, r25
    19fc:	80 93 af 05 	sts	0x05AF, r24
   update_animation = 'c';
    1a00:	83 e6       	ldi	r24, 0x63	; 99
    1a02:	80 93 8b 05 	sts	0x058B, r24
    1a06:	20 c0       	rjmp	.+64     	; 0x1a48 <update_destination+0x2de>
  }
 if(shortest_index == 7)
    1a08:	67 30       	cpi	r22, 0x07	; 7
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	e9 f4       	brne	.+58     	; 0x1a48 <update_destination+0x2de>
 {
   final_vertex = pebble_3_vertex_2;
    1a0e:	80 91 94 05 	lds	r24, 0x0594
    1a12:	90 91 95 05 	lds	r25, 0x0595
    1a16:	90 93 b6 05 	sts	0x05B6, r25
    1a1a:	80 93 b5 05 	sts	0x05B5, r24
   destination_axis = pebble_axis3[0] - '0';
    1a1e:	80 91 af 04 	lds	r24, 0x04AF
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	c0 97       	sbiw	r24, 0x30	; 48
    1a26:	90 93 9a 05 	sts	0x059A, r25
    1a2a:	80 93 99 05 	sts	0x0599, r24
   distances[6] = V;
    1a2e:	86 e3       	ldi	r24, 0x36	; 54
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	90 93 ae 05 	sts	0x05AE, r25
    1a36:	80 93 ad 05 	sts	0x05AD, r24
   distances[7] = V;
    1a3a:	90 93 b0 05 	sts	0x05B0, r25
    1a3e:	80 93 af 05 	sts	0x05AF, r24
   update_animation = 'c';
    1a42:	83 e6       	ldi	r24, 0x63	; 99
    1a44:	80 93 8b 05 	sts	0x058B, r24
  }
  
         destination_name = 'P'; 
    1a48:	80 e5       	ldi	r24, 0x50	; 80
    1a4a:	80 93 93 05 	sts	0x0593, r24
    1a4e:	47 c0       	rjmp	.+142    	; 0x1ade <update_destination+0x374>
 }
    
 
else{
  
  distances[0] = dijkstra(graph,current_location,pitcher_vertex_1,1);
    1a50:	60 91 9b 05 	lds	r22, 0x059B
    1a54:	70 91 9c 05 	lds	r23, 0x059C
    1a58:	40 91 8e 05 	lds	r20, 0x058E
    1a5c:	50 91 8f 05 	lds	r21, 0x058F
    1a60:	21 e0       	ldi	r18, 0x01	; 1
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    1a68:	90 93 a2 05 	sts	0x05A2, r25
    1a6c:	80 93 a1 05 	sts	0x05A1, r24
  distances[1] = dijkstra(graph,current_location,pitcher_vertex_2,1);
    1a70:	60 91 9b 05 	lds	r22, 0x059B
    1a74:	70 91 9c 05 	lds	r23, 0x059C
    1a78:	40 91 9f 05 	lds	r20, 0x059F
    1a7c:	50 91 a0 05 	lds	r21, 0x05A0
    1a80:	ce 01       	movw	r24, r28
    1a82:	21 e0       	ldi	r18, 0x01	; 1
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	0e 94 3c 04 	call	0x878	; 0x878 <dijkstra>
    1a8a:	90 93 a4 05 	sts	0x05A4, r25
    1a8e:	80 93 a3 05 	sts	0x05A3, r24
 
  if(distances[0] <= distances[1])
    1a92:	20 91 a1 05 	lds	r18, 0x05A1
    1a96:	30 91 a2 05 	lds	r19, 0x05A2
    1a9a:	82 17       	cp	r24, r18
    1a9c:	93 07       	cpc	r25, r19
    1a9e:	4c f0       	brlt	.+18     	; 0x1ab2 <update_destination+0x348>
  { 
   final_vertex = pitcher_vertex_1;
    1aa0:	80 91 8e 05 	lds	r24, 0x058E
    1aa4:	90 91 8f 05 	lds	r25, 0x058F
    1aa8:	90 93 b6 05 	sts	0x05B6, r25
    1aac:	80 93 b5 05 	sts	0x05B5, r24
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <update_destination+0x358>
  }
  else
  { 
   final_vertex = pitcher_vertex_2;
    1ab2:	80 91 9f 05 	lds	r24, 0x059F
    1ab6:	90 91 a0 05 	lds	r25, 0x05A0
    1aba:	90 93 b6 05 	sts	0x05B6, r25
    1abe:	80 93 b5 05 	sts	0x05B5, r24
  } 
  
        destination_axis = pitcher_axis[0] - '0';
    1ac2:	80 91 a4 04 	lds	r24, 0x04A4
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	c0 97       	sbiw	r24, 0x30	; 48
    1aca:	90 93 9a 05 	sts	0x059A, r25
    1ace:	80 93 99 05 	sts	0x0599, r24
        destination_name = 'W'; 
    1ad2:	87 e5       	ldi	r24, 0x57	; 87
    1ad4:	80 93 93 05 	sts	0x0593, r24
        update_animation = 'd';
    1ad8:	84 e6       	ldi	r24, 0x64	; 100
    1ada:	80 93 8b 05 	sts	0x058B, r24
    }
    return 0;
}
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	08 95       	ret

00001ae8 <select_shortest_path_and_move>:
 *                in even cases : the robot has to go to Pebble and in odd cases : the robot has to go to Water pitcher. Then 'destination_name' is checked if it is equal to 'W' ie. 
 *                Water Pitcher then 'water_pitcher_visited_count', a global variable is increased , this acts as a sentinel, as whole program and robot will stop when 'water_pitcher_visited_count' 
 *                becomes equal to 3. After that create_LR_path() is called to create a LR path according to which the bot has to move.
 * Example Call:  select_shortest_path_and_move(graph,current_location) 
*/ 
int select_shortest_path_and_move(int graph[V][V],int current_location){
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	ec 01       	movw	r28, r24
    1af2:	8b 01       	movw	r16, r22
   update_destination(graph,update_destination_counter);
    1af4:	60 91 d8 04 	lds	r22, 0x04D8
    1af8:	70 91 d9 04 	lds	r23, 0x04D9
    1afc:	0e 94 b5 0b 	call	0x176a	; 0x176a <update_destination>
    update_destination_counter++;
    1b00:	80 91 d8 04 	lds	r24, 0x04D8
    1b04:	90 91 d9 04 	lds	r25, 0x04D9
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	90 93 d9 04 	sts	0x04D9, r25
    1b0e:	80 93 d8 04 	sts	0x04D8, r24
    
    if(destination_name == 'W'){
    1b12:	80 91 93 05 	lds	r24, 0x0593
    1b16:	87 35       	cpi	r24, 0x57	; 87
    1b18:	49 f4       	brne	.+18     	; 0x1b2c <select_shortest_path_and_move+0x44>
        water_pitcher_visited_count++;
    1b1a:	80 91 da 04 	lds	r24, 0x04DA
    1b1e:	90 91 db 04 	lds	r25, 0x04DB
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	90 93 db 04 	sts	0x04DB, r25
    1b28:	80 93 da 04 	sts	0x04DA, r24
    }
   create_LR_path(graph,current_location,final_vertex);
    1b2c:	40 91 b5 05 	lds	r20, 0x05B5
    1b30:	50 91 b6 05 	lds	r21, 0x05B6
    1b34:	ce 01       	movw	r24, r28
    1b36:	b8 01       	movw	r22, r16
    1b38:	0e 94 b1 07 	call	0xf62	; 0xf62 <create_LR_path>
    return 0;
}
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

00001b4a <rotate_servo_and_transmit_after_run>:
 *         d) After that it will send 'w' to the python so that after picking the pebble the crow do flying animation with stone in the beak.
 *     After that it will move back by fixed distance so that it reaches node.   
 * Example Call:  rotate_servo_and_transmit_after_run() 
*/
int rotate_servo_and_transmit_after_run()
{
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
 if((front_axis == 1) && (destination_axis == 3)){
    1b56:	80 91 7f 04 	lds	r24, 0x047F
    1b5a:	90 91 80 04 	lds	r25, 0x0480
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	91 05       	cpc	r25, r1
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <rotate_servo_and_transmit_after_run+0x1c>
    1b64:	91 c1       	rjmp	.+802    	; 0x1e88 <rotate_servo_and_transmit_after_run+0x33e>
    1b66:	20 91 99 05 	lds	r18, 0x0599
    1b6a:	30 91 9a 05 	lds	r19, 0x059A
    1b6e:	23 30       	cpi	r18, 0x03	; 3
    1b70:	31 05       	cpc	r19, r1
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <rotate_servo_and_transmit_after_run+0x2c>
    1b74:	bf c0       	rjmp	.+382    	; 0x1cf4 <rotate_servo_and_transmit_after_run+0x1aa>
 forward_mm(250);                          //move the bot forward from the node and after that move the bot backwards to adjust
    1b76:	8a ef       	ldi	r24, 0xFA	; 250
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 int adjust = 0;                           //adjust variable used to adjust the bot at the node
 while (1)
 {
     
  velocity(125, 130);   
    1b7e:	8d e7       	ldi	r24, 0x7D	; 125
    1b80:	62 e8       	ldi	r22, 0x82	; 130
    1b82:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
  backward();                              //move the bot backwards until it reaches the following conditions
    1b86:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
  Left_white_line = ADC_Conversion(3);
    1b8a:	83 e0       	ldi	r24, 0x03	; 3
    1b8c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1b90:	80 93 e6 04 	sts	0x04E6, r24
  Center_white_line = ADC_Conversion(2);
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1b9a:	80 93 e5 04 	sts	0x04E5, r24
  Right_white_line = ADC_Conversion(1);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1ba4:	80 93 e4 04 	sts	0x04E4, r24
  if(Center_white_line<line_thres && Left_white_line>line_thres && Right_white_line<line_thres)//BWW
    1ba8:	90 91 e5 04 	lds	r25, 0x04E5
    1bac:	95 31       	cpi	r25, 0x15	; 21
    1bae:	58 f4       	brcc	.+22     	; 0x1bc6 <rotate_servo_and_transmit_after_run+0x7c>
    1bb0:	20 91 e6 04 	lds	r18, 0x04E6
    1bb4:	26 31       	cpi	r18, 0x16	; 22
    1bb6:	10 f0       	brcs	.+4      	; 0x1bbc <rotate_servo_and_transmit_after_run+0x72>
    1bb8:	85 31       	cpi	r24, 0x15	; 21
    1bba:	70 f0       	brcs	.+28     	; 0x1bd8 <rotate_servo_and_transmit_after_run+0x8e>
  {
   adjust = 1;                            //the value counter is adjusted to 1 is BWW condition has occured
   break;
  }
  
  else if(Center_white_line<line_thres && Left_white_line<line_thres && Right_white_line>line_thres)//WWB
    1bbc:	25 31       	cpi	r18, 0x15	; 21
    1bbe:	18 f4       	brcc	.+6      	; 0x1bc6 <rotate_servo_and_transmit_after_run+0x7c>
    1bc0:	86 31       	cpi	r24, 0x16	; 22
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <rotate_servo_and_transmit_after_run+0x7c>
    1bc4:	72 c5       	rjmp	.+2788   	; 0x26aa <__stack+0x4ab>
  {
   adjust = 2;                            //the value counter is adjusted to 2 is WWB condition has occured
   break;
  }
  
  else if(Center_white_line>line_thres && Left_white_line>line_thres && Right_white_line>line_thres)//BBB
    1bc6:	96 31       	cpi	r25, 0x16	; 22
    1bc8:	d0 f2       	brcs	.-76     	; 0x1b7e <rotate_servo_and_transmit_after_run+0x34>
    1bca:	90 91 e6 04 	lds	r25, 0x04E6
    1bce:	96 31       	cpi	r25, 0x16	; 22
    1bd0:	b0 f2       	brcs	.-84     	; 0x1b7e <rotate_servo_and_transmit_after_run+0x34>
    1bd2:	86 31       	cpi	r24, 0x16	; 22
    1bd4:	a0 f2       	brcs	.-88     	; 0x1b7e <rotate_servo_and_transmit_after_run+0x34>
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <rotate_servo_and_transmit_after_run+0x96>
   adjust = 3;                            //the value counter is adjusted to 3 is BBB condition has occured
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}     //if the value in adjust variable is 1 move slightly right
    1bd8:	8f e0       	ldi	r24, 0x0F	; 15
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 if (adjust == 2){left_degrees(15);}      //if the value in adjust variable is 2 move slightly left
 forward_mm(500);
    1be0:	84 ef       	ldi	r24, 0xF4	; 244
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 right_degrees(rotation_value);
    1be8:	80 ea       	ldi	r24, 0xA0	; 160
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 stop(); 
    1bf0:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
if(update_animation = 'd'){
    1bf4:	84 e6       	ldi	r24, 0x64	; 100
    1bf6:	80 93 8b 05 	sts	0x058B, r24
 uart_tx('d');
    1bfa:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    1bfe:	c4 eb       	ldi	r28, 0xB4	; 180
    1c00:	d0 e0       	ldi	r29, 0x00	; 0
{
 servo_1(i);
    1c02:	09 ee       	ldi	r16, 0xE9	; 233
    1c04:	10 e0       	ldi	r17, 0x00	; 0
    1c06:	78 01       	movw	r14, r16
    1c08:	ce 01       	movw	r24, r28
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	19 95       	eicall
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	9f e8       	ldi	r25, 0x8F	; 143
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <rotate_servo_and_transmit_after_run+0xc8>
    1c16:	00 c0       	rjmp	.+0      	; 0x1c18 <rotate_servo_and_transmit_after_run+0xce>
    1c18:	00 00       	nop
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    1c1a:	21 97       	sbiw	r28, 0x01	; 1
    1c1c:	cc 33       	cpi	r28, 0x3C	; 60
    1c1e:	d1 05       	cpc	r29, r1
    1c20:	91 f7       	brne	.-28     	; 0x1c06 <rotate_servo_and_transmit_after_run+0xbc>
{
 servo_1(i);
 _delay_ms(10);
}
servo_1_free();
    1c22:	02 e0       	ldi	r16, 0x02	; 2
    1c24:	11 e0       	ldi	r17, 0x01	; 1
    1c26:	f8 01       	movw	r30, r16
    1c28:	19 95       	eicall
if(update_animation == 'd'){
    1c2a:	80 91 8b 05 	lds	r24, 0x058B
    1c2e:	84 36       	cpi	r24, 0x64	; 100
    1c30:	c9 f5       	brne	.+114    	; 0x1ca4 <rotate_servo_and_transmit_after_run+0x15a>
 magnet_off();
    1c32:	0e 94 a2 01 	call	0x344	; 0x344 <magnet_off>
 if(water_pitcher_animation_count == 1)
    1c36:	80 91 7b 04 	lds	r24, 0x047B
    1c3a:	90 91 7c 04 	lds	r25, 0x047C
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	69 f4       	brne	.+26     	; 0x1c5e <rotate_servo_and_transmit_after_run+0x114>
{uart_tx('m'); water_pitcher_animation_count++;}
    1c44:	8d e6       	ldi	r24, 0x6D	; 109
    1c46:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1c4a:	80 91 7b 04 	lds	r24, 0x047B
    1c4e:	90 91 7c 04 	lds	r25, 0x047C
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	90 93 7c 04 	sts	0x047C, r25
    1c58:	80 93 7b 04 	sts	0x047B, r24
    1c5c:	1f c0       	rjmp	.+62     	; 0x1c9c <rotate_servo_and_transmit_after_run+0x152>
 else if(water_pitcher_animation_count == 2)
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	69 f4       	brne	.+26     	; 0x1c7e <rotate_servo_and_transmit_after_run+0x134>
{uart_tx('h');water_pitcher_animation_count++;}
    1c64:	88 e6       	ldi	r24, 0x68	; 104
    1c66:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1c6a:	80 91 7b 04 	lds	r24, 0x047B
    1c6e:	90 91 7c 04 	lds	r25, 0x047C
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	90 93 7c 04 	sts	0x047C, r25
    1c78:	80 93 7b 04 	sts	0x047B, r24
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <rotate_servo_and_transmit_after_run+0x152>
 else if(water_pitcher_animation_count == 3)
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	61 f4       	brne	.+24     	; 0x1c9c <rotate_servo_and_transmit_after_run+0x152>
{uart_tx('f');water_pitcher_animation_count++;}
    1c84:	86 e6       	ldi	r24, 0x66	; 102
    1c86:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1c8a:	80 91 7b 04 	lds	r24, 0x047B
    1c8e:	90 91 7c 04 	lds	r25, 0x047C
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	90 93 7c 04 	sts	0x047C, r25
    1c98:	80 93 7b 04 	sts	0x047B, r24

uart_tx('n');
    1c9c:	8e e6       	ldi	r24, 0x6E	; 110
    1c9e:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1ca2:	16 c0       	rjmp	.+44     	; 0x1cd0 <rotate_servo_and_transmit_after_run+0x186>
}
else{
 if(update_animation == 'a'){
    1ca4:	81 36       	cpi	r24, 0x61	; 97
    1ca6:	19 f4       	brne	.+6      	; 0x1cae <rotate_servo_and_transmit_after_run+0x164>
  uart_tx('p');
    1ca8:	80 e7       	ldi	r24, 0x70	; 112
    1caa:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'b'){
    1cae:	80 91 8b 05 	lds	r24, 0x058B
    1cb2:	82 36       	cpi	r24, 0x62	; 98
    1cb4:	19 f4       	brne	.+6      	; 0x1cbc <rotate_servo_and_transmit_after_run+0x172>
 uart_tx('q');
    1cb6:	81 e7       	ldi	r24, 0x71	; 113
    1cb8:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'c'){
    1cbc:	80 91 8b 05 	lds	r24, 0x058B
    1cc0:	83 36       	cpi	r24, 0x63	; 99
    1cc2:	19 f4       	brne	.+6      	; 0x1cca <rotate_servo_and_transmit_after_run+0x180>
 uart_tx('r');
    1cc4:	82 e7       	ldi	r24, 0x72	; 114
    1cc6:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
    uart_tx('w');
    1cca:	87 e7       	ldi	r24, 0x77	; 119
    1ccc:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    1cd0:	cc e3       	ldi	r28, 0x3C	; 60
    1cd2:	d0 e0       	ldi	r29, 0x00	; 0
}
    uart_tx('w');
}
for (int i = 60; i < 180; i++)
{
 servo_1(i);
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	f7 01       	movw	r30, r14
    1cd8:	19 95       	eicall
    1cda:	af ef       	ldi	r26, 0xFF	; 255
    1cdc:	bf e8       	ldi	r27, 0x8F	; 143
    1cde:	11 97       	sbiw	r26, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <rotate_servo_and_transmit_after_run+0x194>
    1ce2:	00 c0       	rjmp	.+0      	; 0x1ce4 <rotate_servo_and_transmit_after_run+0x19a>
    1ce4:	00 00       	nop
if(update_animation == 'c'){
 uart_tx('r');
}
    uart_tx('w');
}
for (int i = 60; i < 180; i++)
    1ce6:	21 96       	adiw	r28, 0x01	; 1
    1ce8:	c4 3b       	cpi	r28, 0xB4	; 180
    1cea:	d1 05       	cpc	r29, r1
    1cec:	99 f7       	brne	.-26     	; 0x1cd4 <rotate_servo_and_transmit_after_run+0x18a>
{
 servo_1(i);
 _delay_ms(10);
}
servo_1_free(); 
    1cee:	f8 01       	movw	r30, r16
    1cf0:	19 95       	eicall
 *     After that it will move back by fixed distance so that it reaches node.   
 * Example Call:  rotate_servo_and_transmit_after_run() 
*/
int rotate_servo_and_transmit_after_run()
{
 if((front_axis == 1) && (destination_axis == 3)){
    1cf2:	d2 c4       	rjmp	.+2468   	; 0x2698 <__stack+0x499>
}
servo_1_free(); 

 }
 
 else if((front_axis == 1) && (destination_axis == 2)){
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <rotate_servo_and_transmit_after_run+0x1b2>
    1cfa:	c6 c0       	rjmp	.+396    	; 0x1e88 <rotate_servo_and_transmit_after_run+0x33e>
 forward_mm(250);
    1cfc:	8a ef       	ldi	r24, 0xFA	; 250
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 int adjust = 0;
 while (1)
 {
  velocity(125, 130);   //131,109.53
    1d04:	8d e7       	ldi	r24, 0x7D	; 125
    1d06:	62 e8       	ldi	r22, 0x82	; 130
    1d08:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
  backward();
    1d0c:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
  Left_white_line = ADC_Conversion(3);
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1d16:	80 93 e6 04 	sts	0x04E6, r24
  Center_white_line = ADC_Conversion(2);
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1d20:	80 93 e5 04 	sts	0x04E5, r24
  Right_white_line = ADC_Conversion(1);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1d2a:	80 93 e4 04 	sts	0x04E4, r24
  if(Center_white_line<line_thres && Left_white_line>line_thres && Right_white_line<line_thres)//BWW
    1d2e:	90 91 e5 04 	lds	r25, 0x04E5
    1d32:	95 31       	cpi	r25, 0x15	; 21
    1d34:	58 f4       	brcc	.+22     	; 0x1d4c <rotate_servo_and_transmit_after_run+0x202>
    1d36:	20 91 e6 04 	lds	r18, 0x04E6
    1d3a:	26 31       	cpi	r18, 0x16	; 22
    1d3c:	10 f0       	brcs	.+4      	; 0x1d42 <rotate_servo_and_transmit_after_run+0x1f8>
    1d3e:	85 31       	cpi	r24, 0x15	; 21
    1d40:	70 f0       	brcs	.+28     	; 0x1d5e <rotate_servo_and_transmit_after_run+0x214>
  {
   adjust = 1;
   break;
  }
  
  else if(Center_white_line<line_thres && Left_white_line<line_thres && Right_white_line>line_thres)//WWB
    1d42:	25 31       	cpi	r18, 0x15	; 21
    1d44:	18 f4       	brcc	.+6      	; 0x1d4c <rotate_servo_and_transmit_after_run+0x202>
    1d46:	86 31       	cpi	r24, 0x16	; 22
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <rotate_servo_and_transmit_after_run+0x202>
    1d4a:	b4 c4       	rjmp	.+2408   	; 0x26b4 <__stack+0x4b5>
  {
   adjust = 2;
   break;
  }
  
  else if(Center_white_line>line_thres && Left_white_line>line_thres && Right_white_line>line_thres)
    1d4c:	96 31       	cpi	r25, 0x16	; 22
    1d4e:	d0 f2       	brcs	.-76     	; 0x1d04 <rotate_servo_and_transmit_after_run+0x1ba>
    1d50:	90 91 e6 04 	lds	r25, 0x04E6
    1d54:	96 31       	cpi	r25, 0x16	; 22
    1d56:	b0 f2       	brcs	.-84     	; 0x1d04 <rotate_servo_and_transmit_after_run+0x1ba>
    1d58:	86 31       	cpi	r24, 0x16	; 22
    1d5a:	a0 f2       	brcs	.-88     	; 0x1d04 <rotate_servo_and_transmit_after_run+0x1ba>
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <rotate_servo_and_transmit_after_run+0x21c>
   adjust = 3;
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
    1d5e:	8f e0       	ldi	r24, 0x0F	; 15
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 if (adjust == 2){left_degrees(15);}  
 forward_mm(500);
    1d66:	84 ef       	ldi	r24, 0xF4	; 244
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 left_degrees(rotation_value);
    1d6e:	80 ea       	ldi	r24, 0xA0	; 160
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
 stop();
    1d76:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
 
 
 if(update_animation == 'd'){
    1d7a:	80 91 8b 05 	lds	r24, 0x058B
    1d7e:	84 36       	cpi	r24, 0x64	; 100
    1d80:	19 f4       	brne	.+6      	; 0x1d88 <rotate_servo_and_transmit_after_run+0x23e>
  uart_tx('d');
    1d82:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <rotate_servo_and_transmit_after_run+0x248>
 }
 else{
  uart_tx('u');
    1d88:	85 e7       	ldi	r24, 0x75	; 117
    1d8a:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
  magnet_on();
    1d8e:	0e 94 9e 01 	call	0x33c	; 0x33c <magnet_on>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    1d92:	c4 eb       	ldi	r28, 0xB4	; 180
    1d94:	d0 e0       	ldi	r29, 0x00	; 0
  magnet_on();
 }
 
     for (int i = 180; i > 60; i--)
     {
      servo_1(i);
    1d96:	09 ee       	ldi	r16, 0xE9	; 233
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	78 01       	movw	r14, r16
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	f8 01       	movw	r30, r16
    1da0:	19 95       	eicall
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	9f e8       	ldi	r25, 0x8F	; 143
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <rotate_servo_and_transmit_after_run+0x25c>
    1daa:	00 c0       	rjmp	.+0      	; 0x1dac <rotate_servo_and_transmit_after_run+0x262>
    1dac:	00 00       	nop
 else{
  uart_tx('u');
  magnet_on();
 }
 
     for (int i = 180; i > 60; i--)
    1dae:	21 97       	sbiw	r28, 0x01	; 1
    1db0:	cc 33       	cpi	r28, 0x3C	; 60
    1db2:	d1 05       	cpc	r29, r1
    1db4:	91 f7       	brne	.-28     	; 0x1d9a <rotate_servo_and_transmit_after_run+0x250>
     {
      servo_1(i);
      _delay_ms(10);
     }
     servo_1_free();
    1db6:	02 e0       	ldi	r16, 0x02	; 2
    1db8:	11 e0       	ldi	r17, 0x01	; 1
    1dba:	f8 01       	movw	r30, r16
    1dbc:	19 95       	eicall
 
 if(update_animation == 'd'){
    1dbe:	80 91 8b 05 	lds	r24, 0x058B
    1dc2:	84 36       	cpi	r24, 0x64	; 100
    1dc4:	c9 f5       	brne	.+114    	; 0x1e38 <rotate_servo_and_transmit_after_run+0x2ee>
  magnet_off();
    1dc6:	0e 94 a2 01 	call	0x344	; 0x344 <magnet_off>
  if(water_pitcher_animation_count == 1)
    1dca:	80 91 7b 04 	lds	r24, 0x047B
    1dce:	90 91 7c 04 	lds	r25, 0x047C
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	69 f4       	brne	.+26     	; 0x1df2 <rotate_servo_and_transmit_after_run+0x2a8>
 {uart_tx('m'); water_pitcher_animation_count++;}
    1dd8:	8d e6       	ldi	r24, 0x6D	; 109
    1dda:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1dde:	80 91 7b 04 	lds	r24, 0x047B
    1de2:	90 91 7c 04 	lds	r25, 0x047C
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	90 93 7c 04 	sts	0x047C, r25
    1dec:	80 93 7b 04 	sts	0x047B, r24
    1df0:	1f c0       	rjmp	.+62     	; 0x1e30 <rotate_servo_and_transmit_after_run+0x2e6>
  else if(water_pitcher_animation_count == 2)
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	91 05       	cpc	r25, r1
    1df6:	69 f4       	brne	.+26     	; 0x1e12 <rotate_servo_and_transmit_after_run+0x2c8>
 {uart_tx('h');water_pitcher_animation_count++;}
    1df8:	88 e6       	ldi	r24, 0x68	; 104
    1dfa:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1dfe:	80 91 7b 04 	lds	r24, 0x047B
    1e02:	90 91 7c 04 	lds	r25, 0x047C
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	90 93 7c 04 	sts	0x047C, r25
    1e0c:	80 93 7b 04 	sts	0x047B, r24
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <rotate_servo_and_transmit_after_run+0x2e6>
  else if(water_pitcher_animation_count == 3)
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	91 05       	cpc	r25, r1
    1e16:	61 f4       	brne	.+24     	; 0x1e30 <rotate_servo_and_transmit_after_run+0x2e6>
 {uart_tx('f');water_pitcher_animation_count++;}
    1e18:	86 e6       	ldi	r24, 0x66	; 102
    1e1a:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1e1e:	80 91 7b 04 	lds	r24, 0x047B
    1e22:	90 91 7c 04 	lds	r25, 0x047C
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	90 93 7c 04 	sts	0x047C, r25
    1e2c:	80 93 7b 04 	sts	0x047B, r24

 uart_tx('n');
    1e30:	8e e6       	ldi	r24, 0x6E	; 110
    1e32:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1e36:	16 c0       	rjmp	.+44     	; 0x1e64 <rotate_servo_and_transmit_after_run+0x31a>
}
else{
 if(update_animation == 'a'){
    1e38:	81 36       	cpi	r24, 0x61	; 97
    1e3a:	19 f4       	brne	.+6      	; 0x1e42 <rotate_servo_and_transmit_after_run+0x2f8>
  uart_tx('p');
    1e3c:	80 e7       	ldi	r24, 0x70	; 112
    1e3e:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'b'){
    1e42:	80 91 8b 05 	lds	r24, 0x058B
    1e46:	82 36       	cpi	r24, 0x62	; 98
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <rotate_servo_and_transmit_after_run+0x306>
 uart_tx('q');
    1e4a:	81 e7       	ldi	r24, 0x71	; 113
    1e4c:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'c'){
    1e50:	80 91 8b 05 	lds	r24, 0x058B
    1e54:	83 36       	cpi	r24, 0x63	; 99
    1e56:	19 f4       	brne	.+6      	; 0x1e5e <rotate_servo_and_transmit_after_run+0x314>
 uart_tx('r');
    1e58:	82 e7       	ldi	r24, 0x72	; 114
    1e5a:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
    uart_tx('w');
    1e5e:	87 e7       	ldi	r24, 0x77	; 119
    1e60:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    1e64:	cc e3       	ldi	r28, 0x3C	; 60
    1e66:	d0 e0       	ldi	r29, 0x00	; 0
    uart_tx('w');
}
 
     for (int i = 60; i < 180; i++)
     {
      servo_1(i);
    1e68:	ce 01       	movw	r24, r28
    1e6a:	f7 01       	movw	r30, r14
    1e6c:	19 95       	eicall
    1e6e:	af ef       	ldi	r26, 0xFF	; 255
    1e70:	bf e8       	ldi	r27, 0x8F	; 143
    1e72:	11 97       	sbiw	r26, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <rotate_servo_and_transmit_after_run+0x328>
    1e76:	00 c0       	rjmp	.+0      	; 0x1e78 <rotate_servo_and_transmit_after_run+0x32e>
    1e78:	00 00       	nop
 uart_tx('r');
}
    uart_tx('w');
}
 
     for (int i = 60; i < 180; i++)
    1e7a:	21 96       	adiw	r28, 0x01	; 1
    1e7c:	c4 3b       	cpi	r28, 0xB4	; 180
    1e7e:	d1 05       	cpc	r29, r1
    1e80:	99 f7       	brne	.-26     	; 0x1e68 <rotate_servo_and_transmit_after_run+0x31e>
     {
      servo_1(i);
      _delay_ms(10);
     }
     servo_1_free(); 
    1e82:	f8 01       	movw	r30, r16
    1e84:	19 95       	eicall
}
servo_1_free(); 

 }
 
 else if((front_axis == 1) && (destination_axis == 2)){
    1e86:	08 c4       	rjmp	.+2064   	; 0x2698 <__stack+0x499>
     }
     servo_1_free(); 
  
 }
 
 else if((front_axis == 2) && (destination_axis == 1)){
    1e88:	82 30       	cpi	r24, 0x02	; 2
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <rotate_servo_and_transmit_after_run+0x346>
    1e8e:	98 c1       	rjmp	.+816    	; 0x21c0 <rotate_servo_and_transmit_after_run+0x676>
    1e90:	20 91 99 05 	lds	r18, 0x0599
    1e94:	30 91 9a 05 	lds	r19, 0x059A
    1e98:	21 30       	cpi	r18, 0x01	; 1
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <rotate_servo_and_transmit_after_run+0x356>
    1e9e:	c6 c0       	rjmp	.+396    	; 0x202c <rotate_servo_and_transmit_after_run+0x4e2>
 forward_mm(250);
    1ea0:	8a ef       	ldi	r24, 0xFA	; 250
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 int adjust = 0;
 while (1)
 {
  velocity(125, 130);   //131,109.53
    1ea8:	8d e7       	ldi	r24, 0x7D	; 125
    1eaa:	62 e8       	ldi	r22, 0x82	; 130
    1eac:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
  backward();
    1eb0:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
  Left_white_line = ADC_Conversion(3);
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1eba:	80 93 e6 04 	sts	0x04E6, r24
  Center_white_line = ADC_Conversion(2);
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1ec4:	80 93 e5 04 	sts	0x04E5, r24
  Right_white_line = ADC_Conversion(1);
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    1ece:	80 93 e4 04 	sts	0x04E4, r24
  if(Center_white_line<line_thres && Left_white_line>line_thres && Right_white_line<line_thres)//BWW
    1ed2:	90 91 e5 04 	lds	r25, 0x04E5
    1ed6:	95 31       	cpi	r25, 0x15	; 21
    1ed8:	58 f4       	brcc	.+22     	; 0x1ef0 <rotate_servo_and_transmit_after_run+0x3a6>
    1eda:	20 91 e6 04 	lds	r18, 0x04E6
    1ede:	26 31       	cpi	r18, 0x16	; 22
    1ee0:	10 f0       	brcs	.+4      	; 0x1ee6 <rotate_servo_and_transmit_after_run+0x39c>
    1ee2:	85 31       	cpi	r24, 0x15	; 21
    1ee4:	70 f0       	brcs	.+28     	; 0x1f02 <rotate_servo_and_transmit_after_run+0x3b8>
  {
   adjust = 1;
   break;
  }
  
  else if(Center_white_line<line_thres && Left_white_line<line_thres && Right_white_line>line_thres)//WWB
    1ee6:	25 31       	cpi	r18, 0x15	; 21
    1ee8:	18 f4       	brcc	.+6      	; 0x1ef0 <rotate_servo_and_transmit_after_run+0x3a6>
    1eea:	86 31       	cpi	r24, 0x16	; 22
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <rotate_servo_and_transmit_after_run+0x3a6>
    1eee:	e7 c3       	rjmp	.+1998   	; 0x26be <__stack+0x4bf>
  {
   adjust = 2;
   break;
  }
  
  else if(Center_white_line>line_thres && Left_white_line>line_thres && Right_white_line>line_thres)
    1ef0:	96 31       	cpi	r25, 0x16	; 22
    1ef2:	d0 f2       	brcs	.-76     	; 0x1ea8 <rotate_servo_and_transmit_after_run+0x35e>
    1ef4:	90 91 e6 04 	lds	r25, 0x04E6
    1ef8:	96 31       	cpi	r25, 0x16	; 22
    1efa:	b0 f2       	brcs	.-84     	; 0x1ea8 <rotate_servo_and_transmit_after_run+0x35e>
    1efc:	86 31       	cpi	r24, 0x16	; 22
    1efe:	a0 f2       	brcs	.-88     	; 0x1ea8 <rotate_servo_and_transmit_after_run+0x35e>
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <rotate_servo_and_transmit_after_run+0x3c0>
   adjust = 3;
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
    1f02:	8f e0       	ldi	r24, 0x0F	; 15
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 if (adjust == 2){left_degrees(15);}  
 forward_mm(500);
    1f0a:	84 ef       	ldi	r24, 0xF4	; 244
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 right_degrees(rotation_value);
    1f12:	80 ea       	ldi	r24, 0xA0	; 160
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 stop(); 
    1f1a:	0e 94 b1 01 	call	0x362	; 0x362 <stop>

if(update_animation == 'd'){
    1f1e:	80 91 8b 05 	lds	r24, 0x058B
    1f22:	84 36       	cpi	r24, 0x64	; 100
    1f24:	19 f4       	brne	.+6      	; 0x1f2c <rotate_servo_and_transmit_after_run+0x3e2>
 uart_tx('d');
    1f26:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <rotate_servo_and_transmit_after_run+0x3ec>
}
else{
 uart_tx('u');
    1f2c:	85 e7       	ldi	r24, 0x75	; 117
    1f2e:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
 magnet_on();
    1f32:	0e 94 9e 01 	call	0x33c	; 0x33c <magnet_on>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    1f36:	c4 eb       	ldi	r28, 0xB4	; 180
    1f38:	d0 e0       	ldi	r29, 0x00	; 0
 uart_tx('u');
 magnet_on();
}
      for (int i = 180; i > 60; i--)
      {
       servo_1(i);
    1f3a:	09 ee       	ldi	r16, 0xE9	; 233
    1f3c:	10 e0       	ldi	r17, 0x00	; 0
    1f3e:	78 01       	movw	r14, r16
    1f40:	ce 01       	movw	r24, r28
    1f42:	f8 01       	movw	r30, r16
    1f44:	19 95       	eicall
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	9f e8       	ldi	r25, 0x8F	; 143
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <rotate_servo_and_transmit_after_run+0x400>
    1f4e:	00 c0       	rjmp	.+0      	; 0x1f50 <rotate_servo_and_transmit_after_run+0x406>
    1f50:	00 00       	nop
}
else{
 uart_tx('u');
 magnet_on();
}
      for (int i = 180; i > 60; i--)
    1f52:	21 97       	sbiw	r28, 0x01	; 1
    1f54:	cc 33       	cpi	r28, 0x3C	; 60
    1f56:	d1 05       	cpc	r29, r1
    1f58:	91 f7       	brne	.-28     	; 0x1f3e <rotate_servo_and_transmit_after_run+0x3f4>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    1f5a:	02 e0       	ldi	r16, 0x02	; 2
    1f5c:	11 e0       	ldi	r17, 0x01	; 1
    1f5e:	f8 01       	movw	r30, r16
    1f60:	19 95       	eicall
   
   if(update_animation == 'd'){
    1f62:	80 91 8b 05 	lds	r24, 0x058B
    1f66:	84 36       	cpi	r24, 0x64	; 100
    1f68:	c9 f5       	brne	.+114    	; 0x1fdc <rotate_servo_and_transmit_after_run+0x492>
    magnet_off();
    1f6a:	0e 94 a2 01 	call	0x344	; 0x344 <magnet_off>
    if(water_pitcher_animation_count == 1)
    1f6e:	80 91 7b 04 	lds	r24, 0x047B
    1f72:	90 91 7c 04 	lds	r25, 0x047C
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	69 f4       	brne	.+26     	; 0x1f96 <rotate_servo_and_transmit_after_run+0x44c>
   {uart_tx('m'); water_pitcher_animation_count++;}
    1f7c:	8d e6       	ldi	r24, 0x6D	; 109
    1f7e:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1f82:	80 91 7b 04 	lds	r24, 0x047B
    1f86:	90 91 7c 04 	lds	r25, 0x047C
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	90 93 7c 04 	sts	0x047C, r25
    1f90:	80 93 7b 04 	sts	0x047B, r24
    1f94:	1f c0       	rjmp	.+62     	; 0x1fd4 <rotate_servo_and_transmit_after_run+0x48a>
    else if(water_pitcher_animation_count == 2)
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	91 05       	cpc	r25, r1
    1f9a:	69 f4       	brne	.+26     	; 0x1fb6 <rotate_servo_and_transmit_after_run+0x46c>
   {uart_tx('h');water_pitcher_animation_count++;}
    1f9c:	88 e6       	ldi	r24, 0x68	; 104
    1f9e:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1fa2:	80 91 7b 04 	lds	r24, 0x047B
    1fa6:	90 91 7c 04 	lds	r25, 0x047C
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	90 93 7c 04 	sts	0x047C, r25
    1fb0:	80 93 7b 04 	sts	0x047B, r24
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <rotate_servo_and_transmit_after_run+0x48a>
    else if(water_pitcher_animation_count == 3)
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	91 05       	cpc	r25, r1
    1fba:	61 f4       	brne	.+24     	; 0x1fd4 <rotate_servo_and_transmit_after_run+0x48a>
   {uart_tx('f');water_pitcher_animation_count++;}
    1fbc:	86 e6       	ldi	r24, 0x66	; 102
    1fbe:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1fc2:	80 91 7b 04 	lds	r24, 0x047B
    1fc6:	90 91 7c 04 	lds	r25, 0x047C
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	90 93 7c 04 	sts	0x047C, r25
    1fd0:	80 93 7b 04 	sts	0x047B, r24

   uart_tx('n');
    1fd4:	8e e6       	ldi	r24, 0x6E	; 110
    1fd6:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    1fda:	16 c0       	rjmp	.+44     	; 0x2008 <rotate_servo_and_transmit_after_run+0x4be>
}
else{
 if(update_animation == 'a'){
    1fdc:	81 36       	cpi	r24, 0x61	; 97
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <rotate_servo_and_transmit_after_run+0x49c>
  uart_tx('p');
    1fe0:	80 e7       	ldi	r24, 0x70	; 112
    1fe2:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'b'){
    1fe6:	80 91 8b 05 	lds	r24, 0x058B
    1fea:	82 36       	cpi	r24, 0x62	; 98
    1fec:	19 f4       	brne	.+6      	; 0x1ff4 <rotate_servo_and_transmit_after_run+0x4aa>
 uart_tx('q');
    1fee:	81 e7       	ldi	r24, 0x71	; 113
    1ff0:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'c'){
    1ff4:	80 91 8b 05 	lds	r24, 0x058B
    1ff8:	83 36       	cpi	r24, 0x63	; 99
    1ffa:	19 f4       	brne	.+6      	; 0x2002 <rotate_servo_and_transmit_after_run+0x4b8>
 uart_tx('r');
    1ffc:	82 e7       	ldi	r24, 0x72	; 114
    1ffe:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
    uart_tx('w');
    2002:	87 e7       	ldi	r24, 0x77	; 119
    2004:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    2008:	cc e3       	ldi	r28, 0x3C	; 60
    200a:	d0 e0       	ldi	r29, 0x00	; 0
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
      {
       servo_1(i);
    200c:	ce 01       	movw	r24, r28
    200e:	f7 01       	movw	r30, r14
    2010:	19 95       	eicall
    2012:	af ef       	ldi	r26, 0xFF	; 255
    2014:	bf e8       	ldi	r27, 0x8F	; 143
    2016:	11 97       	sbiw	r26, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <rotate_servo_and_transmit_after_run+0x4cc>
    201a:	00 c0       	rjmp	.+0      	; 0x201c <rotate_servo_and_transmit_after_run+0x4d2>
    201c:	00 00       	nop
 uart_tx('r');
}
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
    201e:	21 96       	adiw	r28, 0x01	; 1
    2020:	c4 3b       	cpi	r28, 0xB4	; 180
    2022:	d1 05       	cpc	r29, r1
    2024:	99 f7       	brne	.-26     	; 0x200c <rotate_servo_and_transmit_after_run+0x4c2>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    2026:	f8 01       	movw	r30, r16
    2028:	19 95       	eicall
     }
     servo_1_free(); 
  
 }
 
 else if((front_axis == 2) && (destination_axis == 1)){
    202a:	36 c3       	rjmp	.+1644   	; 0x2698 <__stack+0x499>
       _delay_ms(10);
      }
      servo_1_free();
   
 }
 else if((front_axis == 2) && (destination_axis == 3)){
    202c:	23 30       	cpi	r18, 0x03	; 3
    202e:	31 05       	cpc	r19, r1
    2030:	09 f0       	breq	.+2      	; 0x2034 <rotate_servo_and_transmit_after_run+0x4ea>
    2032:	c6 c0       	rjmp	.+396    	; 0x21c0 <rotate_servo_and_transmit_after_run+0x676>
 forward_mm(250);
    2034:	8a ef       	ldi	r24, 0xFA	; 250
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 int adjust = 0;
 while (1)
 {
  velocity(125, 130);   //131,109.53
    203c:	8d e7       	ldi	r24, 0x7D	; 125
    203e:	62 e8       	ldi	r22, 0x82	; 130
    2040:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
  backward();
    2044:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
  Left_white_line = ADC_Conversion(3);
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    204e:	80 93 e6 04 	sts	0x04E6, r24
  Center_white_line = ADC_Conversion(2);
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    2058:	80 93 e5 04 	sts	0x04E5, r24
  Right_white_line = ADC_Conversion(1);
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    2062:	80 93 e4 04 	sts	0x04E4, r24
  if(Center_white_line<line_thres && Left_white_line>line_thres && Right_white_line<line_thres)//BWW
    2066:	90 91 e5 04 	lds	r25, 0x04E5
    206a:	95 31       	cpi	r25, 0x15	; 21
    206c:	58 f4       	brcc	.+22     	; 0x2084 <rotate_servo_and_transmit_after_run+0x53a>
    206e:	20 91 e6 04 	lds	r18, 0x04E6
    2072:	26 31       	cpi	r18, 0x16	; 22
    2074:	10 f0       	brcs	.+4      	; 0x207a <rotate_servo_and_transmit_after_run+0x530>
    2076:	85 31       	cpi	r24, 0x15	; 21
    2078:	70 f0       	brcs	.+28     	; 0x2096 <rotate_servo_and_transmit_after_run+0x54c>
  {
   adjust = 1;
   break;
  }
  
  else if(Center_white_line<line_thres && Left_white_line<line_thres && Right_white_line>line_thres)//WWB
    207a:	25 31       	cpi	r18, 0x15	; 21
    207c:	18 f4       	brcc	.+6      	; 0x2084 <rotate_servo_and_transmit_after_run+0x53a>
    207e:	86 31       	cpi	r24, 0x16	; 22
    2080:	08 f0       	brcs	.+2      	; 0x2084 <rotate_servo_and_transmit_after_run+0x53a>
    2082:	22 c3       	rjmp	.+1604   	; 0x26c8 <__stack+0x4c9>
  {
   adjust = 2;
   break;
  }
  
  else if(Center_white_line>line_thres && Left_white_line>line_thres && Right_white_line>line_thres)
    2084:	96 31       	cpi	r25, 0x16	; 22
    2086:	d0 f2       	brcs	.-76     	; 0x203c <rotate_servo_and_transmit_after_run+0x4f2>
    2088:	90 91 e6 04 	lds	r25, 0x04E6
    208c:	96 31       	cpi	r25, 0x16	; 22
    208e:	b0 f2       	brcs	.-84     	; 0x203c <rotate_servo_and_transmit_after_run+0x4f2>
    2090:	86 31       	cpi	r24, 0x16	; 22
    2092:	a0 f2       	brcs	.-88     	; 0x203c <rotate_servo_and_transmit_after_run+0x4f2>
    2094:	04 c0       	rjmp	.+8      	; 0x209e <rotate_servo_and_transmit_after_run+0x554>
   adjust = 3;
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
    2096:	8f e0       	ldi	r24, 0x0F	; 15
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 if (adjust == 2){left_degrees(15);}  
 forward_mm(500);
    209e:	84 ef       	ldi	r24, 0xF4	; 244
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 left_degrees(rotation_value);
    20a6:	80 ea       	ldi	r24, 0xA0	; 160
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
 stop(); 
    20ae:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
 
 
 if(update_animation == 'd'){
    20b2:	80 91 8b 05 	lds	r24, 0x058B
    20b6:	84 36       	cpi	r24, 0x64	; 100
    20b8:	19 f4       	brne	.+6      	; 0x20c0 <rotate_servo_and_transmit_after_run+0x576>
  uart_tx('d');
    20ba:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <rotate_servo_and_transmit_after_run+0x580>
 }
 else{
  uart_tx('u');
    20c0:	85 e7       	ldi	r24, 0x75	; 117
    20c2:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
  magnet_on();
    20c6:	0e 94 9e 01 	call	0x33c	; 0x33c <magnet_on>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    20ca:	c4 eb       	ldi	r28, 0xB4	; 180
    20cc:	d0 e0       	ldi	r29, 0x00	; 0
  uart_tx('u');
  magnet_on();
 }
    for (int i = 180; i > 60; i--)
      {
       servo_1(i);
    20ce:	09 ee       	ldi	r16, 0xE9	; 233
    20d0:	10 e0       	ldi	r17, 0x00	; 0
    20d2:	78 01       	movw	r14, r16
    20d4:	ce 01       	movw	r24, r28
    20d6:	f8 01       	movw	r30, r16
    20d8:	19 95       	eicall
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	9f e8       	ldi	r25, 0x8F	; 143
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <rotate_servo_and_transmit_after_run+0x594>
    20e2:	00 c0       	rjmp	.+0      	; 0x20e4 <rotate_servo_and_transmit_after_run+0x59a>
    20e4:	00 00       	nop
 }
 else{
  uart_tx('u');
  magnet_on();
 }
    for (int i = 180; i > 60; i--)
    20e6:	21 97       	sbiw	r28, 0x01	; 1
    20e8:	cc 33       	cpi	r28, 0x3C	; 60
    20ea:	d1 05       	cpc	r29, r1
    20ec:	91 f7       	brne	.-28     	; 0x20d2 <rotate_servo_and_transmit_after_run+0x588>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    20ee:	02 e0       	ldi	r16, 0x02	; 2
    20f0:	11 e0       	ldi	r17, 0x01	; 1
    20f2:	f8 01       	movw	r30, r16
    20f4:	19 95       	eicall
   
   if(update_animation == 'd'){
    20f6:	80 91 8b 05 	lds	r24, 0x058B
    20fa:	84 36       	cpi	r24, 0x64	; 100
    20fc:	c9 f5       	brne	.+114    	; 0x2170 <rotate_servo_and_transmit_after_run+0x626>
    magnet_off();
    20fe:	0e 94 a2 01 	call	0x344	; 0x344 <magnet_off>
    if(water_pitcher_animation_count == 1)
    2102:	80 91 7b 04 	lds	r24, 0x047B
    2106:	90 91 7c 04 	lds	r25, 0x047C
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	91 05       	cpc	r25, r1
    210e:	69 f4       	brne	.+26     	; 0x212a <rotate_servo_and_transmit_after_run+0x5e0>
   {uart_tx('m'); water_pitcher_animation_count++;}
    2110:	8d e6       	ldi	r24, 0x6D	; 109
    2112:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2116:	80 91 7b 04 	lds	r24, 0x047B
    211a:	90 91 7c 04 	lds	r25, 0x047C
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	90 93 7c 04 	sts	0x047C, r25
    2124:	80 93 7b 04 	sts	0x047B, r24
    2128:	1f c0       	rjmp	.+62     	; 0x2168 <rotate_servo_and_transmit_after_run+0x61e>
    else if(water_pitcher_animation_count == 2)
    212a:	82 30       	cpi	r24, 0x02	; 2
    212c:	91 05       	cpc	r25, r1
    212e:	69 f4       	brne	.+26     	; 0x214a <rotate_servo_and_transmit_after_run+0x600>
   {uart_tx('h');water_pitcher_animation_count++;}
    2130:	88 e6       	ldi	r24, 0x68	; 104
    2132:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2136:	80 91 7b 04 	lds	r24, 0x047B
    213a:	90 91 7c 04 	lds	r25, 0x047C
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	90 93 7c 04 	sts	0x047C, r25
    2144:	80 93 7b 04 	sts	0x047B, r24
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <rotate_servo_and_transmit_after_run+0x61e>
    else if(water_pitcher_animation_count == 3)
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	91 05       	cpc	r25, r1
    214e:	61 f4       	brne	.+24     	; 0x2168 <rotate_servo_and_transmit_after_run+0x61e>
   {uart_tx('f');water_pitcher_animation_count++;}
    2150:	86 e6       	ldi	r24, 0x66	; 102
    2152:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2156:	80 91 7b 04 	lds	r24, 0x047B
    215a:	90 91 7c 04 	lds	r25, 0x047C
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	90 93 7c 04 	sts	0x047C, r25
    2164:	80 93 7b 04 	sts	0x047B, r24

   uart_tx('n');
    2168:	8e e6       	ldi	r24, 0x6E	; 110
    216a:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    216e:	16 c0       	rjmp	.+44     	; 0x219c <rotate_servo_and_transmit_after_run+0x652>
}
else{
 if(update_animation == 'a'){
    2170:	81 36       	cpi	r24, 0x61	; 97
    2172:	19 f4       	brne	.+6      	; 0x217a <rotate_servo_and_transmit_after_run+0x630>
  uart_tx('p');
    2174:	80 e7       	ldi	r24, 0x70	; 112
    2176:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'b'){
    217a:	80 91 8b 05 	lds	r24, 0x058B
    217e:	82 36       	cpi	r24, 0x62	; 98
    2180:	19 f4       	brne	.+6      	; 0x2188 <rotate_servo_and_transmit_after_run+0x63e>
 uart_tx('q');
    2182:	81 e7       	ldi	r24, 0x71	; 113
    2184:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'c'){
    2188:	80 91 8b 05 	lds	r24, 0x058B
    218c:	83 36       	cpi	r24, 0x63	; 99
    218e:	19 f4       	brne	.+6      	; 0x2196 <rotate_servo_and_transmit_after_run+0x64c>
 uart_tx('r');
    2190:	82 e7       	ldi	r24, 0x72	; 114
    2192:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
    uart_tx('w');
    2196:	87 e7       	ldi	r24, 0x77	; 119
    2198:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    219c:	cc e3       	ldi	r28, 0x3C	; 60
    219e:	d0 e0       	ldi	r29, 0x00	; 0
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
      {
       servo_1(i);
    21a0:	ce 01       	movw	r24, r28
    21a2:	f7 01       	movw	r30, r14
    21a4:	19 95       	eicall
    21a6:	af ef       	ldi	r26, 0xFF	; 255
    21a8:	bf e8       	ldi	r27, 0x8F	; 143
    21aa:	11 97       	sbiw	r26, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <rotate_servo_and_transmit_after_run+0x660>
    21ae:	00 c0       	rjmp	.+0      	; 0x21b0 <rotate_servo_and_transmit_after_run+0x666>
    21b0:	00 00       	nop
 uart_tx('r');
}
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
    21b2:	21 96       	adiw	r28, 0x01	; 1
    21b4:	c4 3b       	cpi	r28, 0xB4	; 180
    21b6:	d1 05       	cpc	r29, r1
    21b8:	99 f7       	brne	.-26     	; 0x21a0 <rotate_servo_and_transmit_after_run+0x656>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    21ba:	f8 01       	movw	r30, r16
    21bc:	19 95       	eicall
       _delay_ms(10);
      }
      servo_1_free();
   
 }
 else if((front_axis == 2) && (destination_axis == 3)){
    21be:	6c c2       	rjmp	.+1240   	; 0x2698 <__stack+0x499>
       _delay_ms(10);
      }
      servo_1_free();
   
 }
 else if((front_axis == 3) && (destination_axis == 1)){
    21c0:	83 30       	cpi	r24, 0x03	; 3
    21c2:	91 05       	cpc	r25, r1
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <rotate_servo_and_transmit_after_run+0x67e>
    21c6:	a3 c1       	rjmp	.+838    	; 0x250e <__stack+0x30f>
    21c8:	80 91 99 05 	lds	r24, 0x0599
    21cc:	90 91 9a 05 	lds	r25, 0x059A
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <rotate_servo_and_transmit_after_run+0x68e>
    21d6:	c6 c0       	rjmp	.+396    	; 0x2364 <__stack+0x165>
 forward_mm(250);
    21d8:	8a ef       	ldi	r24, 0xFA	; 250
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 int adjust = 0;
 while (1)
 {
  velocity(125, 130);   //131,109.53
    21e0:	8d e7       	ldi	r24, 0x7D	; 125
    21e2:	62 e8       	ldi	r22, 0x82	; 130
    21e4:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
  backward();
    21e8:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
  Left_white_line = ADC_Conversion(3);
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    21f2:	80 93 e6 04 	sts	0x04E6, r24
  Center_white_line = ADC_Conversion(2);
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    21fc:	80 93 e5 04 	sts	0x04E5, r24
  Right_white_line = ADC_Conversion(1);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    2206:	80 93 e4 04 	sts	0x04E4, r24
  if(Center_white_line<line_thres && Left_white_line>line_thres && Right_white_line<line_thres)//BWW
    220a:	90 91 e5 04 	lds	r25, 0x04E5
    220e:	95 31       	cpi	r25, 0x15	; 21
    2210:	58 f4       	brcc	.+22     	; 0x2228 <__stack+0x29>
    2212:	20 91 e6 04 	lds	r18, 0x04E6
    2216:	26 31       	cpi	r18, 0x16	; 22
    2218:	10 f0       	brcs	.+4      	; 0x221e <__stack+0x1f>
    221a:	85 31       	cpi	r24, 0x15	; 21
    221c:	70 f0       	brcs	.+28     	; 0x223a <__stack+0x3b>
  {
   adjust = 1;
   break;
  }
  
  else if(Center_white_line<line_thres && Left_white_line<line_thres && Right_white_line>line_thres)//WWB
    221e:	25 31       	cpi	r18, 0x15	; 21
    2220:	18 f4       	brcc	.+6      	; 0x2228 <__stack+0x29>
    2222:	86 31       	cpi	r24, 0x16	; 22
    2224:	08 f0       	brcs	.+2      	; 0x2228 <__stack+0x29>
    2226:	55 c2       	rjmp	.+1194   	; 0x26d2 <__stack+0x4d3>
  {
   adjust = 2;
   break;
  }
  
  else if(Center_white_line>line_thres && Left_white_line>line_thres && Right_white_line>line_thres)
    2228:	96 31       	cpi	r25, 0x16	; 22
    222a:	d0 f2       	brcs	.-76     	; 0x21e0 <rotate_servo_and_transmit_after_run+0x696>
    222c:	90 91 e6 04 	lds	r25, 0x04E6
    2230:	96 31       	cpi	r25, 0x16	; 22
    2232:	b0 f2       	brcs	.-84     	; 0x21e0 <rotate_servo_and_transmit_after_run+0x696>
    2234:	86 31       	cpi	r24, 0x16	; 22
    2236:	a0 f2       	brcs	.-88     	; 0x21e0 <rotate_servo_and_transmit_after_run+0x696>
    2238:	04 c0       	rjmp	.+8      	; 0x2242 <__stack+0x43>
   adjust = 3;
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
    223a:	8f e0       	ldi	r24, 0x0F	; 15
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 if (adjust == 2){left_degrees(15);}  
 forward_mm(500);	 
    2242:	84 ef       	ldi	r24, 0xF4	; 244
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 left_degrees(rotation_value);
    224a:	80 ea       	ldi	r24, 0xA0	; 160
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
 stop(); 
    2252:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
 
 
 if(update_animation == 'd'){
    2256:	80 91 8b 05 	lds	r24, 0x058B
    225a:	84 36       	cpi	r24, 0x64	; 100
    225c:	19 f4       	brne	.+6      	; 0x2264 <__stack+0x65>
  uart_tx('d');
    225e:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2262:	05 c0       	rjmp	.+10     	; 0x226e <__stack+0x6f>
 }
 else{
  uart_tx('u');
    2264:	85 e7       	ldi	r24, 0x75	; 117
    2266:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
  magnet_on();
    226a:	0e 94 9e 01 	call	0x33c	; 0x33c <magnet_on>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    226e:	c4 eb       	ldi	r28, 0xB4	; 180
    2270:	d0 e0       	ldi	r29, 0x00	; 0
  uart_tx('u');
  magnet_on();
 }
   for (int i = 180; i > 60; i--)
      {
       servo_1(i);
    2272:	09 ee       	ldi	r16, 0xE9	; 233
    2274:	10 e0       	ldi	r17, 0x00	; 0
    2276:	78 01       	movw	r14, r16
    2278:	ce 01       	movw	r24, r28
    227a:	f8 01       	movw	r30, r16
    227c:	19 95       	eicall
    227e:	8f ef       	ldi	r24, 0xFF	; 255
    2280:	9f e8       	ldi	r25, 0x8F	; 143
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <__stack+0x83>
    2286:	00 c0       	rjmp	.+0      	; 0x2288 <__stack+0x89>
    2288:	00 00       	nop
 }
 else{
  uart_tx('u');
  magnet_on();
 }
   for (int i = 180; i > 60; i--)
    228a:	21 97       	sbiw	r28, 0x01	; 1
    228c:	cc 33       	cpi	r28, 0x3C	; 60
    228e:	d1 05       	cpc	r29, r1
    2290:	91 f7       	brne	.-28     	; 0x2276 <__stack+0x77>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    2292:	02 e0       	ldi	r16, 0x02	; 2
    2294:	11 e0       	ldi	r17, 0x01	; 1
    2296:	f8 01       	movw	r30, r16
    2298:	19 95       	eicall
 
   if(update_animation == 'd'){
    229a:	80 91 8b 05 	lds	r24, 0x058B
    229e:	84 36       	cpi	r24, 0x64	; 100
    22a0:	c9 f5       	brne	.+114    	; 0x2314 <__stack+0x115>
    magnet_off();
    22a2:	0e 94 a2 01 	call	0x344	; 0x344 <magnet_off>
    if(water_pitcher_animation_count == 1)
    22a6:	80 91 7b 04 	lds	r24, 0x047B
    22aa:	90 91 7c 04 	lds	r25, 0x047C
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	91 05       	cpc	r25, r1
    22b2:	69 f4       	brne	.+26     	; 0x22ce <__stack+0xcf>
   {uart_tx('m'); water_pitcher_animation_count++;}
    22b4:	8d e6       	ldi	r24, 0x6D	; 109
    22b6:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    22ba:	80 91 7b 04 	lds	r24, 0x047B
    22be:	90 91 7c 04 	lds	r25, 0x047C
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	90 93 7c 04 	sts	0x047C, r25
    22c8:	80 93 7b 04 	sts	0x047B, r24
    22cc:	1f c0       	rjmp	.+62     	; 0x230c <__stack+0x10d>
    else if(water_pitcher_animation_count == 2)
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	91 05       	cpc	r25, r1
    22d2:	69 f4       	brne	.+26     	; 0x22ee <__stack+0xef>
   {uart_tx('h');water_pitcher_animation_count++;}
    22d4:	88 e6       	ldi	r24, 0x68	; 104
    22d6:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    22da:	80 91 7b 04 	lds	r24, 0x047B
    22de:	90 91 7c 04 	lds	r25, 0x047C
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	90 93 7c 04 	sts	0x047C, r25
    22e8:	80 93 7b 04 	sts	0x047B, r24
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <__stack+0x10d>
    else if(water_pitcher_animation_count == 3)
    22ee:	83 30       	cpi	r24, 0x03	; 3
    22f0:	91 05       	cpc	r25, r1
    22f2:	61 f4       	brne	.+24     	; 0x230c <__stack+0x10d>
   {uart_tx('f');water_pitcher_animation_count++;}
    22f4:	86 e6       	ldi	r24, 0x66	; 102
    22f6:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    22fa:	80 91 7b 04 	lds	r24, 0x047B
    22fe:	90 91 7c 04 	lds	r25, 0x047C
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	90 93 7c 04 	sts	0x047C, r25
    2308:	80 93 7b 04 	sts	0x047B, r24

   uart_tx('n');
    230c:	8e e6       	ldi	r24, 0x6E	; 110
    230e:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2312:	16 c0       	rjmp	.+44     	; 0x2340 <__stack+0x141>
}
else{
 if(update_animation == 'a'){
    2314:	81 36       	cpi	r24, 0x61	; 97
    2316:	19 f4       	brne	.+6      	; 0x231e <__stack+0x11f>
  uart_tx('p');
    2318:	80 e7       	ldi	r24, 0x70	; 112
    231a:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'b'){
    231e:	80 91 8b 05 	lds	r24, 0x058B
    2322:	82 36       	cpi	r24, 0x62	; 98
    2324:	19 f4       	brne	.+6      	; 0x232c <__stack+0x12d>
 uart_tx('q');
    2326:	81 e7       	ldi	r24, 0x71	; 113
    2328:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'c'){
    232c:	80 91 8b 05 	lds	r24, 0x058B
    2330:	83 36       	cpi	r24, 0x63	; 99
    2332:	19 f4       	brne	.+6      	; 0x233a <__stack+0x13b>
 uart_tx('r');
    2334:	82 e7       	ldi	r24, 0x72	; 114
    2336:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
    uart_tx('w');
    233a:	87 e7       	ldi	r24, 0x77	; 119
    233c:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    2340:	cc e3       	ldi	r28, 0x3C	; 60
    2342:	d0 e0       	ldi	r29, 0x00	; 0
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
      {
       servo_1(i);
    2344:	ce 01       	movw	r24, r28
    2346:	f7 01       	movw	r30, r14
    2348:	19 95       	eicall
    234a:	af ef       	ldi	r26, 0xFF	; 255
    234c:	bf e8       	ldi	r27, 0x8F	; 143
    234e:	11 97       	sbiw	r26, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <__stack+0x14f>
    2352:	00 c0       	rjmp	.+0      	; 0x2354 <__stack+0x155>
    2354:	00 00       	nop
 uart_tx('r');
}
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
    2356:	21 96       	adiw	r28, 0x01	; 1
    2358:	c4 3b       	cpi	r28, 0xB4	; 180
    235a:	d1 05       	cpc	r29, r1
    235c:	99 f7       	brne	.-26     	; 0x2344 <__stack+0x145>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    235e:	f8 01       	movw	r30, r16
    2360:	19 95       	eicall
       _delay_ms(10);
      }
      servo_1_free();
   
 }
 else if((front_axis == 3) && (destination_axis == 1)){
    2362:	9a c1       	rjmp	.+820    	; 0x2698 <__stack+0x499>
       _delay_ms(10);
      }
      servo_1_free();
   
 }
 else if((front_axis == 3) && (destination_axis == 2)){
    2364:	82 30       	cpi	r24, 0x02	; 2
    2366:	91 05       	cpc	r25, r1
    2368:	09 f0       	breq	.+2      	; 0x236c <__stack+0x16d>
    236a:	d1 c0       	rjmp	.+418    	; 0x250e <__stack+0x30f>
 forward_mm(250);
    236c:	8a ef       	ldi	r24, 0xFA	; 250
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 int adjust = 0;
 while (1)
 {
  velocity(125, 130);   //131,109.53
    2374:	8d e7       	ldi	r24, 0x7D	; 125
    2376:	62 e8       	ldi	r22, 0x82	; 130
    2378:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
  backward();
    237c:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
  Left_white_line = ADC_Conversion(3);
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    2386:	80 93 e6 04 	sts	0x04E6, r24
  Center_white_line = ADC_Conversion(2);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    2390:	80 93 e5 04 	sts	0x04E5, r24
  Right_white_line = ADC_Conversion(1);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    239a:	80 93 e4 04 	sts	0x04E4, r24
  if(Center_white_line<line_thres && Left_white_line>line_thres && Right_white_line<line_thres)//BWW
    239e:	90 91 e5 04 	lds	r25, 0x04E5
    23a2:	95 31       	cpi	r25, 0x15	; 21
    23a4:	58 f4       	brcc	.+22     	; 0x23bc <__stack+0x1bd>
    23a6:	20 91 e6 04 	lds	r18, 0x04E6
    23aa:	26 31       	cpi	r18, 0x16	; 22
    23ac:	10 f0       	brcs	.+4      	; 0x23b2 <__stack+0x1b3>
    23ae:	85 31       	cpi	r24, 0x15	; 21
    23b0:	70 f0       	brcs	.+28     	; 0x23ce <__stack+0x1cf>
  {
   adjust = 1;
   break;
  }
  
  else if(Center_white_line<line_thres && Left_white_line<line_thres && Right_white_line>line_thres)//WWB
    23b2:	25 31       	cpi	r18, 0x15	; 21
    23b4:	18 f4       	brcc	.+6      	; 0x23bc <__stack+0x1bd>
    23b6:	86 31       	cpi	r24, 0x16	; 22
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <__stack+0x1bd>
    23ba:	90 c1       	rjmp	.+800    	; 0x26dc <__stack+0x4dd>
  {
   adjust = 2;
   break;
  }
  
  else if(Center_white_line>line_thres && Left_white_line>line_thres && Right_white_line>line_thres)
    23bc:	96 31       	cpi	r25, 0x16	; 22
    23be:	d0 f2       	brcs	.-76     	; 0x2374 <__stack+0x175>
    23c0:	90 91 e6 04 	lds	r25, 0x04E6
    23c4:	96 31       	cpi	r25, 0x16	; 22
    23c6:	b0 f2       	brcs	.-84     	; 0x2374 <__stack+0x175>
    23c8:	86 31       	cpi	r24, 0x16	; 22
    23ca:	a0 f2       	brcs	.-88     	; 0x2374 <__stack+0x175>
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <__stack+0x1d7>
   adjust = 3;
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
    23ce:	8f e0       	ldi	r24, 0x0F	; 15
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 if (adjust == 2){left_degrees(15);}  
 forward_mm(500);
    23d6:	84 ef       	ldi	r24, 0xF4	; 244
    23d8:	91 e0       	ldi	r25, 0x01	; 1
    23da:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 stop();
    23de:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
    23e2:	8f ef       	ldi	r24, 0xFF	; 255
    23e4:	9f ef       	ldi	r25, 0xFF	; 255
    23e6:	ac e2       	ldi	r26, 0x2C	; 44
    23e8:	81 50       	subi	r24, 0x01	; 1
    23ea:	90 40       	sbci	r25, 0x00	; 0
    23ec:	a0 40       	sbci	r26, 0x00	; 0
    23ee:	e1 f7       	brne	.-8      	; 0x23e8 <__stack+0x1e9>
    23f0:	00 c0       	rjmp	.+0      	; 0x23f2 <__stack+0x1f3>
    23f2:	00 00       	nop
 _delay_ms(1000);
 right_degrees(rotation_value);
    23f4:	80 ea       	ldi	r24, 0xA0	; 160
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 stop(); 
    23fc:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
 
 
 if(update_animation == 'd'){
    2400:	80 91 8b 05 	lds	r24, 0x058B
    2404:	84 36       	cpi	r24, 0x64	; 100
    2406:	19 f4       	brne	.+6      	; 0x240e <__stack+0x20f>
  uart_tx('d');
    2408:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <__stack+0x219>
 }
 else{
  uart_tx('u');
    240e:	85 e7       	ldi	r24, 0x75	; 117
    2410:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
  magnet_on();
    2414:	0e 94 9e 01 	call	0x33c	; 0x33c <magnet_on>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    2418:	c4 eb       	ldi	r28, 0xB4	; 180
    241a:	d0 e0       	ldi	r29, 0x00	; 0
  uart_tx('u');
  magnet_on();
 }
   for (int i = 180; i > 60; i--)
      {
       servo_1(i);
    241c:	09 ee       	ldi	r16, 0xE9	; 233
    241e:	10 e0       	ldi	r17, 0x00	; 0
    2420:	78 01       	movw	r14, r16
    2422:	ce 01       	movw	r24, r28
    2424:	f8 01       	movw	r30, r16
    2426:	19 95       	eicall
    2428:	af ef       	ldi	r26, 0xFF	; 255
    242a:	bf e8       	ldi	r27, 0x8F	; 143
    242c:	11 97       	sbiw	r26, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <__stack+0x22d>
    2430:	00 c0       	rjmp	.+0      	; 0x2432 <__stack+0x233>
    2432:	00 00       	nop
 }
 else{
  uart_tx('u');
  magnet_on();
 }
   for (int i = 180; i > 60; i--)
    2434:	21 97       	sbiw	r28, 0x01	; 1
    2436:	cc 33       	cpi	r28, 0x3C	; 60
    2438:	d1 05       	cpc	r29, r1
    243a:	91 f7       	brne	.-28     	; 0x2420 <__stack+0x221>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    243c:	02 e0       	ldi	r16, 0x02	; 2
    243e:	11 e0       	ldi	r17, 0x01	; 1
    2440:	f8 01       	movw	r30, r16
    2442:	19 95       	eicall
 
   if(update_animation == 'd'){
    2444:	80 91 8b 05 	lds	r24, 0x058B
    2448:	84 36       	cpi	r24, 0x64	; 100
    244a:	c9 f5       	brne	.+114    	; 0x24be <__stack+0x2bf>
    magnet_off();
    244c:	0e 94 a2 01 	call	0x344	; 0x344 <magnet_off>
    if(water_pitcher_animation_count == 1)
    2450:	80 91 7b 04 	lds	r24, 0x047B
    2454:	90 91 7c 04 	lds	r25, 0x047C
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	91 05       	cpc	r25, r1
    245c:	69 f4       	brne	.+26     	; 0x2478 <__stack+0x279>
   {uart_tx('m'); water_pitcher_animation_count++;}
    245e:	8d e6       	ldi	r24, 0x6D	; 109
    2460:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2464:	80 91 7b 04 	lds	r24, 0x047B
    2468:	90 91 7c 04 	lds	r25, 0x047C
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	90 93 7c 04 	sts	0x047C, r25
    2472:	80 93 7b 04 	sts	0x047B, r24
    2476:	1f c0       	rjmp	.+62     	; 0x24b6 <__stack+0x2b7>
    else if(water_pitcher_animation_count == 2)
    2478:	82 30       	cpi	r24, 0x02	; 2
    247a:	91 05       	cpc	r25, r1
    247c:	69 f4       	brne	.+26     	; 0x2498 <__stack+0x299>
   {uart_tx('h');water_pitcher_animation_count++;}
    247e:	88 e6       	ldi	r24, 0x68	; 104
    2480:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2484:	80 91 7b 04 	lds	r24, 0x047B
    2488:	90 91 7c 04 	lds	r25, 0x047C
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	90 93 7c 04 	sts	0x047C, r25
    2492:	80 93 7b 04 	sts	0x047B, r24
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <__stack+0x2b7>
    else if(water_pitcher_animation_count == 3)
    2498:	83 30       	cpi	r24, 0x03	; 3
    249a:	91 05       	cpc	r25, r1
    249c:	61 f4       	brne	.+24     	; 0x24b6 <__stack+0x2b7>
   {uart_tx('f');water_pitcher_animation_count++;}
    249e:	86 e6       	ldi	r24, 0x66	; 102
    24a0:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    24a4:	80 91 7b 04 	lds	r24, 0x047B
    24a8:	90 91 7c 04 	lds	r25, 0x047C
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	90 93 7c 04 	sts	0x047C, r25
    24b2:	80 93 7b 04 	sts	0x047B, r24

   uart_tx('n');
    24b6:	8e e6       	ldi	r24, 0x6E	; 110
    24b8:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    24bc:	16 c0       	rjmp	.+44     	; 0x24ea <__stack+0x2eb>
}
else{
 if(update_animation == 'a'){
    24be:	81 36       	cpi	r24, 0x61	; 97
    24c0:	19 f4       	brne	.+6      	; 0x24c8 <__stack+0x2c9>
  uart_tx('p');
    24c2:	80 e7       	ldi	r24, 0x70	; 112
    24c4:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'b'){
    24c8:	80 91 8b 05 	lds	r24, 0x058B
    24cc:	82 36       	cpi	r24, 0x62	; 98
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <__stack+0x2d7>
 uart_tx('q');
    24d0:	81 e7       	ldi	r24, 0x71	; 113
    24d2:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'c'){
    24d6:	80 91 8b 05 	lds	r24, 0x058B
    24da:	83 36       	cpi	r24, 0x63	; 99
    24dc:	19 f4       	brne	.+6      	; 0x24e4 <__stack+0x2e5>
 uart_tx('r');
    24de:	82 e7       	ldi	r24, 0x72	; 114
    24e0:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
    uart_tx('w');
    24e4:	87 e7       	ldi	r24, 0x77	; 119
    24e6:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    24ea:	cc e3       	ldi	r28, 0x3C	; 60
    24ec:	d0 e0       	ldi	r29, 0x00	; 0
}
    uart_tx('w');
}
      for (int i = 60; i < 180; i++)
      {
       servo_1(i);
    24ee:	ce 01       	movw	r24, r28
    24f0:	f7 01       	movw	r30, r14
    24f2:	19 95       	eicall
    24f4:	8f ef       	ldi	r24, 0xFF	; 255
    24f6:	9f e8       	ldi	r25, 0x8F	; 143
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <__stack+0x2f9>
    24fc:	00 c0       	rjmp	.+0      	; 0x24fe <__stack+0x2ff>
    24fe:	00 00       	nop
if(update_animation == 'c'){
 uart_tx('r');
}
    uart_tx('w');
}
      for (int i = 60; i < 180; i++)
    2500:	21 96       	adiw	r28, 0x01	; 1
    2502:	c4 3b       	cpi	r28, 0xB4	; 180
    2504:	d1 05       	cpc	r29, r1
    2506:	99 f7       	brne	.-26     	; 0x24ee <__stack+0x2ef>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    2508:	f8 01       	movw	r30, r16
    250a:	19 95       	eicall
       _delay_ms(10);
      }
      servo_1_free();
   
 }
 else if((front_axis == 3) && (destination_axis == 2)){
    250c:	c5 c0       	rjmp	.+394    	; 0x2698 <__stack+0x499>
      servo_1_free();
   
 }
 
 else{
 forward_mm(250);
    250e:	8a ef       	ldi	r24, 0xFA	; 250
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 int adjust = 0;
 while (1)
 {
  velocity(125, 130);   //131,109.53
    2516:	8d e7       	ldi	r24, 0x7D	; 125
    2518:	62 e8       	ldi	r22, 0x82	; 130
    251a:	0e 94 8a 01 	call	0x314	; 0x314 <velocity>
  backward();
    251e:	0e 94 a8 01 	call	0x350	; 0x350 <backward>
  Left_white_line = ADC_Conversion(3);
    2522:	83 e0       	ldi	r24, 0x03	; 3
    2524:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    2528:	80 93 e6 04 	sts	0x04E6, r24
  Center_white_line = ADC_Conversion(2);
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    2532:	80 93 e5 04 	sts	0x04E5, r24
  Right_white_line = ADC_Conversion(1);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Conversion>
    253c:	80 93 e4 04 	sts	0x04E4, r24
  if(Center_white_line<line_thres && Left_white_line>line_thres && Right_white_line<line_thres)//BWW
    2540:	90 91 e5 04 	lds	r25, 0x04E5
    2544:	95 31       	cpi	r25, 0x15	; 21
    2546:	58 f4       	brcc	.+22     	; 0x255e <__stack+0x35f>
    2548:	20 91 e6 04 	lds	r18, 0x04E6
    254c:	26 31       	cpi	r18, 0x16	; 22
    254e:	10 f0       	brcs	.+4      	; 0x2554 <__stack+0x355>
    2550:	85 31       	cpi	r24, 0x15	; 21
    2552:	70 f0       	brcs	.+28     	; 0x2570 <__stack+0x371>
  {
   adjust = 1;  
   break;
  }
  
  else if(Center_white_line<line_thres && Left_white_line<line_thres && Right_white_line>line_thres)//WWB
    2554:	25 31       	cpi	r18, 0x15	; 21
    2556:	18 f4       	brcc	.+6      	; 0x255e <__stack+0x35f>
    2558:	86 31       	cpi	r24, 0x16	; 22
    255a:	08 f0       	brcs	.+2      	; 0x255e <__stack+0x35f>
    255c:	c4 c0       	rjmp	.+392    	; 0x26e6 <__stack+0x4e7>
  {
   adjust = 2;
   break;
  }
  
  else if(Center_white_line>line_thres && Left_white_line>line_thres && Right_white_line>line_thres)
    255e:	96 31       	cpi	r25, 0x16	; 22
    2560:	d0 f2       	brcs	.-76     	; 0x2516 <__stack+0x317>
    2562:	90 91 e6 04 	lds	r25, 0x04E6
    2566:	96 31       	cpi	r25, 0x16	; 22
    2568:	b0 f2       	brcs	.-84     	; 0x2516 <__stack+0x317>
    256a:	86 31       	cpi	r24, 0x16	; 22
    256c:	a0 f2       	brcs	.-88     	; 0x2516 <__stack+0x317>
    256e:	04 c0       	rjmp	.+8      	; 0x2578 <__stack+0x379>
   adjust = 3;
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
    2570:	8f e0       	ldi	r24, 0x0F	; 15
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 60 02 	call	0x4c0	; 0x4c0 <right_degrees>
 if (adjust == 2){left_degrees(15);}  
 stop();
    2578:	0e 94 b1 01 	call	0x362	; 0x362 <stop>
 forward_mm(150);
    257c:	86 e9       	ldi	r24, 0x96	; 150
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 96 02 	call	0x52c	; 0x52c <forward_mm>
 
 
 if(update_animation == 'd'){
    2584:	80 91 8b 05 	lds	r24, 0x058B
    2588:	84 36       	cpi	r24, 0x64	; 100
    258a:	19 f4       	brne	.+6      	; 0x2592 <__stack+0x393>
  uart_tx('d');
    258c:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2590:	05 c0       	rjmp	.+10     	; 0x259c <__stack+0x39d>
 }
 else{
  uart_tx('u');
    2592:	85 e7       	ldi	r24, 0x75	; 117
    2594:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
  magnet_on();
    2598:	0e 94 9e 01 	call	0x33c	; 0x33c <magnet_on>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    259c:	c4 eb       	ldi	r28, 0xB4	; 180
    259e:	d0 e0       	ldi	r29, 0x00	; 0
  uart_tx('u');
  magnet_on();
 }
    for (int i = 180; i > 60; i--)
      {
       servo_1(i);
    25a0:	09 ee       	ldi	r16, 0xE9	; 233
    25a2:	10 e0       	ldi	r17, 0x00	; 0
    25a4:	78 01       	movw	r14, r16
    25a6:	ce 01       	movw	r24, r28
    25a8:	f8 01       	movw	r30, r16
    25aa:	19 95       	eicall
    25ac:	af ef       	ldi	r26, 0xFF	; 255
    25ae:	bf e8       	ldi	r27, 0x8F	; 143
    25b0:	11 97       	sbiw	r26, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <__stack+0x3b1>
    25b4:	00 c0       	rjmp	.+0      	; 0x25b6 <__stack+0x3b7>
    25b6:	00 00       	nop
 }
 else{
  uart_tx('u');
  magnet_on();
 }
    for (int i = 180; i > 60; i--)
    25b8:	21 97       	sbiw	r28, 0x01	; 1
    25ba:	cc 33       	cpi	r28, 0x3C	; 60
    25bc:	d1 05       	cpc	r29, r1
    25be:	91 f7       	brne	.-28     	; 0x25a4 <__stack+0x3a5>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    25c0:	02 e0       	ldi	r16, 0x02	; 2
    25c2:	11 e0       	ldi	r17, 0x01	; 1
    25c4:	f8 01       	movw	r30, r16
    25c6:	19 95       	eicall
 
   if(update_animation == 'd'){
    25c8:	80 91 8b 05 	lds	r24, 0x058B
    25cc:	84 36       	cpi	r24, 0x64	; 100
    25ce:	c9 f5       	brne	.+114    	; 0x2642 <__stack+0x443>
    magnet_off();
    25d0:	0e 94 a2 01 	call	0x344	; 0x344 <magnet_off>
    if(water_pitcher_animation_count == 1)
    25d4:	80 91 7b 04 	lds	r24, 0x047B
    25d8:	90 91 7c 04 	lds	r25, 0x047C
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	91 05       	cpc	r25, r1
    25e0:	69 f4       	brne	.+26     	; 0x25fc <__stack+0x3fd>
   {uart_tx('m'); water_pitcher_animation_count++;}
    25e2:	8d e6       	ldi	r24, 0x6D	; 109
    25e4:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    25e8:	80 91 7b 04 	lds	r24, 0x047B
    25ec:	90 91 7c 04 	lds	r25, 0x047C
    25f0:	01 96       	adiw	r24, 0x01	; 1
    25f2:	90 93 7c 04 	sts	0x047C, r25
    25f6:	80 93 7b 04 	sts	0x047B, r24
    25fa:	1f c0       	rjmp	.+62     	; 0x263a <__stack+0x43b>
    else if(water_pitcher_animation_count == 2)
    25fc:	82 30       	cpi	r24, 0x02	; 2
    25fe:	91 05       	cpc	r25, r1
    2600:	69 f4       	brne	.+26     	; 0x261c <__stack+0x41d>
   {uart_tx('h');water_pitcher_animation_count++;}
    2602:	88 e6       	ldi	r24, 0x68	; 104
    2604:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2608:	80 91 7b 04 	lds	r24, 0x047B
    260c:	90 91 7c 04 	lds	r25, 0x047C
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	90 93 7c 04 	sts	0x047C, r25
    2616:	80 93 7b 04 	sts	0x047B, r24
    261a:	0f c0       	rjmp	.+30     	; 0x263a <__stack+0x43b>
    else if(water_pitcher_animation_count == 3)
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	91 05       	cpc	r25, r1
    2620:	61 f4       	brne	.+24     	; 0x263a <__stack+0x43b>
   {uart_tx('f');water_pitcher_animation_count++;}
    2622:	86 e6       	ldi	r24, 0x66	; 102
    2624:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2628:	80 91 7b 04 	lds	r24, 0x047B
    262c:	90 91 7c 04 	lds	r25, 0x047C
    2630:	01 96       	adiw	r24, 0x01	; 1
    2632:	90 93 7c 04 	sts	0x047C, r25
    2636:	80 93 7b 04 	sts	0x047B, r24
   uart_tx('n');
    263a:	8e e6       	ldi	r24, 0x6E	; 110
    263c:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2640:	16 c0       	rjmp	.+44     	; 0x266e <__stack+0x46f>
}
else{
 if(update_animation == 'a'){
    2642:	81 36       	cpi	r24, 0x61	; 97
    2644:	19 f4       	brne	.+6      	; 0x264c <__stack+0x44d>
  uart_tx('p');
    2646:	80 e7       	ldi	r24, 0x70	; 112
    2648:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'b'){
    264c:	80 91 8b 05 	lds	r24, 0x058B
    2650:	82 36       	cpi	r24, 0x62	; 98
    2652:	19 f4       	brne	.+6      	; 0x265a <__stack+0x45b>
 uart_tx('q');
    2654:	81 e7       	ldi	r24, 0x71	; 113
    2656:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
if(update_animation == 'c'){
    265a:	80 91 8b 05 	lds	r24, 0x058B
    265e:	83 36       	cpi	r24, 0x63	; 99
    2660:	19 f4       	brne	.+6      	; 0x2668 <__stack+0x469>
 uart_tx('r');
    2662:	82 e7       	ldi	r24, 0x72	; 114
    2664:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
}
    uart_tx('w');
    2668:	87 e7       	ldi	r24, 0x77	; 119
    266a:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
else{
 uart_tx('u');
 magnet_on();
}
   
for (int i = 180; i > 60; i--)
    266e:	cc e3       	ldi	r28, 0x3C	; 60
    2670:	d0 e0       	ldi	r29, 0x00	; 0
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
      {
       servo_1(i);
    2672:	ce 01       	movw	r24, r28
    2674:	f7 01       	movw	r30, r14
    2676:	19 95       	eicall
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	9f e8       	ldi	r25, 0x8F	; 143
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <__stack+0x47d>
    2680:	00 c0       	rjmp	.+0      	; 0x2682 <__stack+0x483>
    2682:	00 00       	nop
 uart_tx('r');
}
    uart_tx('w');
}
     
      for (int i = 60; i < 180; i++)
    2684:	21 96       	adiw	r28, 0x01	; 1
    2686:	c4 3b       	cpi	r28, 0xB4	; 180
    2688:	d1 05       	cpc	r29, r1
    268a:	99 f7       	brne	.-26     	; 0x2672 <__stack+0x473>
      {
       servo_1(i);
       _delay_ms(10);
      }
      servo_1_free();
    268c:	f8 01       	movw	r30, r16
    268e:	19 95       	eicall
   
 back_mm(300);
    2690:	8c e2       	ldi	r24, 0x2C	; 44
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	0e 94 a5 02 	call	0x54a	; 0x54a <back_mm>
 
 }
 return 0;
}
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	08 95       	ret
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}     //if the value in adjust variable is 1 move slightly right
 if (adjust == 2){left_degrees(15);}      //if the value in adjust variable is 2 move slightly left
    26aa:	8f e0       	ldi	r24, 0x0F	; 15
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    26b2:	96 ca       	rjmp	.-2772   	; 0x1be0 <rotate_servo_and_transmit_after_run+0x96>
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
 if (adjust == 2){left_degrees(15);}  
    26b4:	8f e0       	ldi	r24, 0x0F	; 15
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    26bc:	54 cb       	rjmp	.-2392   	; 0x1d66 <rotate_servo_and_transmit_after_run+0x21c>
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
 if (adjust == 2){left_degrees(15);}  
    26be:	8f e0       	ldi	r24, 0x0F	; 15
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    26c6:	21 cc       	rjmp	.-1982   	; 0x1f0a <rotate_servo_and_transmit_after_run+0x3c0>
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
 if (adjust == 2){left_degrees(15);}  
    26c8:	8f e0       	ldi	r24, 0x0F	; 15
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    26d0:	e6 cc       	rjmp	.-1588   	; 0x209e <rotate_servo_and_transmit_after_run+0x554>
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
 if (adjust == 2){left_degrees(15);}  
    26d2:	8f e0       	ldi	r24, 0x0F	; 15
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    26da:	b3 cd       	rjmp	.-1178   	; 0x2242 <__stack+0x43>
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
 if (adjust == 2){left_degrees(15);}  
    26dc:	8f e0       	ldi	r24, 0x0F	; 15
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    26e4:	78 ce       	rjmp	.-784    	; 0x23d6 <__stack+0x1d7>
   break;
  }
 }
 
 if (adjust == 1){right_degrees(15);}
 if (adjust == 2){left_degrees(15);}  
    26e6:	8f e0       	ldi	r24, 0x0F	; 15
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 55 02 	call	0x4aa	; 0x4aa <left_degrees>
    26ee:	44 cf       	rjmp	.-376    	; 0x2578 <__stack+0x379>

000026f0 <main>:
 *                and then 'z' is transmitted to python script to project no movement in wing crow and buzzer is beeped for 5 seconds ie. END, if
 *                that is not true then the current location is updated by final vertex location.              
 * Example Call:  Called automatically by the Operating System   
*/
int main() 
{  
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	c8 5c       	subi	r28, 0xC8	; 200
    2702:	d6 41       	sbci	r29, 0x16	; 22
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    uart0_init();
    270e:	0e 94 29 01 	call	0x252	; 0x252 <uart0_init>
    uart_tx('@');
    2712:	80 e4       	ldi	r24, 0x40	; 64
    2714:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
    2718:	00 ed       	ldi	r16, 0xD0	; 208
    271a:	14 e0       	ldi	r17, 0x04	; 4
 *                function call. The infinite loop breaks when 'water_pitcher_visited_count' becomes equal to 3 ie. bot has moved to water pitcher thrice
 *                and then 'z' is transmitted to python script to project no movement in wing crow and buzzer is beeped for 5 seconds ie. END, if
 *                that is not true then the current location is updated by final vertex location.              
 * Example Call:  Called automatically by the Operating System   
*/
int main() 
    271c:	0f 2e       	mov	r0, r31
    271e:	f7 e0       	ldi	r31, 0x07	; 7
    2720:	ef 2e       	mov	r14, r31
    2722:	ff 24       	eor	r15, r15
    2724:	f0 2d       	mov	r31, r0
    2726:	e0 0e       	add	r14, r16
    2728:	f1 1e       	adc	r15, r17
    uart0_init();
    uart_tx('@');
 
    for (int i = 0 ; i < 7 ; i++) 
    {
    robot_start[i] = uart_rx();
    272a:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    272e:	d8 01       	movw	r26, r16
    2730:	8d 93       	st	X+, r24
    2732:	8d 01       	movw	r16, r26
int main() 
{  
    uart0_init();
    uart_tx('@');
 
    for (int i = 0 ; i < 7 ; i++) 
    2734:	ae 15       	cp	r26, r14
    2736:	bf 05       	cpc	r27, r15
    2738:	c1 f7       	brne	.-16     	; 0x272a <main+0x3a>
    273a:	07 e9       	ldi	r16, 0x97	; 151
    273c:	14 e0       	ldi	r17, 0x04	; 4
 *                function call. The infinite loop breaks when 'water_pitcher_visited_count' becomes equal to 3 ie. bot has moved to water pitcher thrice
 *                and then 'z' is transmitted to python script to project no movement in wing crow and buzzer is beeped for 5 seconds ie. END, if
 *                that is not true then the current location is updated by final vertex location.              
 * Example Call:  Called automatically by the Operating System   
*/
int main() 
    273e:	0f 2e       	mov	r0, r31
    2740:	fd e0       	ldi	r31, 0x0D	; 13
    2742:	ef 2e       	mov	r14, r31
    2744:	ff 24       	eor	r15, r15
    2746:	f0 2d       	mov	r31, r0
    2748:	e0 0e       	add	r14, r16
    274a:	f1 1e       	adc	r15, r17
    robot_start[i] = uart_rx();
    }
    
 for (int i = 0 ; i < 13 ; i++)
 {
   water_pitcher_string[i] =uart_rx();   
    274c:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2750:	f8 01       	movw	r30, r16
    2752:	81 93       	st	Z+, r24
    2754:	8f 01       	movw	r16, r30
    for (int i = 0 ; i < 7 ; i++) 
    {
    robot_start[i] = uart_rx();
    }
    
 for (int i = 0 ; i < 13 ; i++)
    2756:	ee 15       	cp	r30, r14
    2758:	ff 05       	cpc	r31, r15
    275a:	c1 f7       	brne	.-16     	; 0x274c <main+0x5c>
   water_pitcher_string[i] =uart_rx();   
 }
 
 for (int i = 0 ; i < 2 ; i++)
 {
  pitcher_cell[i] = uart_rx();
    275c:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2760:	80 93 a8 04 	sts	0x04A8, r24
    2764:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2768:	80 93 a9 04 	sts	0x04A9, r24
 }
 for (int i = 0 ; i < 3 ; i++)
 {
  pitcher_axis[i] = uart_rx();
    276c:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2770:	80 93 a4 04 	sts	0x04A4, r24
    2774:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2778:	80 93 a5 04 	sts	0x04A5, r24
    277c:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2780:	80 93 a6 04 	sts	0x04A6, r24
    2784:	00 e9       	ldi	r16, 0x90	; 144
    2786:	14 e0       	ldi	r17, 0x04	; 4
 *                function call. The infinite loop breaks when 'water_pitcher_visited_count' becomes equal to 3 ie. bot has moved to water pitcher thrice
 *                and then 'z' is transmitted to python script to project no movement in wing crow and buzzer is beeped for 5 seconds ie. END, if
 *                that is not true then the current location is updated by final vertex location.              
 * Example Call:  Called automatically by the Operating System   
*/
int main() 
    2788:	0f 2e       	mov	r0, r31
    278a:	f7 e0       	ldi	r31, 0x07	; 7
    278c:	ef 2e       	mov	r14, r31
    278e:	ff 24       	eor	r15, r15
    2790:	f0 2d       	mov	r31, r0
    2792:	e0 0e       	add	r14, r16
    2794:	f1 1e       	adc	r15, r17
  pitcher_axis[i] = uart_rx();
 }
    
    for (int  i = 0 ; i < 7 ; i++)
 {
   pebble1_string[i] = uart_rx();  
    2796:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    279a:	d8 01       	movw	r26, r16
    279c:	8d 93       	st	X+, r24
    279e:	8d 01       	movw	r16, r26
 for (int i = 0 ; i < 3 ; i++)
 {
  pitcher_axis[i] = uart_rx();
 }
    
    for (int  i = 0 ; i < 7 ; i++)
    27a0:	ae 15       	cp	r26, r14
    27a2:	bf 05       	cpc	r27, r15
    27a4:	c1 f7       	brne	.-16     	; 0x2796 <main+0xa6>
   pebble1_string[i] = uart_rx();  
 }
 
 for (int i = 0 ; i < 2  ; i++)
    {
     pebble_cell1[i] = uart_rx();
    27a6:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27aa:	80 93 c9 04 	sts	0x04C9, r24
    27ae:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27b2:	80 93 ca 04 	sts	0x04CA, r24
    }    
 for (int i = 0 ; i < 3 ; i++)
    {
    pebble_axis1[i] = uart_rx();
    27b6:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27ba:	80 93 c5 04 	sts	0x04C5, r24
    27be:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27c2:	80 93 c6 04 	sts	0x04C6, r24
    27c6:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27ca:	80 93 c7 04 	sts	0x04C7, r24
    27ce:	09 e8       	ldi	r16, 0x89	; 137
    27d0:	14 e0       	ldi	r17, 0x04	; 4
 *                function call. The infinite loop breaks when 'water_pitcher_visited_count' becomes equal to 3 ie. bot has moved to water pitcher thrice
 *                and then 'z' is transmitted to python script to project no movement in wing crow and buzzer is beeped for 5 seconds ie. END, if
 *                that is not true then the current location is updated by final vertex location.              
 * Example Call:  Called automatically by the Operating System   
*/
int main() 
    27d2:	0f 2e       	mov	r0, r31
    27d4:	f7 e0       	ldi	r31, 0x07	; 7
    27d6:	ef 2e       	mov	r14, r31
    27d8:	ff 24       	eor	r15, r15
    27da:	f0 2d       	mov	r31, r0
    27dc:	e0 0e       	add	r14, r16
    27de:	f1 1e       	adc	r15, r17
    pebble_axis1[i] = uart_rx();
    }
 
     for (int  i = 0 ; i < 7 ; i++)
     {
      pebble2_string[i] = uart_rx();
    27e0:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27e4:	f8 01       	movw	r30, r16
    27e6:	81 93       	st	Z+, r24
    27e8:	8f 01       	movw	r16, r30
 for (int i = 0 ; i < 3 ; i++)
    {
    pebble_axis1[i] = uart_rx();
    }
 
     for (int  i = 0 ; i < 7 ; i++)
    27ea:	ee 15       	cp	r30, r14
    27ec:	ff 05       	cpc	r31, r15
    27ee:	c1 f7       	brne	.-16     	; 0x27e0 <main+0xf0>
      pebble2_string[i] = uart_rx();
     }
    
  for (int i = 0 ; i < 2 ; i++)
  {
   pebble_cell2[i] = uart_rx();
    27f0:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27f4:	80 93 be 04 	sts	0x04BE, r24
    27f8:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    27fc:	80 93 bf 04 	sts	0x04BF, r24
  }  
  for (int i = 0 ; i < 3 ; i++)
  {
   pebble_axis2[i] = uart_rx();
    2800:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2804:	80 93 ba 04 	sts	0x04BA, r24
    2808:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    280c:	80 93 bb 04 	sts	0x04BB, r24
    2810:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2814:	80 93 bc 04 	sts	0x04BC, r24
    2818:	02 e8       	ldi	r16, 0x82	; 130
    281a:	14 e0       	ldi	r17, 0x04	; 4
 *                function call. The infinite loop breaks when 'water_pitcher_visited_count' becomes equal to 3 ie. bot has moved to water pitcher thrice
 *                and then 'z' is transmitted to python script to project no movement in wing crow and buzzer is beeped for 5 seconds ie. END, if
 *                that is not true then the current location is updated by final vertex location.              
 * Example Call:  Called automatically by the Operating System   
*/
int main() 
    281c:	0f 2e       	mov	r0, r31
    281e:	f7 e0       	ldi	r31, 0x07	; 7
    2820:	ef 2e       	mov	r14, r31
    2822:	ff 24       	eor	r15, r15
    2824:	f0 2d       	mov	r31, r0
    2826:	e0 0e       	add	r14, r16
    2828:	f1 1e       	adc	r15, r17
  }
    
  
         for (int  i = 0 ; i < 7 ; i++)
         {
          pebble3_string[i] = uart_rx();
    282a:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    282e:	d8 01       	movw	r26, r16
    2830:	8d 93       	st	X+, r24
    2832:	8d 01       	movw	r16, r26
  {
   pebble_axis2[i] = uart_rx();
  }
    
  
         for (int  i = 0 ; i < 7 ; i++)
    2834:	ae 15       	cp	r26, r14
    2836:	bf 05       	cpc	r27, r15
    2838:	c1 f7       	brne	.-16     	; 0x282a <main+0x13a>
          pebble3_string[i] = uart_rx();
         }
   
   for (int i = 0 ; i < 2 ; i++)
   {
    pebble_cell3[i] = uart_rx();
    283a:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    283e:	80 93 b3 04 	sts	0x04B3, r24
    2842:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2846:	80 93 b4 04 	sts	0x04B4, r24
   }   
   for (int i = 0 ; i < 3 ; i++)
   {
    pebble_axis3[i] = uart_rx();
    284a:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    284e:	80 93 af 04 	sts	0x04AF, r24
    2852:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    2856:	80 93 b0 04 	sts	0x04B0, r24
    285a:	0e 94 21 01 	call	0x242	; 0x242 <uart_rx>
    285e:	80 93 b1 04 	sts	0x04B1, r24
   }
        
if (pebble_cell1[0] == '0'){pebble_cell1[0] = pebble_cell1[1];pebble_cell1[1] = '\0';}
    2862:	80 91 c9 04 	lds	r24, 0x04C9
    2866:	80 33       	cpi	r24, 0x30	; 48
    2868:	31 f4       	brne	.+12     	; 0x2876 <main+0x186>
    286a:	80 91 ca 04 	lds	r24, 0x04CA
    286e:	80 93 c9 04 	sts	0x04C9, r24
    2872:	10 92 ca 04 	sts	0x04CA, r1
if (pebble_cell2[0] == '0'){pebble_cell2[0] = pebble_cell2[1];pebble_cell2[1] = '\0';}
    2876:	80 91 be 04 	lds	r24, 0x04BE
    287a:	80 33       	cpi	r24, 0x30	; 48
    287c:	31 f4       	brne	.+12     	; 0x288a <main+0x19a>
    287e:	80 91 bf 04 	lds	r24, 0x04BF
    2882:	80 93 be 04 	sts	0x04BE, r24
    2886:	10 92 bf 04 	sts	0x04BF, r1
if (pebble_cell3[0] == '0'){pebble_cell3[0] = pebble_cell3[1];pebble_cell3[1] = '\0';}
    288a:	80 91 b3 04 	lds	r24, 0x04B3
    288e:	80 33       	cpi	r24, 0x30	; 48
    2890:	31 f4       	brne	.+12     	; 0x289e <main+0x1ae>
    2892:	80 91 b4 04 	lds	r24, 0x04B4
    2896:	80 93 b3 04 	sts	0x04B3, r24
    289a:	10 92 b4 04 	sts	0x04B4, r1
if (pitcher_cell[0] == '0'){pitcher_cell[0] = pitcher_cell[1];pitcher_cell[1] = '\0';}      
    289e:	80 91 a8 04 	lds	r24, 0x04A8
    28a2:	80 33       	cpi	r24, 0x30	; 48
    28a4:	31 f4       	brne	.+12     	; 0x28b2 <main+0x1c2>
    28a6:	80 91 a9 04 	lds	r24, 0x04A9
    28aa:	80 93 a8 04 	sts	0x04A8, r24
    28ae:	10 92 a9 04 	sts	0x04A9, r1
   
 init_devices();
    28b2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <init_devices>
 motor_pin_config(); 
    28b6:	0e 94 95 01 	call	0x32a	; 0x32a <motor_pin_config>
initialize_start_locations();  
    28ba:	0e 94 81 03 	call	0x702	; 0x702 <initialize_start_locations>
int graph[V][V] = {         
    28be:	fe 01       	movw	r30, r28
    28c0:	31 96       	adiw	r30, 0x01	; 1
    28c2:	88 ec       	ldi	r24, 0xC8	; 200
    28c4:	96 e1       	ldi	r25, 0x16	; 22
    28c6:	df 01       	movw	r26, r30
    28c8:	9c 01       	movw	r18, r24
    28ca:	1d 92       	st	X+, r1
    28cc:	21 50       	subi	r18, 0x01	; 1
    28ce:	30 40       	sbci	r19, 0x00	; 0
    28d0:	e1 f7       	brne	.-8      	; 0x28ca <main+0x1da>
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	98 87       	std	Y+8, r25	; 0x08
    28d8:	8f 83       	std	Y+7, r24	; 0x07
    28da:	9a 87       	std	Y+10, r25	; 0x0a
    28dc:	89 87       	std	Y+9, r24	; 0x09
    28de:	e7 96       	adiw	r28, 0x37	; 55
    28e0:	9f af       	sts	0x7f, r25
    28e2:	8e af       	sts	0x7e, r24
    28e4:	e7 97       	sbiw	r28, 0x37	; 55
    28e6:	e9 96       	adiw	r28, 0x39	; 57
    28e8:	9f af       	sts	0x7f, r25
    28ea:	8e af       	sts	0x7e, r24
    28ec:	e9 97       	sbiw	r28, 0x39	; 57
    28ee:	cd 51       	subi	r28, 0x1D	; 29
    28f0:	df 4f       	sbci	r29, 0xFF	; 255
    28f2:	99 83       	std	Y+1, r25	; 0x01
    28f4:	88 83       	st	Y, r24
    28f6:	c3 5e       	subi	r28, 0xE3	; 227
    28f8:	d0 40       	sbci	r29, 0x00	; 0
    28fa:	cb 51       	subi	r28, 0x1B	; 27
    28fc:	df 4f       	sbci	r29, 0xFF	; 255
    28fe:	99 83       	std	Y+1, r25	; 0x01
    2900:	88 83       	st	Y, r24
    2902:	c5 5e       	subi	r28, 0xE5	; 229
    2904:	d0 40       	sbci	r29, 0x00	; 0
    2906:	cb 5b       	subi	r28, 0xBB	; 187
    2908:	de 4f       	sbci	r29, 0xFE	; 254
    290a:	99 83       	std	Y+1, r25	; 0x01
    290c:	88 83       	st	Y, r24
    290e:	c5 54       	subi	r28, 0x45	; 69
    2910:	d1 40       	sbci	r29, 0x01	; 1
    2912:	cd 5a       	subi	r28, 0xAD	; 173
    2914:	de 4f       	sbci	r29, 0xFE	; 254
    2916:	99 83       	std	Y+1, r25	; 0x01
    2918:	88 83       	st	Y, r24
    291a:	c3 55       	subi	r28, 0x53	; 83
    291c:	d1 40       	sbci	r29, 0x01	; 1
    291e:	cf 54       	subi	r28, 0x4F	; 79
    2920:	de 4f       	sbci	r29, 0xFE	; 254
    2922:	99 83       	std	Y+1, r25	; 0x01
    2924:	88 83       	st	Y, r24
    2926:	c1 5b       	subi	r28, 0xB1	; 177
    2928:	d1 40       	sbci	r29, 0x01	; 1
    292a:	cd 54       	subi	r28, 0x4D	; 77
    292c:	de 4f       	sbci	r29, 0xFE	; 254
    292e:	99 83       	std	Y+1, r25	; 0x01
    2930:	88 83       	st	Y, r24
    2932:	c3 5b       	subi	r28, 0xB3	; 179
    2934:	d1 40       	sbci	r29, 0x01	; 1
    2936:	cf 53       	subi	r28, 0x3F	; 63
    2938:	de 4f       	sbci	r29, 0xFE	; 254
    293a:	99 83       	std	Y+1, r25	; 0x01
    293c:	88 83       	st	Y, r24
    293e:	c1 5c       	subi	r28, 0xC1	; 193
    2940:	d1 40       	sbci	r29, 0x01	; 1
    2942:	c1 5e       	subi	r28, 0xE1	; 225
    2944:	dd 4f       	sbci	r29, 0xFD	; 253
    2946:	99 83       	std	Y+1, r25	; 0x01
    2948:	88 83       	st	Y, r24
    294a:	cf 51       	subi	r28, 0x1F	; 31
    294c:	d2 40       	sbci	r29, 0x02	; 2
    294e:	cf 5d       	subi	r28, 0xDF	; 223
    2950:	dd 4f       	sbci	r29, 0xFD	; 253
    2952:	99 83       	std	Y+1, r25	; 0x01
    2954:	88 83       	st	Y, r24
    2956:	c1 52       	subi	r28, 0x21	; 33
    2958:	d2 40       	sbci	r29, 0x02	; 2
    295a:	c1 5d       	subi	r28, 0xD1	; 209
    295c:	dd 4f       	sbci	r29, 0xFD	; 253
    295e:	99 83       	std	Y+1, r25	; 0x01
    2960:	88 83       	st	Y, r24
    2962:	cf 52       	subi	r28, 0x2F	; 47
    2964:	d2 40       	sbci	r29, 0x02	; 2
    2966:	c3 57       	subi	r28, 0x73	; 115
    2968:	dd 4f       	sbci	r29, 0xFD	; 253
    296a:	99 83       	std	Y+1, r25	; 0x01
    296c:	88 83       	st	Y, r24
    296e:	cd 58       	subi	r28, 0x8D	; 141
    2970:	d2 40       	sbci	r29, 0x02	; 2
    2972:	c3 56       	subi	r28, 0x63	; 99
    2974:	dd 4f       	sbci	r29, 0xFD	; 253
    2976:	99 83       	std	Y+1, r25	; 0x01
    2978:	88 83       	st	Y, r24
    297a:	cd 59       	subi	r28, 0x9D	; 157
    297c:	d2 40       	sbci	r29, 0x02	; 2
    297e:	c5 50       	subi	r28, 0x05	; 5
    2980:	dd 4f       	sbci	r29, 0xFD	; 253
    2982:	99 83       	std	Y+1, r25	; 0x01
    2984:	88 83       	st	Y, r24
    2986:	cb 5f       	subi	r28, 0xFB	; 251
    2988:	d2 40       	sbci	r29, 0x02	; 2
    298a:	c5 5f       	subi	r28, 0xF5	; 245
    298c:	dc 4f       	sbci	r29, 0xFC	; 252
    298e:	99 83       	std	Y+1, r25	; 0x01
    2990:	88 83       	st	Y, r24
    2992:	cb 50       	subi	r28, 0x0B	; 11
    2994:	d3 40       	sbci	r29, 0x03	; 3
    2996:	c3 5f       	subi	r28, 0xF3	; 243
    2998:	dc 4f       	sbci	r29, 0xFC	; 252
    299a:	99 83       	std	Y+1, r25	; 0x01
    299c:	88 83       	st	Y, r24
    299e:	cd 50       	subi	r28, 0x0D	; 13
    29a0:	d3 40       	sbci	r29, 0x03	; 3
    29a2:	c7 59       	subi	r28, 0x97	; 151
    29a4:	dc 4f       	sbci	r29, 0xFC	; 252
    29a6:	99 83       	std	Y+1, r25	; 0x01
    29a8:	88 83       	st	Y, r24
    29aa:	c9 56       	subi	r28, 0x69	; 105
    29ac:	d3 40       	sbci	r29, 0x03	; 3
    29ae:	c7 58       	subi	r28, 0x87	; 135
    29b0:	dc 4f       	sbci	r29, 0xFC	; 252
    29b2:	99 83       	std	Y+1, r25	; 0x01
    29b4:	88 83       	st	Y, r24
    29b6:	c9 57       	subi	r28, 0x79	; 121
    29b8:	d3 40       	sbci	r29, 0x03	; 3
    29ba:	c5 58       	subi	r28, 0x85	; 133
    29bc:	dc 4f       	sbci	r29, 0xFC	; 252
    29be:	99 83       	std	Y+1, r25	; 0x01
    29c0:	88 83       	st	Y, r24
    29c2:	cb 57       	subi	r28, 0x7B	; 123
    29c4:	d3 40       	sbci	r29, 0x03	; 3
    29c6:	c9 52       	subi	r28, 0x29	; 41
    29c8:	dc 4f       	sbci	r29, 0xFC	; 252
    29ca:	99 83       	std	Y+1, r25	; 0x01
    29cc:	88 83       	st	Y, r24
    29ce:	c7 5d       	subi	r28, 0xD7	; 215
    29d0:	d3 40       	sbci	r29, 0x03	; 3
    29d2:	c9 51       	subi	r28, 0x19	; 25
    29d4:	dc 4f       	sbci	r29, 0xFC	; 252
    29d6:	99 83       	std	Y+1, r25	; 0x01
    29d8:	88 83       	st	Y, r24
    29da:	c7 5e       	subi	r28, 0xE7	; 231
    29dc:	d3 40       	sbci	r29, 0x03	; 3
    29de:	c7 51       	subi	r28, 0x17	; 23
    29e0:	dc 4f       	sbci	r29, 0xFC	; 252
    29e2:	99 83       	std	Y+1, r25	; 0x01
    29e4:	88 83       	st	Y, r24
    29e6:	c9 5e       	subi	r28, 0xE9	; 233
    29e8:	d3 40       	sbci	r29, 0x03	; 3
    29ea:	cb 5b       	subi	r28, 0xBB	; 187
    29ec:	db 4f       	sbci	r29, 0xFB	; 251
    29ee:	99 83       	std	Y+1, r25	; 0x01
    29f0:	88 83       	st	Y, r24
    29f2:	c5 54       	subi	r28, 0x45	; 69
    29f4:	d4 40       	sbci	r29, 0x04	; 4
    29f6:	cb 5a       	subi	r28, 0xAB	; 171
    29f8:	db 4f       	sbci	r29, 0xFB	; 251
    29fa:	99 83       	std	Y+1, r25	; 0x01
    29fc:	88 83       	st	Y, r24
    29fe:	c5 55       	subi	r28, 0x55	; 85
    2a00:	d4 40       	sbci	r29, 0x04	; 4
    2a02:	c9 5a       	subi	r28, 0xA9	; 169
    2a04:	db 4f       	sbci	r29, 0xFB	; 251
    2a06:	99 83       	std	Y+1, r25	; 0x01
    2a08:	88 83       	st	Y, r24
    2a0a:	c7 55       	subi	r28, 0x57	; 87
    2a0c:	d4 40       	sbci	r29, 0x04	; 4
    2a0e:	cd 54       	subi	r28, 0x4D	; 77
    2a10:	db 4f       	sbci	r29, 0xFB	; 251
    2a12:	99 83       	std	Y+1, r25	; 0x01
    2a14:	88 83       	st	Y, r24
    2a16:	c3 5b       	subi	r28, 0xB3	; 179
    2a18:	d4 40       	sbci	r29, 0x04	; 4
    2a1a:	cb 53       	subi	r28, 0x3B	; 59
    2a1c:	db 4f       	sbci	r29, 0xFB	; 251
    2a1e:	99 83       	std	Y+1, r25	; 0x01
    2a20:	88 83       	st	Y, r24
    2a22:	c5 5c       	subi	r28, 0xC5	; 197
    2a24:	d4 40       	sbci	r29, 0x04	; 4
    2a26:	c1 5e       	subi	r28, 0xE1	; 225
    2a28:	da 4f       	sbci	r29, 0xFA	; 250
    2a2a:	99 83       	std	Y+1, r25	; 0x01
    2a2c:	88 83       	st	Y, r24
    2a2e:	cf 51       	subi	r28, 0x1F	; 31
    2a30:	d5 40       	sbci	r29, 0x05	; 5
    2a32:	cf 5d       	subi	r28, 0xDF	; 223
    2a34:	da 4f       	sbci	r29, 0xFA	; 250
    2a36:	99 83       	std	Y+1, r25	; 0x01
    2a38:	88 83       	st	Y, r24
    2a3a:	c1 52       	subi	r28, 0x21	; 33
    2a3c:	d5 40       	sbci	r29, 0x05	; 5
    2a3e:	cd 5c       	subi	r28, 0xCD	; 205
    2a40:	da 4f       	sbci	r29, 0xFA	; 250
    2a42:	99 83       	std	Y+1, r25	; 0x01
    2a44:	88 83       	st	Y, r24
    2a46:	c3 53       	subi	r28, 0x33	; 51
    2a48:	d5 40       	sbci	r29, 0x05	; 5
    2a4a:	c3 57       	subi	r28, 0x73	; 115
    2a4c:	da 4f       	sbci	r29, 0xFA	; 250
    2a4e:	99 83       	std	Y+1, r25	; 0x01
    2a50:	88 83       	st	Y, r24
    2a52:	cd 58       	subi	r28, 0x8D	; 141
    2a54:	d5 40       	sbci	r29, 0x05	; 5
    2a56:	c1 57       	subi	r28, 0x71	; 113
    2a58:	da 4f       	sbci	r29, 0xFA	; 250
    2a5a:	99 83       	std	Y+1, r25	; 0x01
    2a5c:	88 83       	st	Y, r24
    2a5e:	cf 58       	subi	r28, 0x8F	; 143
    2a60:	d5 40       	sbci	r29, 0x05	; 5
    2a62:	cf 55       	subi	r28, 0x5F	; 95
    2a64:	da 4f       	sbci	r29, 0xFA	; 250
    2a66:	99 83       	std	Y+1, r25	; 0x01
    2a68:	88 83       	st	Y, r24
    2a6a:	c1 5a       	subi	r28, 0xA1	; 161
    2a6c:	d5 40       	sbci	r29, 0x05	; 5
    2a6e:	c5 50       	subi	r28, 0x05	; 5
    2a70:	da 4f       	sbci	r29, 0xFA	; 250
    2a72:	99 83       	std	Y+1, r25	; 0x01
    2a74:	88 83       	st	Y, r24
    2a76:	cb 5f       	subi	r28, 0xFB	; 251
    2a78:	d5 40       	sbci	r29, 0x05	; 5
    2a7a:	c3 50       	subi	r28, 0x03	; 3
    2a7c:	da 4f       	sbci	r29, 0xFA	; 250
    2a7e:	99 83       	std	Y+1, r25	; 0x01
    2a80:	88 83       	st	Y, r24
    2a82:	cd 5f       	subi	r28, 0xFD	; 253
    2a84:	d5 40       	sbci	r29, 0x05	; 5
    2a86:	c1 5f       	subi	r28, 0xF1	; 241
    2a88:	d9 4f       	sbci	r29, 0xF9	; 249
    2a8a:	99 83       	std	Y+1, r25	; 0x01
    2a8c:	88 83       	st	Y, r24
    2a8e:	cf 50       	subi	r28, 0x0F	; 15
    2a90:	d6 40       	sbci	r29, 0x06	; 6
    2a92:	c7 59       	subi	r28, 0x97	; 151
    2a94:	d9 4f       	sbci	r29, 0xF9	; 249
    2a96:	99 83       	std	Y+1, r25	; 0x01
    2a98:	88 83       	st	Y, r24
    2a9a:	c9 56       	subi	r28, 0x69	; 105
    2a9c:	d6 40       	sbci	r29, 0x06	; 6
    2a9e:	c3 58       	subi	r28, 0x83	; 131
    2aa0:	d9 4f       	sbci	r29, 0xF9	; 249
    2aa2:	99 83       	std	Y+1, r25	; 0x01
    2aa4:	88 83       	st	Y, r24
    2aa6:	cd 57       	subi	r28, 0x7D	; 125
    2aa8:	d6 40       	sbci	r29, 0x06	; 6
    2aaa:	c9 52       	subi	r28, 0x29	; 41
    2aac:	d9 4f       	sbci	r29, 0xF9	; 249
    2aae:	99 83       	std	Y+1, r25	; 0x01
    2ab0:	88 83       	st	Y, r24
    2ab2:	c7 5d       	subi	r28, 0xD7	; 215
    2ab4:	d6 40       	sbci	r29, 0x06	; 6
    2ab6:	c5 51       	subi	r28, 0x15	; 21
    2ab8:	d9 4f       	sbci	r29, 0xF9	; 249
    2aba:	99 83       	std	Y+1, r25	; 0x01
    2abc:	88 83       	st	Y, r24
    2abe:	cb 5e       	subi	r28, 0xEB	; 235
    2ac0:	d6 40       	sbci	r29, 0x06	; 6
    2ac2:	c3 51       	subi	r28, 0x13	; 19
    2ac4:	d9 4f       	sbci	r29, 0xF9	; 249
    2ac6:	99 83       	std	Y+1, r25	; 0x01
    2ac8:	88 83       	st	Y, r24
    2aca:	cd 5e       	subi	r28, 0xED	; 237
    2acc:	d6 40       	sbci	r29, 0x06	; 6
    2ace:	cb 5b       	subi	r28, 0xBB	; 187
    2ad0:	d8 4f       	sbci	r29, 0xF8	; 248
    2ad2:	99 83       	std	Y+1, r25	; 0x01
    2ad4:	88 83       	st	Y, r24
    2ad6:	c5 54       	subi	r28, 0x45	; 69
    2ad8:	d7 40       	sbci	r29, 0x07	; 7
    2ada:	c7 5a       	subi	r28, 0xA7	; 167
    2adc:	d8 4f       	sbci	r29, 0xF8	; 248
    2ade:	99 83       	std	Y+1, r25	; 0x01
    2ae0:	88 83       	st	Y, r24
    2ae2:	c9 55       	subi	r28, 0x59	; 89
    2ae4:	d7 40       	sbci	r29, 0x07	; 7
    2ae6:	c5 5a       	subi	r28, 0xA5	; 165
    2ae8:	d8 4f       	sbci	r29, 0xF8	; 248
    2aea:	99 83       	std	Y+1, r25	; 0x01
    2aec:	88 83       	st	Y, r24
    2aee:	cb 55       	subi	r28, 0x5B	; 91
    2af0:	d7 40       	sbci	r29, 0x07	; 7
    2af2:	cd 54       	subi	r28, 0x4D	; 77
    2af4:	d8 4f       	sbci	r29, 0xF8	; 248
    2af6:	99 83       	std	Y+1, r25	; 0x01
    2af8:	88 83       	st	Y, r24
    2afa:	c3 5b       	subi	r28, 0xB3	; 179
    2afc:	d7 40       	sbci	r29, 0x07	; 7
    2afe:	c9 53       	subi	r28, 0x39	; 57
    2b00:	d8 4f       	sbci	r29, 0xF8	; 248
    2b02:	99 83       	std	Y+1, r25	; 0x01
    2b04:	88 83       	st	Y, r24
    2b06:	c7 5c       	subi	r28, 0xC7	; 199
    2b08:	d7 40       	sbci	r29, 0x07	; 7
    2b0a:	c7 53       	subi	r28, 0x37	; 55
    2b0c:	d8 4f       	sbci	r29, 0xF8	; 248
    2b0e:	99 83       	std	Y+1, r25	; 0x01
    2b10:	88 83       	st	Y, r24
    2b12:	c9 5c       	subi	r28, 0xC9	; 201
    2b14:	d7 40       	sbci	r29, 0x07	; 7
    2b16:	cf 5d       	subi	r28, 0xDF	; 223
    2b18:	d7 4f       	sbci	r29, 0xF7	; 247
    2b1a:	99 83       	std	Y+1, r25	; 0x01
    2b1c:	88 83       	st	Y, r24
    2b1e:	c1 52       	subi	r28, 0x21	; 33
    2b20:	d8 40       	sbci	r29, 0x08	; 8
    2b22:	cb 5c       	subi	r28, 0xCB	; 203
    2b24:	d7 4f       	sbci	r29, 0xF7	; 247
    2b26:	99 83       	std	Y+1, r25	; 0x01
    2b28:	88 83       	st	Y, r24
    2b2a:	c5 53       	subi	r28, 0x35	; 53
    2b2c:	d8 40       	sbci	r29, 0x08	; 8
    2b2e:	c9 5c       	subi	r28, 0xC9	; 201
    2b30:	d7 4f       	sbci	r29, 0xF7	; 247
    2b32:	99 83       	std	Y+1, r25	; 0x01
    2b34:	88 83       	st	Y, r24
    2b36:	c7 53       	subi	r28, 0x37	; 55
    2b38:	d8 40       	sbci	r29, 0x08	; 8
    2b3a:	c1 57       	subi	r28, 0x71	; 113
    2b3c:	d7 4f       	sbci	r29, 0xF7	; 247
    2b3e:	99 83       	std	Y+1, r25	; 0x01
    2b40:	88 83       	st	Y, r24
    2b42:	cf 58       	subi	r28, 0x8F	; 143
    2b44:	d8 40       	sbci	r29, 0x08	; 8
    2b46:	cd 55       	subi	r28, 0x5D	; 93
    2b48:	d7 4f       	sbci	r29, 0xF7	; 247
    2b4a:	99 83       	std	Y+1, r25	; 0x01
    2b4c:	88 83       	st	Y, r24
    2b4e:	c3 5a       	subi	r28, 0xA3	; 163
    2b50:	d8 40       	sbci	r29, 0x08	; 8
    2b52:	cb 55       	subi	r28, 0x5B	; 91
    2b54:	d7 4f       	sbci	r29, 0xF7	; 247
    2b56:	99 83       	std	Y+1, r25	; 0x01
    2b58:	88 83       	st	Y, r24
    2b5a:	c5 5a       	subi	r28, 0xA5	; 165
    2b5c:	d8 40       	sbci	r29, 0x08	; 8
    2b5e:	c3 50       	subi	r28, 0x03	; 3
    2b60:	d7 4f       	sbci	r29, 0xF7	; 247
    2b62:	99 83       	std	Y+1, r25	; 0x01
    2b64:	88 83       	st	Y, r24
    2b66:	cd 5f       	subi	r28, 0xFD	; 253
    2b68:	d8 40       	sbci	r29, 0x08	; 8
    2b6a:	cd 5e       	subi	r28, 0xED	; 237
    2b6c:	d6 4f       	sbci	r29, 0xF6	; 246
    2b6e:	99 83       	std	Y+1, r25	; 0x01
    2b70:	88 83       	st	Y, r24
    2b72:	c3 51       	subi	r28, 0x13	; 19
    2b74:	d9 40       	sbci	r29, 0x09	; 9
    2b76:	c7 59       	subi	r28, 0x97	; 151
    2b78:	d6 4f       	sbci	r29, 0xF6	; 246
    2b7a:	99 83       	std	Y+1, r25	; 0x01
    2b7c:	88 83       	st	Y, r24
    2b7e:	c9 56       	subi	r28, 0x69	; 105
    2b80:	d9 40       	sbci	r29, 0x09	; 9
    2b82:	c5 59       	subi	r28, 0x95	; 149
    2b84:	d6 4f       	sbci	r29, 0xF6	; 246
    2b86:	99 83       	std	Y+1, r25	; 0x01
    2b88:	88 83       	st	Y, r24
    2b8a:	cb 56       	subi	r28, 0x6B	; 107
    2b8c:	d9 40       	sbci	r29, 0x09	; 9
    2b8e:	cf 57       	subi	r28, 0x7F	; 127
    2b90:	d6 4f       	sbci	r29, 0xF6	; 246
    2b92:	99 83       	std	Y+1, r25	; 0x01
    2b94:	88 83       	st	Y, r24
    2b96:	c1 58       	subi	r28, 0x81	; 129
    2b98:	d9 40       	sbci	r29, 0x09	; 9
    2b9a:	c9 52       	subi	r28, 0x29	; 41
    2b9c:	d6 4f       	sbci	r29, 0xF6	; 246
    2b9e:	99 83       	std	Y+1, r25	; 0x01
    2ba0:	88 83       	st	Y, r24
    2ba2:	c7 5d       	subi	r28, 0xD7	; 215
    2ba4:	d9 40       	sbci	r29, 0x09	; 9
    2ba6:	c7 52       	subi	r28, 0x27	; 39
    2ba8:	d6 4f       	sbci	r29, 0xF6	; 246
    2baa:	99 83       	std	Y+1, r25	; 0x01
    2bac:	88 83       	st	Y, r24
    2bae:	c9 5d       	subi	r28, 0xD9	; 217
    2bb0:	d9 40       	sbci	r29, 0x09	; 9
    2bb2:	c1 51       	subi	r28, 0x11	; 17
    2bb4:	d6 4f       	sbci	r29, 0xF6	; 246
    2bb6:	99 83       	std	Y+1, r25	; 0x01
    2bb8:	88 83       	st	Y, r24
    2bba:	cf 5e       	subi	r28, 0xEF	; 239
    2bbc:	d9 40       	sbci	r29, 0x09	; 9
    2bbe:	cb 5b       	subi	r28, 0xBB	; 187
    2bc0:	d5 4f       	sbci	r29, 0xF5	; 245
    2bc2:	99 83       	std	Y+1, r25	; 0x01
    2bc4:	88 83       	st	Y, r24
    2bc6:	c5 54       	subi	r28, 0x45	; 69
    2bc8:	da 40       	sbci	r29, 0x0A	; 10
    2bca:	c9 5b       	subi	r28, 0xB9	; 185
    2bcc:	d5 4f       	sbci	r29, 0xF5	; 245
    2bce:	99 83       	std	Y+1, r25	; 0x01
    2bd0:	88 83       	st	Y, r24
    2bd2:	c7 54       	subi	r28, 0x47	; 71
    2bd4:	da 40       	sbci	r29, 0x0A	; 10
    2bd6:	c3 5a       	subi	r28, 0xA3	; 163
    2bd8:	d5 4f       	sbci	r29, 0xF5	; 245
    2bda:	99 83       	std	Y+1, r25	; 0x01
    2bdc:	88 83       	st	Y, r24
    2bde:	cd 55       	subi	r28, 0x5D	; 93
    2be0:	da 40       	sbci	r29, 0x0A	; 10
    2be2:	cd 54       	subi	r28, 0x4D	; 77
    2be4:	d5 4f       	sbci	r29, 0xF5	; 245
    2be6:	99 83       	std	Y+1, r25	; 0x01
    2be8:	88 83       	st	Y, r24
    2bea:	c3 5b       	subi	r28, 0xB3	; 179
    2bec:	da 40       	sbci	r29, 0x0A	; 10
    2bee:	cb 54       	subi	r28, 0x4B	; 75
    2bf0:	d5 4f       	sbci	r29, 0xF5	; 245
    2bf2:	99 83       	std	Y+1, r25	; 0x01
    2bf4:	88 83       	st	Y, r24
    2bf6:	c5 5b       	subi	r28, 0xB5	; 181
    2bf8:	da 40       	sbci	r29, 0x0A	; 10
    2bfa:	c5 53       	subi	r28, 0x35	; 53
    2bfc:	d5 4f       	sbci	r29, 0xF5	; 245
    2bfe:	99 83       	std	Y+1, r25	; 0x01
    2c00:	88 83       	st	Y, r24
    2c02:	cb 5c       	subi	r28, 0xCB	; 203
    2c04:	da 40       	sbci	r29, 0x0A	; 10
    2c06:	cf 5d       	subi	r28, 0xDF	; 223
    2c08:	d4 4f       	sbci	r29, 0xF4	; 244
    2c0a:	99 83       	std	Y+1, r25	; 0x01
    2c0c:	88 83       	st	Y, r24
    2c0e:	c1 52       	subi	r28, 0x21	; 33
    2c10:	db 40       	sbci	r29, 0x0B	; 11
    2c12:	c7 5c       	subi	r28, 0xC7	; 199
    2c14:	d4 4f       	sbci	r29, 0xF4	; 244
    2c16:	99 83       	std	Y+1, r25	; 0x01
    2c18:	88 83       	st	Y, r24
    2c1a:	c9 53       	subi	r28, 0x39	; 57
    2c1c:	db 40       	sbci	r29, 0x0B	; 11
    2c1e:	c1 57       	subi	r28, 0x71	; 113
    2c20:	d4 4f       	sbci	r29, 0xF4	; 244
    2c22:	99 83       	std	Y+1, r25	; 0x01
    2c24:	88 83       	st	Y, r24
    2c26:	cf 58       	subi	r28, 0x8F	; 143
    2c28:	db 40       	sbci	r29, 0x0B	; 11
    2c2a:	c9 55       	subi	r28, 0x59	; 89
    2c2c:	d4 4f       	sbci	r29, 0xF4	; 244
    2c2e:	99 83       	std	Y+1, r25	; 0x01
    2c30:	88 83       	st	Y, r24
    2c32:	c7 5a       	subi	r28, 0xA7	; 167
    2c34:	db 40       	sbci	r29, 0x0B	; 11
    2c36:	c3 50       	subi	r28, 0x03	; 3
    2c38:	d4 4f       	sbci	r29, 0xF4	; 244
    2c3a:	99 83       	std	Y+1, r25	; 0x01
    2c3c:	88 83       	st	Y, r24
    2c3e:	cd 5f       	subi	r28, 0xFD	; 253
    2c40:	db 40       	sbci	r29, 0x0B	; 11
    2c42:	cd 5e       	subi	r28, 0xED	; 237
    2c44:	d3 4f       	sbci	r29, 0xF3	; 243
    2c46:	99 83       	std	Y+1, r25	; 0x01
    2c48:	88 83       	st	Y, r24
    2c4a:	c3 51       	subi	r28, 0x13	; 19
    2c4c:	dc 40       	sbci	r29, 0x0C	; 12
    2c4e:	cb 5e       	subi	r28, 0xEB	; 235
    2c50:	d3 4f       	sbci	r29, 0xF3	; 243
    2c52:	99 83       	std	Y+1, r25	; 0x01
    2c54:	88 83       	st	Y, r24
    2c56:	c5 51       	subi	r28, 0x15	; 21
    2c58:	dc 40       	sbci	r29, 0x0C	; 12
    2c5a:	c5 59       	subi	r28, 0x95	; 149
    2c5c:	d3 4f       	sbci	r29, 0xF3	; 243
    2c5e:	99 83       	std	Y+1, r25	; 0x01
    2c60:	88 83       	st	Y, r24
    2c62:	cb 56       	subi	r28, 0x6B	; 107
    2c64:	dc 40       	sbci	r29, 0x0C	; 12
    2c66:	cf 57       	subi	r28, 0x7F	; 127
    2c68:	d3 4f       	sbci	r29, 0xF3	; 243
    2c6a:	99 83       	std	Y+1, r25	; 0x01
    2c6c:	88 83       	st	Y, r24
    2c6e:	c1 58       	subi	r28, 0x81	; 129
    2c70:	dc 40       	sbci	r29, 0x0C	; 12
    2c72:	cd 57       	subi	r28, 0x7D	; 125
    2c74:	d3 4f       	sbci	r29, 0xF3	; 243
    2c76:	99 83       	std	Y+1, r25	; 0x01
    2c78:	88 83       	st	Y, r24
    2c7a:	c3 58       	subi	r28, 0x83	; 131
    2c7c:	dc 40       	sbci	r29, 0x0C	; 12
    2c7e:	c7 52       	subi	r28, 0x27	; 39
    2c80:	d3 4f       	sbci	r29, 0xF3	; 243
    2c82:	99 83       	std	Y+1, r25	; 0x01
    2c84:	88 83       	st	Y, r24
    2c86:	c9 5d       	subi	r28, 0xD9	; 217
    2c88:	dc 40       	sbci	r29, 0x0C	; 12
    2c8a:	c1 51       	subi	r28, 0x11	; 17
    2c8c:	d3 4f       	sbci	r29, 0xF3	; 243
    2c8e:	99 83       	std	Y+1, r25	; 0x01
    2c90:	88 83       	st	Y, r24
    2c92:	cf 5e       	subi	r28, 0xEF	; 239
    2c94:	dc 40       	sbci	r29, 0x0C	; 12
    2c96:	cf 50       	subi	r28, 0x0F	; 15
    2c98:	d3 4f       	sbci	r29, 0xF3	; 243
    2c9a:	99 83       	std	Y+1, r25	; 0x01
    2c9c:	88 83       	st	Y, r24
    2c9e:	c1 5f       	subi	r28, 0xF1	; 241
    2ca0:	dc 40       	sbci	r29, 0x0C	; 12
    2ca2:	c9 5b       	subi	r28, 0xB9	; 185
    2ca4:	d2 4f       	sbci	r29, 0xF2	; 242
    2ca6:	99 83       	std	Y+1, r25	; 0x01
    2ca8:	88 83       	st	Y, r24
    2caa:	c7 54       	subi	r28, 0x47	; 71
    2cac:	dd 40       	sbci	r29, 0x0D	; 13
    2cae:	c3 5a       	subi	r28, 0xA3	; 163
    2cb0:	d2 4f       	sbci	r29, 0xF2	; 242
    2cb2:	99 83       	std	Y+1, r25	; 0x01
    2cb4:	88 83       	st	Y, r24
    2cb6:	cd 55       	subi	r28, 0x5D	; 93
    2cb8:	dd 40       	sbci	r29, 0x0D	; 13
    2cba:	c1 5a       	subi	r28, 0xA1	; 161
    2cbc:	d2 4f       	sbci	r29, 0xF2	; 242
    2cbe:	99 83       	std	Y+1, r25	; 0x01
    2cc0:	88 83       	st	Y, r24
    2cc2:	cf 55       	subi	r28, 0x5F	; 95
    2cc4:	dd 40       	sbci	r29, 0x0D	; 13
    2cc6:	cb 54       	subi	r28, 0x4B	; 75
    2cc8:	d2 4f       	sbci	r29, 0xF2	; 242
    2cca:	99 83       	std	Y+1, r25	; 0x01
    2ccc:	88 83       	st	Y, r24
    2cce:	c5 5b       	subi	r28, 0xB5	; 181
    2cd0:	dd 40       	sbci	r29, 0x0D	; 13
    2cd2:	c5 53       	subi	r28, 0x35	; 53
    2cd4:	d2 4f       	sbci	r29, 0xF2	; 242
    2cd6:	99 83       	std	Y+1, r25	; 0x01
    2cd8:	88 83       	st	Y, r24
    2cda:	cb 5c       	subi	r28, 0xCB	; 203
    2cdc:	dd 40       	sbci	r29, 0x0D	; 13
    2cde:	cd 5d       	subi	r28, 0xDD	; 221
    2ce0:	d1 4f       	sbci	r29, 0xF1	; 241
    2ce2:	99 83       	std	Y+1, r25	; 0x01
    2ce4:	88 83       	st	Y, r24
    2ce6:	c3 52       	subi	r28, 0x23	; 35
    2ce8:	de 40       	sbci	r29, 0x0E	; 14
    2cea:	cb 5d       	subi	r28, 0xDB	; 219
    2cec:	d1 4f       	sbci	r29, 0xF1	; 241
    2cee:	99 83       	std	Y+1, r25	; 0x01
    2cf0:	88 83       	st	Y, r24
    2cf2:	c5 52       	subi	r28, 0x25	; 37
    2cf4:	de 40       	sbci	r29, 0x0E	; 14
    2cf6:	c7 5c       	subi	r28, 0xC7	; 199
    2cf8:	d1 4f       	sbci	r29, 0xF1	; 241
    2cfa:	99 83       	std	Y+1, r25	; 0x01
    2cfc:	88 83       	st	Y, r24
    2cfe:	c9 53       	subi	r28, 0x39	; 57
    2d00:	de 40       	sbci	r29, 0x0E	; 14
    2d02:	cf 56       	subi	r28, 0x6F	; 111
    2d04:	d1 4f       	sbci	r29, 0xF1	; 241
    2d06:	99 83       	std	Y+1, r25	; 0x01
    2d08:	88 83       	st	Y, r24
    2d0a:	c1 59       	subi	r28, 0x91	; 145
    2d0c:	de 40       	sbci	r29, 0x0E	; 14
    2d0e:	cd 56       	subi	r28, 0x6D	; 109
    2d10:	d1 4f       	sbci	r29, 0xF1	; 241
    2d12:	99 83       	std	Y+1, r25	; 0x01
    2d14:	88 83       	st	Y, r24
    2d16:	c3 59       	subi	r28, 0x93	; 147
    2d18:	de 40       	sbci	r29, 0x0E	; 14
    2d1a:	c9 55       	subi	r28, 0x59	; 89
    2d1c:	d1 4f       	sbci	r29, 0xF1	; 241
    2d1e:	99 83       	std	Y+1, r25	; 0x01
    2d20:	88 83       	st	Y, r24
    2d22:	c7 5a       	subi	r28, 0xA7	; 167
    2d24:	de 40       	sbci	r29, 0x0E	; 14
    2d26:	c1 50       	subi	r28, 0x01	; 1
    2d28:	d1 4f       	sbci	r29, 0xF1	; 241
    2d2a:	99 83       	std	Y+1, r25	; 0x01
    2d2c:	88 83       	st	Y, r24
    2d2e:	cf 5f       	subi	r28, 0xFF	; 255
    2d30:	de 40       	sbci	r29, 0x0E	; 14
    2d32:	cf 5f       	subi	r28, 0xFF	; 255
    2d34:	d0 4f       	sbci	r29, 0xF0	; 240
    2d36:	99 83       	std	Y+1, r25	; 0x01
    2d38:	88 83       	st	Y, r24
    2d3a:	c1 50       	subi	r28, 0x01	; 1
    2d3c:	df 40       	sbci	r29, 0x0F	; 15
    2d3e:	cb 5e       	subi	r28, 0xEB	; 235
    2d40:	d0 4f       	sbci	r29, 0xF0	; 240
    2d42:	99 83       	std	Y+1, r25	; 0x01
    2d44:	88 83       	st	Y, r24
    2d46:	c5 51       	subi	r28, 0x15	; 21
    2d48:	df 40       	sbci	r29, 0x0F	; 15
    2d4a:	c3 59       	subi	r28, 0x93	; 147
    2d4c:	d0 4f       	sbci	r29, 0xF0	; 240
    2d4e:	99 83       	std	Y+1, r25	; 0x01
    2d50:	88 83       	st	Y, r24
    2d52:	cd 56       	subi	r28, 0x6D	; 109
    2d54:	df 40       	sbci	r29, 0x0F	; 15
    2d56:	c1 59       	subi	r28, 0x91	; 145
    2d58:	d0 4f       	sbci	r29, 0xF0	; 240
    2d5a:	99 83       	std	Y+1, r25	; 0x01
    2d5c:	88 83       	st	Y, r24
    2d5e:	cf 56       	subi	r28, 0x6F	; 111
    2d60:	df 40       	sbci	r29, 0x0F	; 15
    2d62:	cd 57       	subi	r28, 0x7D	; 125
    2d64:	d0 4f       	sbci	r29, 0xF0	; 240
    2d66:	99 83       	std	Y+1, r25	; 0x01
    2d68:	88 83       	st	Y, r24
    2d6a:	c3 58       	subi	r28, 0x83	; 131
    2d6c:	df 40       	sbci	r29, 0x0F	; 15
    2d6e:	c5 52       	subi	r28, 0x25	; 37
    2d70:	d0 4f       	sbci	r29, 0xF0	; 240
    2d72:	99 83       	std	Y+1, r25	; 0x01
    2d74:	88 83       	st	Y, r24
    2d76:	cb 5d       	subi	r28, 0xDB	; 219
    2d78:	df 40       	sbci	r29, 0x0F	; 15
    2d7a:	c3 52       	subi	r28, 0x23	; 35
    2d7c:	d0 4f       	sbci	r29, 0xF0	; 240
    2d7e:	99 83       	std	Y+1, r25	; 0x01
    2d80:	88 83       	st	Y, r24
    2d82:	cd 5d       	subi	r28, 0xDD	; 221
    2d84:	df 40       	sbci	r29, 0x0F	; 15
    2d86:	cf 50       	subi	r28, 0x0F	; 15
    2d88:	d0 4f       	sbci	r29, 0xF0	; 240
    2d8a:	99 83       	std	Y+1, r25	; 0x01
    2d8c:	88 83       	st	Y, r24
    2d8e:	c1 5f       	subi	r28, 0xF1	; 241
    2d90:	df 40       	sbci	r29, 0x0F	; 15
    2d92:	c5 5b       	subi	r28, 0xB5	; 181
    2d94:	df 4e       	sbci	r29, 0xEF	; 239
    2d96:	99 83       	std	Y+1, r25	; 0x01
    2d98:	88 83       	st	Y, r24
    2d9a:	cb 54       	subi	r28, 0x4B	; 75
    2d9c:	d0 41       	sbci	r29, 0x10	; 16
    2d9e:	c1 5a       	subi	r28, 0xA1	; 161
    2da0:	df 4e       	sbci	r29, 0xEF	; 239
    2da2:	99 83       	std	Y+1, r25	; 0x01
    2da4:	88 83       	st	Y, r24
    2da6:	cf 55       	subi	r28, 0x5F	; 95
    2da8:	d0 41       	sbci	r29, 0x10	; 16
    2daa:	c7 54       	subi	r28, 0x47	; 71
    2dac:	df 4e       	sbci	r29, 0xEF	; 239
    2dae:	99 83       	std	Y+1, r25	; 0x01
    2db0:	88 83       	st	Y, r24
    2db2:	c9 5b       	subi	r28, 0xB9	; 185
    2db4:	d0 41       	sbci	r29, 0x10	; 16
    2db6:	c5 53       	subi	r28, 0x35	; 53
    2db8:	df 4e       	sbci	r29, 0xEF	; 239
    2dba:	99 83       	std	Y+1, r25	; 0x01
    2dbc:	88 83       	st	Y, r24
    2dbe:	cb 5c       	subi	r28, 0xCB	; 203
    2dc0:	d0 41       	sbci	r29, 0x10	; 16
    2dc2:	c3 53       	subi	r28, 0x33	; 51
    2dc4:	df 4e       	sbci	r29, 0xEF	; 239
    2dc6:	99 83       	std	Y+1, r25	; 0x01
    2dc8:	88 83       	st	Y, r24
    2dca:	cd 5c       	subi	r28, 0xCD	; 205
    2dcc:	d0 41       	sbci	r29, 0x10	; 16
    2dce:	c9 5d       	subi	r28, 0xD9	; 217
    2dd0:	de 4e       	sbci	r29, 0xEE	; 238
    2dd2:	99 83       	std	Y+1, r25	; 0x01
    2dd4:	88 83       	st	Y, r24
    2dd6:	c7 52       	subi	r28, 0x27	; 39
    2dd8:	d1 41       	sbci	r29, 0x11	; 17
    2dda:	c7 5c       	subi	r28, 0xC7	; 199
    2ddc:	de 4e       	sbci	r29, 0xEE	; 238
    2dde:	99 83       	std	Y+1, r25	; 0x01
    2de0:	88 83       	st	Y, r24
    2de2:	c9 53       	subi	r28, 0x39	; 57
    2de4:	d1 41       	sbci	r29, 0x11	; 17
    2de6:	c5 5c       	subi	r28, 0xC5	; 197
    2de8:	de 4e       	sbci	r29, 0xEE	; 238
    2dea:	99 83       	std	Y+1, r25	; 0x01
    2dec:	88 83       	st	Y, r24
    2dee:	cb 53       	subi	r28, 0x3B	; 59
    2df0:	d1 41       	sbci	r29, 0x11	; 17
    2df2:	cb 56       	subi	r28, 0x6B	; 107
    2df4:	de 4e       	sbci	r29, 0xEE	; 238
    2df6:	99 83       	std	Y+1, r25	; 0x01
    2df8:	88 83       	st	Y, r24
    2dfa:	c5 59       	subi	r28, 0x95	; 149
    2dfc:	d1 41       	sbci	r29, 0x11	; 17
    2dfe:	c9 55       	subi	r28, 0x59	; 89
    2e00:	de 4e       	sbci	r29, 0xEE	; 238
    2e02:	99 83       	std	Y+1, r25	; 0x01
    2e04:	88 83       	st	Y, r24
    2e06:	c7 5a       	subi	r28, 0xA7	; 167
    2e08:	d1 41       	sbci	r29, 0x11	; 17
    2e0a:	c7 55       	subi	r28, 0x57	; 87
    2e0c:	de 4e       	sbci	r29, 0xEE	; 238
    2e0e:	99 83       	std	Y+1, r25	; 0x01
    2e10:	88 83       	st	Y, r24
    2e12:	c9 5a       	subi	r28, 0xA9	; 169
    2e14:	d1 41       	sbci	r29, 0x11	; 17
    2e16:	cd 5f       	subi	r28, 0xFD	; 253
    2e18:	dd 4e       	sbci	r29, 0xED	; 237
    2e1a:	99 83       	std	Y+1, r25	; 0x01
    2e1c:	88 83       	st	Y, r24
    2e1e:	c3 50       	subi	r28, 0x03	; 3
    2e20:	d2 41       	sbci	r29, 0x12	; 18
    2e22:	cb 5e       	subi	r28, 0xEB	; 235
    2e24:	dd 4e       	sbci	r29, 0xED	; 237
    2e26:	99 83       	std	Y+1, r25	; 0x01
    2e28:	88 83       	st	Y, r24
    2e2a:	c5 51       	subi	r28, 0x15	; 21
    2e2c:	d2 41       	sbci	r29, 0x12	; 18
    2e2e:	cf 58       	subi	r28, 0x8F	; 143
    2e30:	dd 4e       	sbci	r29, 0xED	; 237
    2e32:	99 83       	std	Y+1, r25	; 0x01
    2e34:	88 83       	st	Y, r24
    2e36:	c1 57       	subi	r28, 0x71	; 113
    2e38:	d2 41       	sbci	r29, 0x12	; 18
    2e3a:	cd 58       	subi	r28, 0x8D	; 141
    2e3c:	dd 4e       	sbci	r29, 0xED	; 237
    2e3e:	99 83       	std	Y+1, r25	; 0x01
    2e40:	88 83       	st	Y, r24
    2e42:	c3 57       	subi	r28, 0x73	; 115
    2e44:	d2 41       	sbci	r29, 0x12	; 18
    2e46:	cd 57       	subi	r28, 0x7D	; 125
    2e48:	dd 4e       	sbci	r29, 0xED	; 237
    2e4a:	99 83       	std	Y+1, r25	; 0x01
    2e4c:	88 83       	st	Y, r24
    2e4e:	c3 58       	subi	r28, 0x83	; 131
    2e50:	d2 41       	sbci	r29, 0x12	; 18
    2e52:	c1 52       	subi	r28, 0x21	; 33
    2e54:	dd 4e       	sbci	r29, 0xED	; 237
    2e56:	99 83       	std	Y+1, r25	; 0x01
    2e58:	88 83       	st	Y, r24
    2e5a:	cf 5d       	subi	r28, 0xDF	; 223
    2e5c:	d2 41       	sbci	r29, 0x12	; 18
    2e5e:	cf 51       	subi	r28, 0x1F	; 31
    2e60:	dd 4e       	sbci	r29, 0xED	; 237
    2e62:	99 83       	std	Y+1, r25	; 0x01
    2e64:	88 83       	st	Y, r24
    2e66:	c1 5e       	subi	r28, 0xE1	; 225
    2e68:	d2 41       	sbci	r29, 0x12	; 18
    2e6a:	cf 50       	subi	r28, 0x0F	; 15
    2e6c:	dd 4e       	sbci	r29, 0xED	; 237
    2e6e:	99 83       	std	Y+1, r25	; 0x01
    2e70:	88 83       	st	Y, r24
    2e72:	c1 5f       	subi	r28, 0xF1	; 241
    2e74:	d2 41       	sbci	r29, 0x12	; 18
    2e76:	c3 5b       	subi	r28, 0xB3	; 179
    2e78:	dc 4e       	sbci	r29, 0xEC	; 236
    2e7a:	99 83       	std	Y+1, r25	; 0x01
    2e7c:	88 83       	st	Y, r24
    2e7e:	cd 54       	subi	r28, 0x4D	; 77
    2e80:	d3 41       	sbci	r29, 0x13	; 19
    2e82:	c1 5b       	subi	r28, 0xB1	; 177
    2e84:	dc 4e       	sbci	r29, 0xEC	; 236
    2e86:	99 83       	std	Y+1, r25	; 0x01
    2e88:	88 83       	st	Y, r24
    2e8a:	cf 54       	subi	r28, 0x4F	; 79
    2e8c:	d3 41       	sbci	r29, 0x13	; 19
    2e8e:	c1 5a       	subi	r28, 0xA1	; 161
    2e90:	dc 4e       	sbci	r29, 0xEC	; 236
    2e92:	99 83       	std	Y+1, r25	; 0x01
    2e94:	88 83       	st	Y, r24
    2e96:	cf 55       	subi	r28, 0x5F	; 95
    2e98:	d3 41       	sbci	r29, 0x13	; 19
    2e9a:	c5 54       	subi	r28, 0x45	; 69
    2e9c:	dc 4e       	sbci	r29, 0xEC	; 236
    2e9e:	99 83       	std	Y+1, r25	; 0x01
    2ea0:	88 83       	st	Y, r24
    2ea2:	cb 5b       	subi	r28, 0xBB	; 187
    2ea4:	d3 41       	sbci	r29, 0x13	; 19
    2ea6:	c3 54       	subi	r28, 0x43	; 67
    2ea8:	dc 4e       	sbci	r29, 0xEC	; 236
    2eaa:	99 83       	std	Y+1, r25	; 0x01
    2eac:	88 83       	st	Y, r24
    2eae:	cd 5b       	subi	r28, 0xBD	; 189
    2eb0:	d3 41       	sbci	r29, 0x13	; 19
    2eb2:	c3 53       	subi	r28, 0x33	; 51
    2eb4:	dc 4e       	sbci	r29, 0xEC	; 236
    2eb6:	99 83       	std	Y+1, r25	; 0x01
    2eb8:	88 83       	st	Y, r24
    2eba:	cd 5c       	subi	r28, 0xCD	; 205
    2ebc:	d3 41       	sbci	r29, 0x13	; 19
    2ebe:	c5 5d       	subi	r28, 0xD5	; 213
    2ec0:	db 4e       	sbci	r29, 0xEB	; 235
    2ec2:	99 83       	std	Y+1, r25	; 0x01
    2ec4:	88 83       	st	Y, r24
    2ec6:	cb 52       	subi	r28, 0x2B	; 43
    2ec8:	d4 41       	sbci	r29, 0x14	; 20
    2eca:	c5 5c       	subi	r28, 0xC5	; 197
    2ecc:	db 4e       	sbci	r29, 0xEB	; 235
    2ece:	99 83       	std	Y+1, r25	; 0x01
    2ed0:	88 83       	st	Y, r24
    2ed2:	cb 53       	subi	r28, 0x3B	; 59
    2ed4:	d4 41       	sbci	r29, 0x14	; 20
    2ed6:	c7 56       	subi	r28, 0x67	; 103
    2ed8:	db 4e       	sbci	r29, 0xEB	; 235
    2eda:	99 83       	std	Y+1, r25	; 0x01
    2edc:	88 83       	st	Y, r24
    2ede:	c9 59       	subi	r28, 0x99	; 153
    2ee0:	d4 41       	sbci	r29, 0x14	; 20
    2ee2:	c9 55       	subi	r28, 0x59	; 89
    2ee4:	db 4e       	sbci	r29, 0xEB	; 235
    2ee6:	99 83       	std	Y+1, r25	; 0x01
    2ee8:	88 83       	st	Y, r24
    2eea:	c7 5a       	subi	r28, 0xA7	; 167
    2eec:	d4 41       	sbci	r29, 0x14	; 20
    2eee:	c7 55       	subi	r28, 0x57	; 87
    2ef0:	db 4e       	sbci	r29, 0xEB	; 235
    2ef2:	99 83       	std	Y+1, r25	; 0x01
    2ef4:	88 83       	st	Y, r24
    2ef6:	c9 5a       	subi	r28, 0xA9	; 169
    2ef8:	d4 41       	sbci	r29, 0x14	; 20
    2efa:	c9 5f       	subi	r28, 0xF9	; 249
    2efc:	da 4e       	sbci	r29, 0xEA	; 234
    2efe:	99 83       	std	Y+1, r25	; 0x01
    2f00:	88 83       	st	Y, r24
    2f02:	c7 50       	subi	r28, 0x07	; 7
    2f04:	d5 41       	sbci	r29, 0x15	; 21
    2f06:	cb 5e       	subi	r28, 0xEB	; 235
    2f08:	da 4e       	sbci	r29, 0xEA	; 234
    2f0a:	99 83       	std	Y+1, r25	; 0x01
    2f0c:	88 83       	st	Y, r24
    2f0e:	c5 51       	subi	r28, 0x15	; 21
    2f10:	d5 41       	sbci	r29, 0x15	; 21
    2f12:	c9 5e       	subi	r28, 0xE9	; 233
    2f14:	da 4e       	sbci	r29, 0xEA	; 234
    2f16:	99 83       	std	Y+1, r25	; 0x01
    2f18:	88 83       	st	Y, r24
    2f1a:	c7 51       	subi	r28, 0x17	; 23
    2f1c:	d5 41       	sbci	r29, 0x15	; 21
    2f1e:	cb 58       	subi	r28, 0x8B	; 139
    2f20:	da 4e       	sbci	r29, 0xEA	; 234
    2f22:	99 83       	std	Y+1, r25	; 0x01
    2f24:	88 83       	st	Y, r24
    2f26:	c5 57       	subi	r28, 0x75	; 117
    2f28:	d5 41       	sbci	r29, 0x15	; 21
    2f2a:	cd 57       	subi	r28, 0x7D	; 125
    2f2c:	da 4e       	sbci	r29, 0xEA	; 234
    2f2e:	99 83       	std	Y+1, r25	; 0x01
    2f30:	88 83       	st	Y, r24
    2f32:	c3 58       	subi	r28, 0x83	; 131
    2f34:	d5 41       	sbci	r29, 0x15	; 21
    2f36:	cd 51       	subi	r28, 0x1D	; 29
    2f38:	da 4e       	sbci	r29, 0xEA	; 234
    2f3a:	99 83       	std	Y+1, r25	; 0x01
    2f3c:	88 83       	st	Y, r24
    2f3e:	c3 5e       	subi	r28, 0xE3	; 227
    2f40:	d5 41       	sbci	r29, 0x15	; 21
    2f42:	cb 51       	subi	r28, 0x1B	; 27
    2f44:	da 4e       	sbci	r29, 0xEA	; 234
    2f46:	99 83       	std	Y+1, r25	; 0x01
    2f48:	88 83       	st	Y, r24
    2f4a:	c5 5e       	subi	r28, 0xE5	; 229
    2f4c:	d5 41       	sbci	r29, 0x15	; 21
    2f4e:	cf 5a       	subi	r28, 0xAF	; 175
    2f50:	d9 4e       	sbci	r29, 0xE9	; 233
    2f52:	99 83       	std	Y+1, r25	; 0x01
    2f54:	88 83       	st	Y, r24
    2f56:	c1 55       	subi	r28, 0x51	; 81
    2f58:	d6 41       	sbci	r29, 0x16	; 22
    2f5a:	cd 5a       	subi	r28, 0xAD	; 173
    2f5c:	d9 4e       	sbci	r29, 0xE9	; 233
    2f5e:	99 83       	std	Y+1, r25	; 0x01
    2f60:	88 83       	st	Y, r24
    2f62:	c3 55       	subi	r28, 0x53	; 83
    2f64:	d6 41       	sbci	r29, 0x16	; 22
    2f66:	c1 54       	subi	r28, 0x41	; 65
    2f68:	d9 4e       	sbci	r29, 0xE9	; 233
    2f6a:	99 83       	std	Y+1, r25	; 0x01
    2f6c:	88 83       	st	Y, r24
    2f6e:	cf 5b       	subi	r28, 0xBF	; 191
    2f70:	d6 41       	sbci	r29, 0x16	; 22
    2f72:	cf 53       	subi	r28, 0x3F	; 63
    2f74:	d9 4e       	sbci	r29, 0xE9	; 233
    2f76:	99 83       	std	Y+1, r25	; 0x01
    2f78:	88 83       	st	Y, r24
    2f7a:	c1 5c       	subi	r28, 0xC1	; 193
    2f7c:	d6 41       	sbci	r29, 0x16	; 22
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}
}; 
 
decode_and_assign_vertices(); 
    2f7e:	0e 94 32 0b 	call	0x1664	; 0x1664 <decode_and_assign_vertices>
while(1)
{
     select_shortest_path_and_move(graph,current_location);
    2f82:	60 91 9b 05 	lds	r22, 0x059B
    2f86:	70 91 9c 05 	lds	r23, 0x059C
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <select_shortest_path_and_move>
     rotate_servo_and_transmit_after_run();
    2f92:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <rotate_servo_and_transmit_after_run>
     front_axis = destination_axis;   
    2f96:	80 91 99 05 	lds	r24, 0x0599
    2f9a:	90 91 9a 05 	lds	r25, 0x059A
    2f9e:	90 93 80 04 	sts	0x0480, r25
    2fa2:	80 93 7f 04 	sts	0x047F, r24
     
  if(water_pitcher_visited_count == 3)
    2fa6:	80 91 da 04 	lds	r24, 0x04DA
    2faa:	90 91 db 04 	lds	r25, 0x04DB
    2fae:	83 30       	cpi	r24, 0x03	; 3
    2fb0:	91 05       	cpc	r25, r1
    2fb2:	01 f5       	brne	.+64     	; 0x2ff4 <main+0x904>
  {
   uart_tx('z'); 
    2fb4:	8a e7       	ldi	r24, 0x7A	; 122
    2fb6:	0e 94 09 01 	call	0x212	; 0x212 <uart_tx>
   buzzer_on();
    2fba:	0e 94 3c 01 	call	0x278	; 0x278 <buzzer_on>
    2fbe:	8f ef       	ldi	r24, 0xFF	; 255
    2fc0:	9f ef       	ldi	r25, 0xFF	; 255
    2fc2:	a0 ee       	ldi	r26, 0xE0	; 224
    2fc4:	81 50       	subi	r24, 0x01	; 1
    2fc6:	90 40       	sbci	r25, 0x00	; 0
    2fc8:	a0 40       	sbci	r26, 0x00	; 0
    2fca:	e1 f7       	brne	.-8      	; 0x2fc4 <main+0x8d4>
    2fcc:	00 c0       	rjmp	.+0      	; 0x2fce <main+0x8de>
    2fce:	00 00       	nop
   _delay_ms(5000);
   buzzer_off();
    2fd0:	0e 94 40 01 	call	0x280	; 0x280 <buzzer_off>
  { 
           current_location = final_vertex;
     }
 }
 return 0; 
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	c8 53       	subi	r28, 0x38	; 56
    2fda:	d9 4e       	sbci	r29, 0xE9	; 233
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	ff 90       	pop	r15
    2ff0:	ef 90       	pop	r14
    2ff2:	08 95       	ret
   buzzer_off();
         break;
     }  
     else
  { 
           current_location = final_vertex;
    2ff4:	80 91 b5 05 	lds	r24, 0x05B5
    2ff8:	90 91 b6 05 	lds	r25, 0x05B6
    2ffc:	90 93 9c 05 	sts	0x059C, r25
    3000:	80 93 9b 05 	sts	0x059B, r24
     }
 }
    3004:	be cf       	rjmp	.-132    	; 0x2f82 <main+0x892>

00003006 <__subsf3>:
    3006:	50 58       	subi	r21, 0x80	; 128

00003008 <__addsf3>:
    3008:	bb 27       	eor	r27, r27
    300a:	aa 27       	eor	r26, r26
    300c:	0e d0       	rcall	.+28     	; 0x302a <__addsf3x>
    300e:	48 c1       	rjmp	.+656    	; 0x32a0 <__fp_round>
    3010:	39 d1       	rcall	.+626    	; 0x3284 <__fp_pscA>
    3012:	30 f0       	brcs	.+12     	; 0x3020 <__addsf3+0x18>
    3014:	3e d1       	rcall	.+636    	; 0x3292 <__fp_pscB>
    3016:	20 f0       	brcs	.+8      	; 0x3020 <__addsf3+0x18>
    3018:	31 f4       	brne	.+12     	; 0x3026 <__addsf3+0x1e>
    301a:	9f 3f       	cpi	r25, 0xFF	; 255
    301c:	11 f4       	brne	.+4      	; 0x3022 <__addsf3+0x1a>
    301e:	1e f4       	brtc	.+6      	; 0x3026 <__addsf3+0x1e>
    3020:	2e c1       	rjmp	.+604    	; 0x327e <__fp_nan>
    3022:	0e f4       	brtc	.+2      	; 0x3026 <__addsf3+0x1e>
    3024:	e0 95       	com	r30
    3026:	e7 fb       	bst	r30, 7
    3028:	24 c1       	rjmp	.+584    	; 0x3272 <__fp_inf>

0000302a <__addsf3x>:
    302a:	e9 2f       	mov	r30, r25
    302c:	4a d1       	rcall	.+660    	; 0x32c2 <__fp_split3>
    302e:	80 f3       	brcs	.-32     	; 0x3010 <__addsf3+0x8>
    3030:	ba 17       	cp	r27, r26
    3032:	62 07       	cpc	r22, r18
    3034:	73 07       	cpc	r23, r19
    3036:	84 07       	cpc	r24, r20
    3038:	95 07       	cpc	r25, r21
    303a:	18 f0       	brcs	.+6      	; 0x3042 <__addsf3x+0x18>
    303c:	71 f4       	brne	.+28     	; 0x305a <__addsf3x+0x30>
    303e:	9e f5       	brtc	.+102    	; 0x30a6 <__addsf3x+0x7c>
    3040:	62 c1       	rjmp	.+708    	; 0x3306 <__fp_zero>
    3042:	0e f4       	brtc	.+2      	; 0x3046 <__addsf3x+0x1c>
    3044:	e0 95       	com	r30
    3046:	0b 2e       	mov	r0, r27
    3048:	ba 2f       	mov	r27, r26
    304a:	a0 2d       	mov	r26, r0
    304c:	0b 01       	movw	r0, r22
    304e:	b9 01       	movw	r22, r18
    3050:	90 01       	movw	r18, r0
    3052:	0c 01       	movw	r0, r24
    3054:	ca 01       	movw	r24, r20
    3056:	a0 01       	movw	r20, r0
    3058:	11 24       	eor	r1, r1
    305a:	ff 27       	eor	r31, r31
    305c:	59 1b       	sub	r21, r25
    305e:	99 f0       	breq	.+38     	; 0x3086 <__addsf3x+0x5c>
    3060:	59 3f       	cpi	r21, 0xF9	; 249
    3062:	50 f4       	brcc	.+20     	; 0x3078 <__addsf3x+0x4e>
    3064:	50 3e       	cpi	r21, 0xE0	; 224
    3066:	68 f1       	brcs	.+90     	; 0x30c2 <__addsf3x+0x98>
    3068:	1a 16       	cp	r1, r26
    306a:	f0 40       	sbci	r31, 0x00	; 0
    306c:	a2 2f       	mov	r26, r18
    306e:	23 2f       	mov	r18, r19
    3070:	34 2f       	mov	r19, r20
    3072:	44 27       	eor	r20, r20
    3074:	58 5f       	subi	r21, 0xF8	; 248
    3076:	f3 cf       	rjmp	.-26     	; 0x305e <__addsf3x+0x34>
    3078:	46 95       	lsr	r20
    307a:	37 95       	ror	r19
    307c:	27 95       	ror	r18
    307e:	a7 95       	ror	r26
    3080:	f0 40       	sbci	r31, 0x00	; 0
    3082:	53 95       	inc	r21
    3084:	c9 f7       	brne	.-14     	; 0x3078 <__addsf3x+0x4e>
    3086:	7e f4       	brtc	.+30     	; 0x30a6 <__addsf3x+0x7c>
    3088:	1f 16       	cp	r1, r31
    308a:	ba 0b       	sbc	r27, r26
    308c:	62 0b       	sbc	r22, r18
    308e:	73 0b       	sbc	r23, r19
    3090:	84 0b       	sbc	r24, r20
    3092:	ba f0       	brmi	.+46     	; 0x30c2 <__addsf3x+0x98>
    3094:	91 50       	subi	r25, 0x01	; 1
    3096:	a1 f0       	breq	.+40     	; 0x30c0 <__addsf3x+0x96>
    3098:	ff 0f       	add	r31, r31
    309a:	bb 1f       	adc	r27, r27
    309c:	66 1f       	adc	r22, r22
    309e:	77 1f       	adc	r23, r23
    30a0:	88 1f       	adc	r24, r24
    30a2:	c2 f7       	brpl	.-16     	; 0x3094 <__addsf3x+0x6a>
    30a4:	0e c0       	rjmp	.+28     	; 0x30c2 <__addsf3x+0x98>
    30a6:	ba 0f       	add	r27, r26
    30a8:	62 1f       	adc	r22, r18
    30aa:	73 1f       	adc	r23, r19
    30ac:	84 1f       	adc	r24, r20
    30ae:	48 f4       	brcc	.+18     	; 0x30c2 <__addsf3x+0x98>
    30b0:	87 95       	ror	r24
    30b2:	77 95       	ror	r23
    30b4:	67 95       	ror	r22
    30b6:	b7 95       	ror	r27
    30b8:	f7 95       	ror	r31
    30ba:	9e 3f       	cpi	r25, 0xFE	; 254
    30bc:	08 f0       	brcs	.+2      	; 0x30c0 <__addsf3x+0x96>
    30be:	b3 cf       	rjmp	.-154    	; 0x3026 <__addsf3+0x1e>
    30c0:	93 95       	inc	r25
    30c2:	88 0f       	add	r24, r24
    30c4:	08 f0       	brcs	.+2      	; 0x30c8 <__addsf3x+0x9e>
    30c6:	99 27       	eor	r25, r25
    30c8:	ee 0f       	add	r30, r30
    30ca:	97 95       	ror	r25
    30cc:	87 95       	ror	r24
    30ce:	08 95       	ret

000030d0 <__divsf3>:
    30d0:	0c d0       	rcall	.+24     	; 0x30ea <__divsf3x>
    30d2:	e6 c0       	rjmp	.+460    	; 0x32a0 <__fp_round>
    30d4:	de d0       	rcall	.+444    	; 0x3292 <__fp_pscB>
    30d6:	40 f0       	brcs	.+16     	; 0x30e8 <__divsf3+0x18>
    30d8:	d5 d0       	rcall	.+426    	; 0x3284 <__fp_pscA>
    30da:	30 f0       	brcs	.+12     	; 0x30e8 <__divsf3+0x18>
    30dc:	21 f4       	brne	.+8      	; 0x30e6 <__divsf3+0x16>
    30de:	5f 3f       	cpi	r21, 0xFF	; 255
    30e0:	19 f0       	breq	.+6      	; 0x30e8 <__divsf3+0x18>
    30e2:	c7 c0       	rjmp	.+398    	; 0x3272 <__fp_inf>
    30e4:	51 11       	cpse	r21, r1
    30e6:	10 c1       	rjmp	.+544    	; 0x3308 <__fp_szero>
    30e8:	ca c0       	rjmp	.+404    	; 0x327e <__fp_nan>

000030ea <__divsf3x>:
    30ea:	eb d0       	rcall	.+470    	; 0x32c2 <__fp_split3>
    30ec:	98 f3       	brcs	.-26     	; 0x30d4 <__divsf3+0x4>

000030ee <__divsf3_pse>:
    30ee:	99 23       	and	r25, r25
    30f0:	c9 f3       	breq	.-14     	; 0x30e4 <__divsf3+0x14>
    30f2:	55 23       	and	r21, r21
    30f4:	b1 f3       	breq	.-20     	; 0x30e2 <__divsf3+0x12>
    30f6:	95 1b       	sub	r25, r21
    30f8:	55 0b       	sbc	r21, r21
    30fa:	bb 27       	eor	r27, r27
    30fc:	aa 27       	eor	r26, r26
    30fe:	62 17       	cp	r22, r18
    3100:	73 07       	cpc	r23, r19
    3102:	84 07       	cpc	r24, r20
    3104:	38 f0       	brcs	.+14     	; 0x3114 <__divsf3_pse+0x26>
    3106:	9f 5f       	subi	r25, 0xFF	; 255
    3108:	5f 4f       	sbci	r21, 0xFF	; 255
    310a:	22 0f       	add	r18, r18
    310c:	33 1f       	adc	r19, r19
    310e:	44 1f       	adc	r20, r20
    3110:	aa 1f       	adc	r26, r26
    3112:	a9 f3       	breq	.-22     	; 0x30fe <__divsf3_pse+0x10>
    3114:	33 d0       	rcall	.+102    	; 0x317c <__divsf3_pse+0x8e>
    3116:	0e 2e       	mov	r0, r30
    3118:	3a f0       	brmi	.+14     	; 0x3128 <__divsf3_pse+0x3a>
    311a:	e0 e8       	ldi	r30, 0x80	; 128
    311c:	30 d0       	rcall	.+96     	; 0x317e <__divsf3_pse+0x90>
    311e:	91 50       	subi	r25, 0x01	; 1
    3120:	50 40       	sbci	r21, 0x00	; 0
    3122:	e6 95       	lsr	r30
    3124:	00 1c       	adc	r0, r0
    3126:	ca f7       	brpl	.-14     	; 0x311a <__divsf3_pse+0x2c>
    3128:	29 d0       	rcall	.+82     	; 0x317c <__divsf3_pse+0x8e>
    312a:	fe 2f       	mov	r31, r30
    312c:	27 d0       	rcall	.+78     	; 0x317c <__divsf3_pse+0x8e>
    312e:	66 0f       	add	r22, r22
    3130:	77 1f       	adc	r23, r23
    3132:	88 1f       	adc	r24, r24
    3134:	bb 1f       	adc	r27, r27
    3136:	26 17       	cp	r18, r22
    3138:	37 07       	cpc	r19, r23
    313a:	48 07       	cpc	r20, r24
    313c:	ab 07       	cpc	r26, r27
    313e:	b0 e8       	ldi	r27, 0x80	; 128
    3140:	09 f0       	breq	.+2      	; 0x3144 <__divsf3_pse+0x56>
    3142:	bb 0b       	sbc	r27, r27
    3144:	80 2d       	mov	r24, r0
    3146:	bf 01       	movw	r22, r30
    3148:	ff 27       	eor	r31, r31
    314a:	93 58       	subi	r25, 0x83	; 131
    314c:	5f 4f       	sbci	r21, 0xFF	; 255
    314e:	2a f0       	brmi	.+10     	; 0x315a <__divsf3_pse+0x6c>
    3150:	9e 3f       	cpi	r25, 0xFE	; 254
    3152:	51 05       	cpc	r21, r1
    3154:	68 f0       	brcs	.+26     	; 0x3170 <__divsf3_pse+0x82>
    3156:	8d c0       	rjmp	.+282    	; 0x3272 <__fp_inf>
    3158:	d7 c0       	rjmp	.+430    	; 0x3308 <__fp_szero>
    315a:	5f 3f       	cpi	r21, 0xFF	; 255
    315c:	ec f3       	brlt	.-6      	; 0x3158 <__divsf3_pse+0x6a>
    315e:	98 3e       	cpi	r25, 0xE8	; 232
    3160:	dc f3       	brlt	.-10     	; 0x3158 <__divsf3_pse+0x6a>
    3162:	86 95       	lsr	r24
    3164:	77 95       	ror	r23
    3166:	67 95       	ror	r22
    3168:	b7 95       	ror	r27
    316a:	f7 95       	ror	r31
    316c:	9f 5f       	subi	r25, 0xFF	; 255
    316e:	c9 f7       	brne	.-14     	; 0x3162 <__divsf3_pse+0x74>
    3170:	88 0f       	add	r24, r24
    3172:	91 1d       	adc	r25, r1
    3174:	96 95       	lsr	r25
    3176:	87 95       	ror	r24
    3178:	97 f9       	bld	r25, 7
    317a:	08 95       	ret
    317c:	e1 e0       	ldi	r30, 0x01	; 1
    317e:	66 0f       	add	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	bb 1f       	adc	r27, r27
    3186:	62 17       	cp	r22, r18
    3188:	73 07       	cpc	r23, r19
    318a:	84 07       	cpc	r24, r20
    318c:	ba 07       	cpc	r27, r26
    318e:	20 f0       	brcs	.+8      	; 0x3198 <__divsf3_pse+0xaa>
    3190:	62 1b       	sub	r22, r18
    3192:	73 0b       	sbc	r23, r19
    3194:	84 0b       	sbc	r24, r20
    3196:	ba 0b       	sbc	r27, r26
    3198:	ee 1f       	adc	r30, r30
    319a:	88 f7       	brcc	.-30     	; 0x317e <__divsf3_pse+0x90>
    319c:	e0 95       	com	r30
    319e:	08 95       	ret

000031a0 <__fixunssfsi>:
    31a0:	98 d0       	rcall	.+304    	; 0x32d2 <__fp_splitA>
    31a2:	88 f0       	brcs	.+34     	; 0x31c6 <__fixunssfsi+0x26>
    31a4:	9f 57       	subi	r25, 0x7F	; 127
    31a6:	90 f0       	brcs	.+36     	; 0x31cc <__fixunssfsi+0x2c>
    31a8:	b9 2f       	mov	r27, r25
    31aa:	99 27       	eor	r25, r25
    31ac:	b7 51       	subi	r27, 0x17	; 23
    31ae:	a0 f0       	brcs	.+40     	; 0x31d8 <__fixunssfsi+0x38>
    31b0:	d1 f0       	breq	.+52     	; 0x31e6 <__fixunssfsi+0x46>
    31b2:	66 0f       	add	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	88 1f       	adc	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	1a f0       	brmi	.+6      	; 0x31c2 <__fixunssfsi+0x22>
    31bc:	ba 95       	dec	r27
    31be:	c9 f7       	brne	.-14     	; 0x31b2 <__fixunssfsi+0x12>
    31c0:	12 c0       	rjmp	.+36     	; 0x31e6 <__fixunssfsi+0x46>
    31c2:	b1 30       	cpi	r27, 0x01	; 1
    31c4:	81 f0       	breq	.+32     	; 0x31e6 <__fixunssfsi+0x46>
    31c6:	9f d0       	rcall	.+318    	; 0x3306 <__fp_zero>
    31c8:	b1 e0       	ldi	r27, 0x01	; 1
    31ca:	08 95       	ret
    31cc:	9c c0       	rjmp	.+312    	; 0x3306 <__fp_zero>
    31ce:	67 2f       	mov	r22, r23
    31d0:	78 2f       	mov	r23, r24
    31d2:	88 27       	eor	r24, r24
    31d4:	b8 5f       	subi	r27, 0xF8	; 248
    31d6:	39 f0       	breq	.+14     	; 0x31e6 <__fixunssfsi+0x46>
    31d8:	b9 3f       	cpi	r27, 0xF9	; 249
    31da:	cc f3       	brlt	.-14     	; 0x31ce <__fixunssfsi+0x2e>
    31dc:	86 95       	lsr	r24
    31de:	77 95       	ror	r23
    31e0:	67 95       	ror	r22
    31e2:	b3 95       	inc	r27
    31e4:	d9 f7       	brne	.-10     	; 0x31dc <__fixunssfsi+0x3c>
    31e6:	3e f4       	brtc	.+14     	; 0x31f6 <__fixunssfsi+0x56>
    31e8:	90 95       	com	r25
    31ea:	80 95       	com	r24
    31ec:	70 95       	com	r23
    31ee:	61 95       	neg	r22
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	8f 4f       	sbci	r24, 0xFF	; 255
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	08 95       	ret

000031f8 <__floatunsisf>:
    31f8:	e8 94       	clt
    31fa:	09 c0       	rjmp	.+18     	; 0x320e <__floatsisf+0x12>

000031fc <__floatsisf>:
    31fc:	97 fb       	bst	r25, 7
    31fe:	3e f4       	brtc	.+14     	; 0x320e <__floatsisf+0x12>
    3200:	90 95       	com	r25
    3202:	80 95       	com	r24
    3204:	70 95       	com	r23
    3206:	61 95       	neg	r22
    3208:	7f 4f       	sbci	r23, 0xFF	; 255
    320a:	8f 4f       	sbci	r24, 0xFF	; 255
    320c:	9f 4f       	sbci	r25, 0xFF	; 255
    320e:	99 23       	and	r25, r25
    3210:	a9 f0       	breq	.+42     	; 0x323c <__floatsisf+0x40>
    3212:	f9 2f       	mov	r31, r25
    3214:	96 e9       	ldi	r25, 0x96	; 150
    3216:	bb 27       	eor	r27, r27
    3218:	93 95       	inc	r25
    321a:	f6 95       	lsr	r31
    321c:	87 95       	ror	r24
    321e:	77 95       	ror	r23
    3220:	67 95       	ror	r22
    3222:	b7 95       	ror	r27
    3224:	f1 11       	cpse	r31, r1
    3226:	f8 cf       	rjmp	.-16     	; 0x3218 <__floatsisf+0x1c>
    3228:	fa f4       	brpl	.+62     	; 0x3268 <__floatsisf+0x6c>
    322a:	bb 0f       	add	r27, r27
    322c:	11 f4       	brne	.+4      	; 0x3232 <__floatsisf+0x36>
    322e:	60 ff       	sbrs	r22, 0
    3230:	1b c0       	rjmp	.+54     	; 0x3268 <__floatsisf+0x6c>
    3232:	6f 5f       	subi	r22, 0xFF	; 255
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	8f 4f       	sbci	r24, 0xFF	; 255
    3238:	9f 4f       	sbci	r25, 0xFF	; 255
    323a:	16 c0       	rjmp	.+44     	; 0x3268 <__floatsisf+0x6c>
    323c:	88 23       	and	r24, r24
    323e:	11 f0       	breq	.+4      	; 0x3244 <__floatsisf+0x48>
    3240:	96 e9       	ldi	r25, 0x96	; 150
    3242:	11 c0       	rjmp	.+34     	; 0x3266 <__floatsisf+0x6a>
    3244:	77 23       	and	r23, r23
    3246:	21 f0       	breq	.+8      	; 0x3250 <__floatsisf+0x54>
    3248:	9e e8       	ldi	r25, 0x8E	; 142
    324a:	87 2f       	mov	r24, r23
    324c:	76 2f       	mov	r23, r22
    324e:	05 c0       	rjmp	.+10     	; 0x325a <__floatsisf+0x5e>
    3250:	66 23       	and	r22, r22
    3252:	71 f0       	breq	.+28     	; 0x3270 <__floatsisf+0x74>
    3254:	96 e8       	ldi	r25, 0x86	; 134
    3256:	86 2f       	mov	r24, r22
    3258:	70 e0       	ldi	r23, 0x00	; 0
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	2a f0       	brmi	.+10     	; 0x3268 <__floatsisf+0x6c>
    325e:	9a 95       	dec	r25
    3260:	66 0f       	add	r22, r22
    3262:	77 1f       	adc	r23, r23
    3264:	88 1f       	adc	r24, r24
    3266:	da f7       	brpl	.-10     	; 0x325e <__floatsisf+0x62>
    3268:	88 0f       	add	r24, r24
    326a:	96 95       	lsr	r25
    326c:	87 95       	ror	r24
    326e:	97 f9       	bld	r25, 7
    3270:	08 95       	ret

00003272 <__fp_inf>:
    3272:	97 f9       	bld	r25, 7
    3274:	9f 67       	ori	r25, 0x7F	; 127
    3276:	80 e8       	ldi	r24, 0x80	; 128
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	08 95       	ret

0000327e <__fp_nan>:
    327e:	9f ef       	ldi	r25, 0xFF	; 255
    3280:	80 ec       	ldi	r24, 0xC0	; 192
    3282:	08 95       	ret

00003284 <__fp_pscA>:
    3284:	00 24       	eor	r0, r0
    3286:	0a 94       	dec	r0
    3288:	16 16       	cp	r1, r22
    328a:	17 06       	cpc	r1, r23
    328c:	18 06       	cpc	r1, r24
    328e:	09 06       	cpc	r0, r25
    3290:	08 95       	ret

00003292 <__fp_pscB>:
    3292:	00 24       	eor	r0, r0
    3294:	0a 94       	dec	r0
    3296:	12 16       	cp	r1, r18
    3298:	13 06       	cpc	r1, r19
    329a:	14 06       	cpc	r1, r20
    329c:	05 06       	cpc	r0, r21
    329e:	08 95       	ret

000032a0 <__fp_round>:
    32a0:	09 2e       	mov	r0, r25
    32a2:	03 94       	inc	r0
    32a4:	00 0c       	add	r0, r0
    32a6:	11 f4       	brne	.+4      	; 0x32ac <__fp_round+0xc>
    32a8:	88 23       	and	r24, r24
    32aa:	52 f0       	brmi	.+20     	; 0x32c0 <__fp_round+0x20>
    32ac:	bb 0f       	add	r27, r27
    32ae:	40 f4       	brcc	.+16     	; 0x32c0 <__fp_round+0x20>
    32b0:	bf 2b       	or	r27, r31
    32b2:	11 f4       	brne	.+4      	; 0x32b8 <__fp_round+0x18>
    32b4:	60 ff       	sbrs	r22, 0
    32b6:	04 c0       	rjmp	.+8      	; 0x32c0 <__fp_round+0x20>
    32b8:	6f 5f       	subi	r22, 0xFF	; 255
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	8f 4f       	sbci	r24, 0xFF	; 255
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	08 95       	ret

000032c2 <__fp_split3>:
    32c2:	57 fd       	sbrc	r21, 7
    32c4:	90 58       	subi	r25, 0x80	; 128
    32c6:	44 0f       	add	r20, r20
    32c8:	55 1f       	adc	r21, r21
    32ca:	59 f0       	breq	.+22     	; 0x32e2 <__fp_splitA+0x10>
    32cc:	5f 3f       	cpi	r21, 0xFF	; 255
    32ce:	71 f0       	breq	.+28     	; 0x32ec <__fp_splitA+0x1a>
    32d0:	47 95       	ror	r20

000032d2 <__fp_splitA>:
    32d2:	88 0f       	add	r24, r24
    32d4:	97 fb       	bst	r25, 7
    32d6:	99 1f       	adc	r25, r25
    32d8:	61 f0       	breq	.+24     	; 0x32f2 <__fp_splitA+0x20>
    32da:	9f 3f       	cpi	r25, 0xFF	; 255
    32dc:	79 f0       	breq	.+30     	; 0x32fc <__fp_splitA+0x2a>
    32de:	87 95       	ror	r24
    32e0:	08 95       	ret
    32e2:	12 16       	cp	r1, r18
    32e4:	13 06       	cpc	r1, r19
    32e6:	14 06       	cpc	r1, r20
    32e8:	55 1f       	adc	r21, r21
    32ea:	f2 cf       	rjmp	.-28     	; 0x32d0 <__fp_split3+0xe>
    32ec:	46 95       	lsr	r20
    32ee:	f1 df       	rcall	.-30     	; 0x32d2 <__fp_splitA>
    32f0:	08 c0       	rjmp	.+16     	; 0x3302 <__fp_splitA+0x30>
    32f2:	16 16       	cp	r1, r22
    32f4:	17 06       	cpc	r1, r23
    32f6:	18 06       	cpc	r1, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	f1 cf       	rjmp	.-30     	; 0x32de <__fp_splitA+0xc>
    32fc:	86 95       	lsr	r24
    32fe:	71 05       	cpc	r23, r1
    3300:	61 05       	cpc	r22, r1
    3302:	08 94       	sec
    3304:	08 95       	ret

00003306 <__fp_zero>:
    3306:	e8 94       	clt

00003308 <__fp_szero>:
    3308:	bb 27       	eor	r27, r27
    330a:	66 27       	eor	r22, r22
    330c:	77 27       	eor	r23, r23
    330e:	cb 01       	movw	r24, r22
    3310:	97 f9       	bld	r25, 7
    3312:	08 95       	ret

00003314 <strcat>:
    3314:	fb 01       	movw	r30, r22
    3316:	dc 01       	movw	r26, r24
    3318:	0d 90       	ld	r0, X+
    331a:	00 20       	and	r0, r0
    331c:	e9 f7       	brne	.-6      	; 0x3318 <strcat+0x4>
    331e:	11 97       	sbiw	r26, 0x01	; 1
    3320:	01 90       	ld	r0, Z+
    3322:	0d 92       	st	X+, r0
    3324:	00 20       	and	r0, r0
    3326:	e1 f7       	brne	.-8      	; 0x3320 <strcat+0xc>
    3328:	08 95       	ret

0000332a <strcmp>:
    332a:	fb 01       	movw	r30, r22
    332c:	dc 01       	movw	r26, r24
    332e:	8d 91       	ld	r24, X+
    3330:	01 90       	ld	r0, Z+
    3332:	80 19       	sub	r24, r0
    3334:	01 10       	cpse	r0, r1
    3336:	d9 f3       	breq	.-10     	; 0x332e <strcmp+0x4>
    3338:	99 0b       	sbc	r25, r25
    333a:	08 95       	ret

0000333c <_exit>:
    333c:	f8 94       	cli

0000333e <__stop_program>:
    333e:	ff cf       	rjmp	.-2      	; 0x333e <__stop_program>
